{
  "hints": {
    "createApplication(address,address,application,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "updateApplication()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "create_pool_token(pay,string,string)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_admin(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_governer(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_fees(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_mint_enabled(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_burn_enabled(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_swap_enabled(bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "register_online(byte[],byte[],byte[],uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "register_offline()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "set_ratio()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mint(pay,uint64,asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burn(axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swap_to_arc200(pay,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swap_from_arc200(uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "admin": {
          "type": "bytes",
          "key": "admin"
        },
        "governer": {
          "type": "bytes",
          "key": "governer"
        },
        "ratio": {
          "type": "uint64",
          "key": "ratio"
        },
        "swap_fee": {
          "type": "uint64",
          "key": "swap_fee"
        },
        "admin_fee": {
          "type": "uint64",
          "key": "admin_fee"
        },
        "lpt_asset": {
          "type": "uint64",
          "key": "lpt_asset"
        },
        "arc200_token": {
          "type": "uint64",
          "key": "arc200_token"
        },
        "mint_enabled": {
          "type": "bytes",
          "key": "mint_enabled"
        },
        "burn_enabled": {
          "type": "bytes",
          "key": "burn_enabled"
        },
        "swap_enabled": {
          "type": "bytes",
          "key": "swap_enabled"
        },
        "initialized": {
          "type": "bytes",
          "key": "initialized"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 6,
      "num_uints": 5
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBUaGlzIFRFQUwgd2FzIGdlbmVyYXRlZCBieSBURUFMU2NyaXB0IHYwLjgwLjEKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbG1lbnRlZCBpbiB0aGUgY29udHJhY3QsIGl0cyByZXNwZWN0aXZlIGJyYW5jaCB3aWxsIGJlICJOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQppbnQgNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggY2FsbF9Ob09wIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIGNhbGxfVXBkYXRlQXBwbGljYXRpb24gTk9UX0lNUExFTUVOVEVEIGNyZWF0ZV9Ob09wIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQKCk5PVF9JTVBMRU1FTlRFRDoKCWVycgoKLy8gY3JlYXRlQXBwbGljYXRpb24oYWRkcmVzcyxhZGRyZXNzLGFwcGxpY2F0aW9uLHVpbnQ2NCl2b2lkCmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbjoKCS8vIGxwX2ZlZTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA0CglidG9pCgoJLy8gYXJjMjAwX3Rva2VuOiBhcHBsaWNhdGlvbgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJYnRvaQoJdHhuYXMgQXBwbGljYXRpb25zCgoJLy8gZ292ZXJuZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBhZG1pbjogYWRkcmVzcwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgY3JlYXRlQXBwbGljYXRpb24oYWRkcmVzcyxhZGRyZXNzLGFwcGxpY2F0aW9uLHVpbnQ2NCl2b2lkCgljYWxsc3ViIGNyZWF0ZUFwcGxpY2F0aW9uCglpbnQgMQoJcmV0dXJuCgovLyBjcmVhdGVBcHBsaWNhdGlvbihhZG1pbjogQWRkcmVzcywgZ292ZXJuZXI6IEFkZHJlc3MsIGFyYzIwMF90b2tlbjogQXBwbGljYXRpb24sIGxwX2ZlZTogdWludDY0KTogdm9pZAovLwovLyBpbml0aWFsaXplIHZhbHVlcwpjcmVhdGVBcHBsaWNhdGlvbjoKCXByb3RvIDQgMAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czo3NQoJLy8gdGhpcy5hZG1pbi52YWx1ZSA9IGFkbWluCglieXRlIDB4NjE2NDZkNjk2ZSAvLyAiYWRtaW4iCglmcmFtZV9kaWcgLTEgLy8gYWRtaW46IEFkZHJlc3MKCWFwcF9nbG9iYWxfcHV0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjc2CgkvLyB0aGlzLmdvdmVybmVyLnZhbHVlID0gZ292ZXJuZXIKCWJ5dGUgMHg2NzZmNzY2NTcyNmU2NTcyIC8vICJnb3Zlcm5lciIKCWZyYW1lX2RpZyAtMiAvLyBnb3Zlcm5lcjogQWRkcmVzcwoJYXBwX2dsb2JhbF9wdXQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6NzcKCS8vIHRoaXMuYXJjMjAwX3Rva2VuLnZhbHVlID0gYXJjMjAwX3Rva2VuCglieXRlIDB4NjE3MjYzMzIzMDMwNWY3NDZmNmI2NTZlIC8vICJhcmMyMDBfdG9rZW4iCglmcmFtZV9kaWcgLTMgLy8gYXJjMjAwX3Rva2VuOiBBcHBsaWNhdGlvbgoJYXBwX2dsb2JhbF9wdXQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6NzgKCS8vIHRoaXMuc3dhcF9mZWUudmFsdWUgPSBscF9mZWUKCWJ5dGUgMHg3Mzc3NjE3MDVmNjY2NTY1IC8vICJzd2FwX2ZlZSIKCWZyYW1lX2RpZyAtNCAvLyBscF9mZWU6IHVpbnQ2NAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6NzkKCS8vIHRoaXMuYWRtaW5fZmVlLnZhbHVlID0gd2lkZVJhdGlvKFtscF9mZWUsIElOSVRJQUxfQURNSU5fRkVFXSwgW1NDQUxFXSkKCWJ5dGUgMHg2MTY0NmQ2OTZlNWY2NjY1NjUgLy8gImFkbWluX2ZlZSIKCWZyYW1lX2RpZyAtNCAvLyBscF9mZWU6IHVpbnQ2NAoJaW50IDUwMDAwMDAwCgltdWx3CglpbnQgMAoJaW50IDEwMDAwMDAwMAoJZGl2bW9kdwoJcG9wCglwb3AKCXN3YXAKCSEKCWFzc2VydAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6ODAKCS8vIHRoaXMubWludF9lbmFibGVkLnZhbHVlID0gdHJ1ZQoJYnl0ZSAweDZkNjk2ZTc0NWY2NTZlNjE2MjZjNjU2NCAvLyAibWludF9lbmFibGVkIgoJaW50IDEKCWJ5dGUgMHgwMAoJaW50IDAKCXVuY292ZXIgMgoJc2V0Yml0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czo4MQoJLy8gdGhpcy5idXJuX2VuYWJsZWQudmFsdWUgPSB0cnVlCglieXRlIDB4NjI3NTcyNmU1ZjY1NmU2MTYyNmM2NTY0IC8vICJidXJuX2VuYWJsZWQiCglpbnQgMQoJYnl0ZSAweDAwCglpbnQgMAoJdW5jb3ZlciAyCglzZXRiaXQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjgyCgkvLyB0aGlzLnN3YXBfZW5hYmxlZC52YWx1ZSA9IHRydWUKCWJ5dGUgMHg3Mzc3NjE3MDVmNjU2ZTYxNjI2YzY1NjQgLy8gInN3YXBfZW5hYmxlZCIKCWludCAxCglieXRlIDB4MDAKCWludCAwCgl1bmNvdmVyIDIKCXNldGJpdAoJYXBwX2dsb2JhbF9wdXQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6ODMKCS8vIHRoaXMuaW5pdGlhbGl6ZWQudmFsdWUgPSBmYWxzZQoJYnl0ZSAweDY5NmU2OTc0Njk2MTZjNjk3YTY1NjQgLy8gImluaXRpYWxpemVkIgoJaW50IDAKCWJ5dGUgMHgwMAoJaW50IDAKCXVuY292ZXIgMgoJc2V0Yml0CglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyB1cGRhdGVBcHBsaWNhdGlvbigpdm9pZAphYmlfcm91dGVfdXBkYXRlQXBwbGljYXRpb246CgkvLyBleGVjdXRlIHVwZGF0ZUFwcGxpY2F0aW9uKCl2b2lkCgljYWxsc3ViIHVwZGF0ZUFwcGxpY2F0aW9uCglpbnQgMQoJcmV0dXJuCgovLyB1cGRhdGVBcHBsaWNhdGlvbigpOiB2b2lkCi8vCi8vIGFsbG93cyBhZG1pbiB0byB1cGRhdGUgdGhlIGFwcGxpY2F0aW9uCnVwZGF0ZUFwcGxpY2F0aW9uOgoJcHJvdG8gMCAwCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjg4CgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLmFkbWluLnZhbHVlKQoJdHhuIFNlbmRlcgoJYnl0ZSAweDYxNjQ2ZDY5NmUgLy8gImFkbWluIgoJYXBwX2dsb2JhbF9nZXQKCT09Cglhc3NlcnQKCXJldHN1YgoKLy8gY3JlYXRlX3Bvb2xfdG9rZW4ocGF5LHN0cmluZyxzdHJpbmcpdWludDY0CmFiaV9yb3V0ZV9jcmVhdGVfcG9vbF90b2tlbjoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gbHB0X3VuaXQ6IHN0cmluZwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZXh0cmFjdCAyIDAKCgkvLyBscHRfbmFtZTogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGFsZ29fc2VlZF90eG46IHBheQoJdHhuIEdyb3VwSW5kZXgKCWludCAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnQgcGF5Cgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBjcmVhdGVfcG9vbF90b2tlbihwYXksc3RyaW5nLHN0cmluZyl1aW50NjQKCWNhbGxzdWIgY3JlYXRlX3Bvb2xfdG9rZW4KCWl0b2IKCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBjcmVhdGVfcG9vbF90b2tlbihhbGdvX3NlZWRfdHhuOiBQYXlUeG4sIGxwdF9uYW1lOiBzdHJpbmcsIGxwdF91bml0OiBzdHJpbmcpOiBBc3NldApjcmVhdGVfcG9vbF90b2tlbjoKCXByb3RvIDMgMQoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czo5MgoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5nb3Zlcm5lci52YWx1ZSB8fCB0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMuYWRtaW4udmFsdWUpCgl0eG4gU2VuZGVyCglieXRlIDB4Njc2Zjc2NjU3MjZlNjU3MiAvLyAiZ292ZXJuZXIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCWR1cAoJYm56IHNraXBfb3IwCgl0eG4gU2VuZGVyCglieXRlIDB4NjE2NDZkNjk2ZSAvLyAiYWRtaW4iCglhcHBfZ2xvYmFsX2dldAoJPT0KCXx8Cgpza2lwX29yMDoKCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czo5MwoJLy8gYXNzZXJ0KCF0aGlzLmxwdF9hc3NldC5leGlzdHMpCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglieXRlIDB4NmM3MDc0NWY2MTczNzM2NTc0IC8vICJscHRfYXNzZXQiCglhcHBfZ2xvYmFsX2dldF9leAoJc3dhcAoJcG9wCgkhCglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6OTQKCS8vIHZlcmlmeVBheVR4bihhbGdvX3NlZWRfdHhuLCB7IHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLCBhbW91bnQ6IHsgZ3JlYXRlclRoYW5FcXVhbFRvOiBNSU5fQkFMQU5DRSArIDEwMDAgfSB9KQoJLy8gdmVyaWZ5IHJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gYWxnb19zZWVkX3R4bjogUGF5VHhuCglndHhucyBSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYW1vdW50CglmcmFtZV9kaWcgLTEgLy8gYWxnb19zZWVkX3R4bjogUGF5VHhuCglndHhucyBBbW91bnQKCWludCAxMDAxMDAwCgk+PQoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjk2CgkvLyB0aGlzLmxwdF9hc3NldC52YWx1ZSA9IHNlbmRBc3NldENyZWF0aW9uKHsKCS8vIAkJCWNvbmZpZ0Fzc2V0TmFtZTogbHB0X25hbWUsCgkvLyAJCQljb25maWdBc3NldFVuaXROYW1lOiBscHRfdW5pdCwKCS8vIAkJCWNvbmZpZ0Fzc2V0VG90YWw6IExQVF9UT1RBTF9TVVBQTFksCgkvLyAJCQljb25maWdBc3NldERlY2ltYWxzOiBMUFRfQVNTRVRfREVDSU1BTFMsCgkvLyAJCQljb25maWdBc3NldE1hbmFnZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAJCQljb25maWdBc3NldFJlc2VydmU6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAJCQlmZWU6IDEwMDAsCgkvLyAJCX0pCglieXRlIDB4NmM3MDc0NWY2MTczNzM2NTc0IC8vICJscHRfYXNzZXQiCglpdHhuX2JlZ2luCglpbnQgYWNmZwoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czo5NwoJLy8gY29uZmlnQXNzZXROYW1lOiBscHRfbmFtZQoJZnJhbWVfZGlnIC0yIC8vIGxwdF9uYW1lOiBzdHJpbmcKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXROYW1lCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjk4CgkvLyBjb25maWdBc3NldFVuaXROYW1lOiBscHRfdW5pdAoJZnJhbWVfZGlnIC0zIC8vIGxwdF91bml0OiBzdHJpbmcKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRVbml0TmFtZQoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czo5OQoJLy8gY29uZmlnQXNzZXRUb3RhbDogTFBUX1RPVEFMX1NVUFBMWQoJaW50IDEwMDAwMDAwMDAwMDAwMDAwCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0VG90YWwKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MTAwCgkvLyBjb25maWdBc3NldERlY2ltYWxzOiBMUFRfQVNTRVRfREVDSU1BTFMKCWludCA2CglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0RGVjaW1hbHMKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MTAxCgkvLyBjb25maWdBc3NldE1hbmFnZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIENvbmZpZ0Fzc2V0TWFuYWdlcgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czoxMDIKCS8vIGNvbmZpZ0Fzc2V0UmVzZXJ2ZTogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRSZXNlcnZlCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjEwMwoJLy8gZmVlOiAxMDAwCglpbnQgMTAwMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglpdHhuIENyZWF0ZWRBc3NldElECglhcHBfZ2xvYmFsX3B1dAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czoxMDYKCS8vIHJldHVybiB0aGlzLmxwdF9hc3NldC52YWx1ZTsKCWJ5dGUgMHg2YzcwNzQ1ZjYxNzM3MzY1NzQgLy8gImxwdF9hc3NldCIKCWFwcF9nbG9iYWxfZ2V0CglyZXRzdWIKCi8vIHNldF9hZG1pbihhZGRyZXNzKXZvaWQKYWJpX3JvdXRlX3NldF9hZG1pbjoKCS8vIGFkbWluOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBzZXRfYWRtaW4oYWRkcmVzcyl2b2lkCgljYWxsc3ViIHNldF9hZG1pbgoJaW50IDEKCXJldHVybgoKLy8gc2V0X2FkbWluKGFkbWluOiBBZGRyZXNzKTogdm9pZApzZXRfYWRtaW46Cglwcm90byAxIDAKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MTEwCgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLmFkbWluLnZhbHVlKQoJdHhuIFNlbmRlcgoJYnl0ZSAweDYxNjQ2ZDY5NmUgLy8gImFkbWluIgoJYXBwX2dsb2JhbF9nZXQKCT09Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MTExCgkvLyB0aGlzLmFkbWluLnZhbHVlID0gYWRtaW4KCWJ5dGUgMHg2MTY0NmQ2OTZlIC8vICJhZG1pbiIKCWZyYW1lX2RpZyAtMSAvLyBhZG1pbjogQWRkcmVzcwoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gc2V0X2dvdmVybmVyKGFkZHJlc3Mpdm9pZAphYmlfcm91dGVfc2V0X2dvdmVybmVyOgoJLy8gZ292ZXJuZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIHNldF9nb3Zlcm5lcihhZGRyZXNzKXZvaWQKCWNhbGxzdWIgc2V0X2dvdmVybmVyCglpbnQgMQoJcmV0dXJuCgovLyBzZXRfZ292ZXJuZXIoZ292ZXJuZXI6IEFkZHJlc3MpOiB2b2lkCnNldF9nb3Zlcm5lcjoKCXByb3RvIDEgMAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czoxMTUKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMuZ292ZXJuZXIudmFsdWUgfHwgdGhpcy50eG4uc2VuZGVyID09PSB0aGlzLmFkbWluLnZhbHVlKQoJdHhuIFNlbmRlcgoJYnl0ZSAweDY3NmY3NjY1NzI2ZTY1NzIgLy8gImdvdmVybmVyIgoJYXBwX2dsb2JhbF9nZXQKCT09CglkdXAKCWJueiBza2lwX29yMQoJdHhuIFNlbmRlcgoJYnl0ZSAweDYxNjQ2ZDY5NmUgLy8gImFkbWluIgoJYXBwX2dsb2JhbF9nZXQKCT09Cgl8fAoKc2tpcF9vcjE6Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MTE2CgkvLyB0aGlzLmdvdmVybmVyLnZhbHVlID0gZ292ZXJuZXIKCWJ5dGUgMHg2NzZmNzY2NTcyNmU2NTcyIC8vICJnb3Zlcm5lciIKCWZyYW1lX2RpZyAtMSAvLyBnb3Zlcm5lcjogQWRkcmVzcwoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gc2V0X2ZlZXModWludDY0KXZvaWQKYWJpX3JvdXRlX3NldF9mZWVzOgoJLy8gZmVlOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIHNldF9mZWVzKHVpbnQ2NCl2b2lkCgljYWxsc3ViIHNldF9mZWVzCglpbnQgMQoJcmV0dXJuCgovLyBzZXRfZmVlcyhmZWU6IHVpbnQ2NCk6IHZvaWQKc2V0X2ZlZXM6Cglwcm90byAxIDAKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MTIwCgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLmdvdmVybmVyLnZhbHVlIHx8IHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5hZG1pbi52YWx1ZSkKCXR4biBTZW5kZXIKCWJ5dGUgMHg2NzZmNzY2NTcyNmU2NTcyIC8vICJnb3Zlcm5lciIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoJZHVwCglibnogc2tpcF9vcjIKCXR4biBTZW5kZXIKCWJ5dGUgMHg2MTY0NmQ2OTZlIC8vICJhZG1pbiIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoJfHwKCnNraXBfb3IyOgoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjEyMQoJLy8gdGhpcy5zd2FwX2ZlZS52YWx1ZSA9IGZlZQoJYnl0ZSAweDczNzc2MTcwNWY2NjY1NjUgLy8gInN3YXBfZmVlIgoJZnJhbWVfZGlnIC0xIC8vIGZlZTogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBzZXRfbWludF9lbmFibGVkKGJvb2wpdm9pZAphYmlfcm91dGVfc2V0X21pbnRfZW5hYmxlZDoKCS8vIGVuYWJsZWQ6IGJvb2wKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMQoJPT0KCWFzc2VydAoJaW50IDAKCWdldGJpdAoKCS8vIGV4ZWN1dGUgc2V0X21pbnRfZW5hYmxlZChib29sKXZvaWQKCWNhbGxzdWIgc2V0X21pbnRfZW5hYmxlZAoJaW50IDEKCXJldHVybgoKLy8gc2V0X21pbnRfZW5hYmxlZChlbmFibGVkOiBib29sZWFuKTogdm9pZApzZXRfbWludF9lbmFibGVkOgoJcHJvdG8gMSAwCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjEyNQoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5nb3Zlcm5lci52YWx1ZSB8fCB0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMuYWRtaW4udmFsdWUpCgl0eG4gU2VuZGVyCglieXRlIDB4Njc2Zjc2NjU3MjZlNjU3MiAvLyAiZ292ZXJuZXIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCWR1cAoJYm56IHNraXBfb3IzCgl0eG4gU2VuZGVyCglieXRlIDB4NjE2NDZkNjk2ZSAvLyAiYWRtaW4iCglhcHBfZ2xvYmFsX2dldAoJPT0KCXx8Cgpza2lwX29yMzoKCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czoxMjYKCS8vIHRoaXMubWludF9lbmFibGVkLnZhbHVlID0gZW5hYmxlZAoJYnl0ZSAweDZkNjk2ZTc0NWY2NTZlNjE2MjZjNjU2NCAvLyAibWludF9lbmFibGVkIgoJZnJhbWVfZGlnIC0xIC8vIGVuYWJsZWQ6IGJvb2xlYW4KCWJ5dGUgMHgwMAoJaW50IDAKCXVuY292ZXIgMgoJc2V0Yml0CglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBzZXRfYnVybl9lbmFibGVkKGJvb2wpdm9pZAphYmlfcm91dGVfc2V0X2J1cm5fZW5hYmxlZDoKCS8vIGVuYWJsZWQ6IGJvb2wKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMQoJPT0KCWFzc2VydAoJaW50IDAKCWdldGJpdAoKCS8vIGV4ZWN1dGUgc2V0X2J1cm5fZW5hYmxlZChib29sKXZvaWQKCWNhbGxzdWIgc2V0X2J1cm5fZW5hYmxlZAoJaW50IDEKCXJldHVybgoKLy8gc2V0X2J1cm5fZW5hYmxlZChlbmFibGVkOiBib29sZWFuKTogdm9pZApzZXRfYnVybl9lbmFibGVkOgoJcHJvdG8gMSAwCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjEzMAoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5nb3Zlcm5lci52YWx1ZSB8fCB0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMuYWRtaW4udmFsdWUpCgl0eG4gU2VuZGVyCglieXRlIDB4Njc2Zjc2NjU3MjZlNjU3MiAvLyAiZ292ZXJuZXIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCWR1cAoJYm56IHNraXBfb3I0Cgl0eG4gU2VuZGVyCglieXRlIDB4NjE2NDZkNjk2ZSAvLyAiYWRtaW4iCglhcHBfZ2xvYmFsX2dldAoJPT0KCXx8Cgpza2lwX29yNDoKCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czoxMzEKCS8vIHRoaXMuYnVybl9lbmFibGVkLnZhbHVlID0gZW5hYmxlZAoJYnl0ZSAweDYyNzU3MjZlNWY2NTZlNjE2MjZjNjU2NCAvLyAiYnVybl9lbmFibGVkIgoJZnJhbWVfZGlnIC0xIC8vIGVuYWJsZWQ6IGJvb2xlYW4KCWJ5dGUgMHgwMAoJaW50IDAKCXVuY292ZXIgMgoJc2V0Yml0CglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBzZXRfc3dhcF9lbmFibGVkKGJvb2wpdm9pZAphYmlfcm91dGVfc2V0X3N3YXBfZW5hYmxlZDoKCS8vIGVuYWJsZWQ6IGJvb2wKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnQgMQoJPT0KCWFzc2VydAoJaW50IDAKCWdldGJpdAoKCS8vIGV4ZWN1dGUgc2V0X3N3YXBfZW5hYmxlZChib29sKXZvaWQKCWNhbGxzdWIgc2V0X3N3YXBfZW5hYmxlZAoJaW50IDEKCXJldHVybgoKLy8gc2V0X3N3YXBfZW5hYmxlZChlbmFibGVkOiBib29sZWFuKTogdm9pZApzZXRfc3dhcF9lbmFibGVkOgoJcHJvdG8gMSAwCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjEzNQoJLy8gYXNzZXJ0KHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5nb3Zlcm5lci52YWx1ZSB8fCB0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMuYWRtaW4udmFsdWUpCgl0eG4gU2VuZGVyCglieXRlIDB4Njc2Zjc2NjU3MjZlNjU3MiAvLyAiZ292ZXJuZXIiCglhcHBfZ2xvYmFsX2dldAoJPT0KCWR1cAoJYm56IHNraXBfb3I1Cgl0eG4gU2VuZGVyCglieXRlIDB4NjE2NDZkNjk2ZSAvLyAiYWRtaW4iCglhcHBfZ2xvYmFsX2dldAoJPT0KCXx8Cgpza2lwX29yNToKCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czoxMzYKCS8vIHRoaXMuc3dhcF9lbmFibGVkLnZhbHVlID0gZW5hYmxlZAoJYnl0ZSAweDczNzc2MTcwNWY2NTZlNjE2MjZjNjU2NCAvLyAic3dhcF9lbmFibGVkIgoJZnJhbWVfZGlnIC0xIC8vIGVuYWJsZWQ6IGJvb2xlYW4KCWJ5dGUgMHgwMAoJaW50IDAKCXVuY292ZXIgMgoJc2V0Yml0CglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyByZWdpc3Rlcl9vbmxpbmUoYnl0ZVtdLGJ5dGVbXSxieXRlW10sdWludDY0LHVpbnQ2NCx1aW50NjQpdm9pZAphYmlfcm91dGVfcmVnaXN0ZXJfb25saW5lOgoJLy8gdm90ZV9rZXlfZGlsdXRpb246IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgNgoJYnRvaQoKCS8vIHZvdGVfbGFzdDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA1CglidG9pCgoJLy8gdm90ZV9maXJzdDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA0CglidG9pCgoJLy8gdm90ZV9wazogYnl0ZVtdCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglleHRyYWN0IDIgMAoKCS8vIHN0YXRlX3Byb29mX3BrOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWV4dHJhY3QgMiAwCgoJLy8gc2VsZWN0aW9uX3BrOiBieXRlW10KCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gZXhlY3V0ZSByZWdpc3Rlcl9vbmxpbmUoYnl0ZVtdLGJ5dGVbXSxieXRlW10sdWludDY0LHVpbnQ2NCx1aW50NjQpdm9pZAoJY2FsbHN1YiByZWdpc3Rlcl9vbmxpbmUKCWludCAxCglyZXR1cm4KCi8vIHJlZ2lzdGVyX29ubGluZShzZWxlY3Rpb25fcGs6IGJ5dGVzLCBzdGF0ZV9wcm9vZl9wazogYnl0ZXMsIHZvdGVfcGs6IGJ5dGVzLCB2b3RlX2ZpcnN0OiB1aW50NjQsIHZvdGVfbGFzdDogdWludDY0LCB2b3RlX2tleV9kaWx1dGlvbjogdWludDY0KTogdm9pZApyZWdpc3Rlcl9vbmxpbmU6Cglwcm90byA2IDAKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MTQ3CgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSB0aGlzLmdvdmVybmVyLnZhbHVlIHx8IHRoaXMudHhuLnNlbmRlciA9PT0gdGhpcy5hZG1pbi52YWx1ZSkKCXR4biBTZW5kZXIKCWJ5dGUgMHg2NzZmNzY2NTcyNmU2NTcyIC8vICJnb3Zlcm5lciIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoJZHVwCglibnogc2tpcF9vcjYKCXR4biBTZW5kZXIKCWJ5dGUgMHg2MTY0NmQ2OTZlIC8vICJhZG1pbiIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoJfHwKCnNraXBfb3I2OgoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjE0OQoJLy8gc2VuZE9ubGluZUtleVJlZ2lzdHJhdGlvbih7CgkvLyAJCQlzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAJCQlzZWxlY3Rpb25QSzogc2VsZWN0aW9uX3BrLAoJLy8gCQkJc3RhdGVQcm9vZlBLOiBzdGF0ZV9wcm9vZl9waywKCS8vIAkJCXZvdGVQSzogdm90ZV9waywKCS8vIAkJCXZvdGVGaXJzdDogdm90ZV9maXJzdCwKCS8vIAkJCXZvdGVMYXN0OiB2b3RlX2xhc3QsCgkvLyAJCQl2b3RlS2V5RGlsdXRpb246IHZvdGVfa2V5X2RpbHV0aW9uLAoJLy8gCQkJZmVlOiAxMDAwLAoJLy8gCQl9KQoJaXR4bl9iZWdpbgoJaW50IGtleXJlZwoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czoxNTAKCS8vIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjE1MQoJLy8gc2VsZWN0aW9uUEs6IHNlbGVjdGlvbl9wawoJZnJhbWVfZGlnIC0xIC8vIHNlbGVjdGlvbl9wazogYnl0ZXMKCWl0eG5fZmllbGQgU2VsZWN0aW9uUEsKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MTUyCgkvLyBzdGF0ZVByb29mUEs6IHN0YXRlX3Byb29mX3BrCglmcmFtZV9kaWcgLTIgLy8gc3RhdGVfcHJvb2ZfcGs6IGJ5dGVzCglpdHhuX2ZpZWxkIFN0YXRlUHJvb2ZQSwoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czoxNTMKCS8vIHZvdGVQSzogdm90ZV9wawoJZnJhbWVfZGlnIC0zIC8vIHZvdGVfcGs6IGJ5dGVzCglpdHhuX2ZpZWxkIFZvdGVQSwoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czoxNTQKCS8vIHZvdGVGaXJzdDogdm90ZV9maXJzdAoJZnJhbWVfZGlnIC00IC8vIHZvdGVfZmlyc3Q6IHVpbnQ2NAoJaXR4bl9maWVsZCBWb3RlRmlyc3QKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MTU1CgkvLyB2b3RlTGFzdDogdm90ZV9sYXN0CglmcmFtZV9kaWcgLTUgLy8gdm90ZV9sYXN0OiB1aW50NjQKCWl0eG5fZmllbGQgVm90ZUxhc3QKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MTU2CgkvLyB2b3RlS2V5RGlsdXRpb246IHZvdGVfa2V5X2RpbHV0aW9uCglmcmFtZV9kaWcgLTYgLy8gdm90ZV9rZXlfZGlsdXRpb246IHVpbnQ2NAoJaXR4bl9maWVsZCBWb3RlS2V5RGlsdXRpb24KCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MTU3CgkvLyBmZWU6IDEwMDAKCWludCAxMDAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKLy8gcmVnaXN0ZXJfb2ZmbGluZSgpdm9pZAphYmlfcm91dGVfcmVnaXN0ZXJfb2ZmbGluZToKCS8vIGV4ZWN1dGUgcmVnaXN0ZXJfb2ZmbGluZSgpdm9pZAoJY2FsbHN1YiByZWdpc3Rlcl9vZmZsaW5lCglpbnQgMQoJcmV0dXJuCgovLyByZWdpc3Rlcl9vZmZsaW5lKCk6IHZvaWQKcmVnaXN0ZXJfb2ZmbGluZToKCXByb3RvIDAgMAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czoxNjIKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IHRoaXMuZ292ZXJuZXIudmFsdWUgfHwgdGhpcy50eG4uc2VuZGVyID09PSB0aGlzLmFkbWluLnZhbHVlKQoJdHhuIFNlbmRlcgoJYnl0ZSAweDY3NmY3NjY1NzI2ZTY1NzIgLy8gImdvdmVybmVyIgoJYXBwX2dsb2JhbF9nZXQKCT09CglkdXAKCWJueiBza2lwX29yNwoJdHhuIFNlbmRlcgoJYnl0ZSAweDYxNjQ2ZDY5NmUgLy8gImFkbWluIgoJYXBwX2dsb2JhbF9nZXQKCT09Cgl8fAoKc2tpcF9vcjc6Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MTY0CgkvLyBzZW5kT2ZmbGluZUtleVJlZ2lzdHJhdGlvbih7CgkvLyAJCQlzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAJCQlmZWU6IDEwMDAsCgkvLyAJCX0pCglpdHhuX2JlZ2luCglpbnQga2V5cmVnCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjE2NQoJLy8gc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MTY2CgkvLyBmZWU6IDEwMDAKCWludCAxMDAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKLy8gc2V0X3JhdGlvKCl2b2lkCmFiaV9yb3V0ZV9zZXRfcmF0aW86CgkvLyBleGVjdXRlIHNldF9yYXRpbygpdm9pZAoJY2FsbHN1YiBzZXRfcmF0aW8KCWludCAxCglyZXR1cm4KCi8vIHNldF9yYXRpbygpOiB2b2lkCnNldF9yYXRpbzoKCXByb3RvIDAgMAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czoxNzEKCS8vIHRoaXMucmF0aW8udmFsdWUgPSB3aWRlUmF0aW8oW3RoaXMuZ2V0X2JhbGFuY2UoKSwgU0NBTEVdLCBbdGhpcy5nZXRfYXJjMjAwX2JhbGFuY2UoKV0pCglieXRlIDB4NzI2MTc0Njk2ZiAvLyAicmF0aW8iCgljYWxsc3ViIGdldF9iYWxhbmNlCglpbnQgMTAwMDAwMDAwCgltdWx3CglpbnQgMAoJY2FsbHN1YiBnZXRfYXJjMjAwX2JhbGFuY2UKCWRpdm1vZHcKCXBvcAoJcG9wCglzd2FwCgkhCglhc3NlcnQKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWIKCi8vIGdldF9iYWxhbmNlKCk6IHVpbnQ2NAovLwovLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLy8gR2V0IEJhbGFuY2UgYW5kIFRyYW5lZmVyICBIZWxwZXJzICAgKioKLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCmdldF9iYWxhbmNlOgoJcHJvdG8gMCAxCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjE3OQoJLy8gcmV0dXJuIHRoaXMuYXBwLmFkZHJlc3MuYmFsYW5jZSAtIE1JTl9CQUxBTkNFOwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWFjY3RfcGFyYW1zX2dldCBBY2N0QmFsYW5jZQoJcG9wCglpbnQgMTAwMDAwMAoJLQoJcmV0c3ViCgovLyBnZXRfYXJjMjAwX2JhbGFuY2UoKTogdWludDY0CmdldF9hcmMyMDBfYmFsYW5jZToKCXByb3RvIDAgMQoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czoxODMKCS8vIHJldHVybiA8dWludDY0PnNlbmRNZXRob2RDYWxsPFtBZGRyZXNzXSwgdWludDwyNTY+Pih7CgkvLyAJCQlzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAJCQluYW1lOiAnYXJjMjAwX2JhbGFuY2VPZicsCgkvLyAJCQlhcHBsaWNhdGlvbklEOiB0aGlzLmFyYzIwMF90b2tlbi52YWx1ZSwKCS8vIAkJCW1ldGhvZEFyZ3M6IFt0aGlzLmFwcC5hZGRyZXNzXSwKCS8vIAkJCWZlZTogMTAwMCwKCS8vIAkJfSk7CglpdHhuX2JlZ2luCglpbnQgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJbWV0aG9kICJhcmMyMDBfYmFsYW5jZU9mKGFkZHJlc3MpdWludDI1NiIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjE4NAoJLy8gc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MTg2CgkvLyBhcHBsaWNhdGlvbklEOiB0aGlzLmFyYzIwMF90b2tlbi52YWx1ZQoJYnl0ZSAweDYxNzI2MzMyMzAzMDVmNzQ2ZjZiNjU2ZSAvLyAiYXJjMjAwX3Rva2VuIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgQXBwbGljYXRpb25JRAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czoxODcKCS8vIG1ldGhvZEFyZ3M6IFt0aGlzLmFwcC5hZGRyZXNzXQoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjE4OAoJLy8gZmVlOiAxMDAwCglpbnQgMTAwMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglpdHhuIE51bUxvZ3MKCWludCAxCgktCglpdHhuYXMgTG9ncwoJZXh0cmFjdCA0IDAKCWR1cAoJYml0bGVuCglpbnQgNjQKCTw9Cglhc3NlcnQKCWV4dHJhY3QgMjQgOAoJYnRvaQoJcmV0c3ViCgovLyB0cmFuc2Zlcl90byh0bzogQWRkcmVzcywgYW1vdW50OiB1aW50NjQpOiBib29sZWFuCnRyYW5zZmVyX3RvOgoJcHJvdG8gMiAxCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjE5MwoJLy8gc2VuZFBheW1lbnQoewoJLy8gCQkJc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gCQkJcmVjZWl2ZXI6IHRvLAoJLy8gCQkJYW1vdW50OiBhbW91bnQsCgkvLyAJCQlmZWU6IDEwMDAsCgkvLyAJCX0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjE5NAoJLy8gc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MTk1CgkvLyByZWNlaXZlcjogdG8KCWZyYW1lX2RpZyAtMSAvLyB0bzogQWRkcmVzcwoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czoxOTYKCS8vIGFtb3VudDogYW1vdW50CglmcmFtZV9kaWcgLTIgLy8gYW1vdW50OiB1aW50NjQKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjE5NwoJLy8gZmVlOiAxMDAwCglpbnQgMTAwMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjE5OQoJLy8gcmV0dXJuIHRydWU7CglpbnQgMQoJcmV0c3ViCgovLyBhc2FfdHJhbnNmZXJfdG8ocmVjZWl2ZXI6IEFjY291bnQsIGFzc2V0OiBBc3NldCwgYW1vdW50OiB1aW50NjQpOiBib29sZWFuCmFzYV90cmFuc2Zlcl90bzoKCXByb3RvIDMgMQoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czoyMDMKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vIAkJCXNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vIAkJCWFzc2V0UmVjZWl2ZXI6IHJlY2VpdmVyLAoJLy8gCQkJeGZlckFzc2V0OiBhc3NldCwKCS8vIAkJCWFzc2V0QW1vdW50OiBhbW91bnQsCgkvLyAJCQlmZWU6IDEwMDAsCgkvLyAJCX0pCglpdHhuX2JlZ2luCglpbnQgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MjA0CgkvLyBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIFNlbmRlcgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czoyMDUKCS8vIGFzc2V0UmVjZWl2ZXI6IHJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gcmVjZWl2ZXI6IEFjY291bnQKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czoyMDYKCS8vIHhmZXJBc3NldDogYXNzZXQKCWZyYW1lX2RpZyAtMiAvLyBhc3NldDogQXNzZXQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjIwNwoJLy8gYXNzZXRBbW91bnQ6IGFtb3VudAoJZnJhbWVfZGlnIC0zIC8vIGFtb3VudDogdWludDY0CglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjIwOAoJLy8gZmVlOiAxMDAwCglpbnQgMTAwMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjIxMAoJLy8gcmV0dXJuIHRydWU7CglpbnQgMQoJcmV0c3ViCgovLyBhcmMyMDBfdHJhbnNmZXJfdG8odG86IEFkZHJlc3MsIGFtb3VudDogdWludDY0KTogYm9vbGVhbgphcmMyMDBfdHJhbnNmZXJfdG86Cglwcm90byAyIDEKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MjE0CgkvLyByZXR1cm4gc2VuZE1ldGhvZENhbGw8W0FkZHJlc3MsIHVpbnQ8MjU2Pl0sIGJvb2xlYW4+KHsKCS8vIAkJCXNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vIAkJCW5hbWU6ICdhcmMyMDBfdHJhbnNmZXInLAoJLy8gCQkJYXBwbGljYXRpb25JRDogdGhpcy5hcmMyMDBfdG9rZW4udmFsdWUsCgkvLyAJCQltZXRob2RBcmdzOiBbdG8sIDx1aW50PDI1Nj4+YW1vdW50XSwKCS8vIAkJCWZlZTogMTAwMCwKCS8vIAkJfSk7CglpdHhuX2JlZ2luCglpbnQgYXBwbAoJaXR4bl9maWVsZCBUeXBlRW51bQoJbWV0aG9kICJhcmMyMDBfdHJhbnNmZXIoYWRkcmVzcyx1aW50MjU2KWJvb2wiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czoyMTUKCS8vIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjIxNwoJLy8gYXBwbGljYXRpb25JRDogdGhpcy5hcmMyMDBfdG9rZW4udmFsdWUKCWJ5dGUgMHg2MTcyNjMzMjMwMzA1Zjc0NmY2YjY1NmUgLy8gImFyYzIwMF90b2tlbiIKCWFwcF9nbG9iYWxfZ2V0CglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MjE4CgkvLyBtZXRob2RBcmdzOiBbdG8sIDx1aW50PDI1Nj4+YW1vdW50XQoJZnJhbWVfZGlnIC0xIC8vIHRvOiBBZGRyZXNzCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoJZnJhbWVfZGlnIC0yIC8vIGFtb3VudDogdWludDY0CglpdG9iCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czoyMTkKCS8vIGZlZTogMTAwMAoJaW50IDEwMDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJaXR4biBOdW1Mb2dzCglpbnQgMQoJLQoJaXR4bmFzIExvZ3MKCWV4dHJhY3QgNCAwCglpbnQgMAoJZ2V0Yml0CglyZXRzdWIKCi8vIGFyYzIwMF90cmFuZmVyX2Zyb20oZnJvbTogQWRkcmVzcywgdG86IEFkZHJlc3MsIGFtb3VudDogdWludDY0KTogYm9vbGVhbgphcmMyMDBfdHJhbmZlcl9mcm9tOgoJcHJvdG8gMyAxCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjIyNAoJLy8gcmV0dXJuIHNlbmRNZXRob2RDYWxsPFtBZGRyZXNzLCBBZGRyZXNzLCB1aW50PDI1Nj5dLCBib29sZWFuPih7CgkvLyAJCQlzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAJCQluYW1lOiAnYXJjMjAwX3RyYW5zZmVyRnJvbScsCgkvLyAJCQlhcHBsaWNhdGlvbklEOiB0aGlzLmFyYzIwMF90b2tlbi52YWx1ZSwKCS8vIAkJCW1ldGhvZEFyZ3M6IFtmcm9tLCB0bywgPHVpbnQ8MjU2Pj5hbW91bnRdLAoJLy8gCQkJZmVlOiAxMDAwLAoJLy8gCQl9KTsKCWl0eG5fYmVnaW4KCWludCBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgltZXRob2QgImFyYzIwMF90cmFuc2ZlckZyb20oYWRkcmVzcyxhZGRyZXNzLHVpbnQyNTYpYm9vbCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjIyNQoJLy8gc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MjI3CgkvLyBhcHBsaWNhdGlvbklEOiB0aGlzLmFyYzIwMF90b2tlbi52YWx1ZQoJYnl0ZSAweDYxNzI2MzMyMzAzMDVmNzQ2ZjZiNjU2ZSAvLyAiYXJjMjAwX3Rva2VuIgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgQXBwbGljYXRpb25JRAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czoyMjgKCS8vIG1ldGhvZEFyZ3M6IFtmcm9tLCB0bywgPHVpbnQ8MjU2Pj5hbW91bnRdCglmcmFtZV9kaWcgLTEgLy8gZnJvbTogQWRkcmVzcwoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWZyYW1lX2RpZyAtMiAvLyB0bzogQWRkcmVzcwoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWZyYW1lX2RpZyAtMyAvLyBhbW91bnQ6IHVpbnQ2NAoJaXRvYgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MjI5CgkvLyBmZWU6IDEwMDAKCWludCAxMDAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCWl0eG4gTnVtTG9ncwoJaW50IDEKCS0KCWl0eG5hcyBMb2dzCglleHRyYWN0IDQgMAoJaW50IDAKCWdldGJpdAoJcmV0c3ViCgovLyB0b2tlbnNfdG9fbWludF9pbnRpYWwoYW1vdW50X29mX2E6IHVpbnQ2NCwgYW1vdW50X29mX2I6IHVpbnQ2NCk6IHVpbnQ2NAovLwovLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLy8gTWF0aCBhbmQgVG9rZW4gQ2FsYyBIZWxwZXJzICAgICAgKioKLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi8vCi8vIENvbXB1dGUgaG93IG1hbnkgdG9rZW5zIHRvIG1pbnQgZmlyc3QgdGltZSAoaS5lLiB3aGVuIGluaXRpYWxpemluZykKLy8gQHBhcmFtIGFtb3VudF9vZl9hCi8vIEBwYXJhbSBhbW91bnRfb2ZfYgovLyBAcmV0dXJucwp0b2tlbnNfdG9fbWludF9pbnRpYWw6Cglwcm90byAyIDEKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MjQ0CgkvLyByZXR1cm4gc3FydChhbW91bnRfb2ZfYSAqIGFtb3VudF9vZl9iKTsKCWZyYW1lX2RpZyAtMSAvLyBhbW91bnRfb2ZfYTogdWludDY0CglmcmFtZV9kaWcgLTIgLy8gYW1vdW50X29mX2I6IHVpbnQ2NAoJKgoJc3FydAoJcmV0c3ViCgovLyB0b2tlbnNfdG9fbWludChpc3N1ZWQ6IHVpbnQ2NCwgc3VwcGx5X29mX2E6IHVpbnQ2NCwgc3VwcGx5X29mX2I6IHVpbnQ2NCwgYW1vdW50X29mX2E6IHVpbnQ2NCwgYW1vdW50X29mX2I6IHVpbnQ2NCk6IHVpbnQ2NAovLwovLyBDb21wdXRlIGhvdyBtYW55IHBvb2wgdG9rZW4gdG8gbWludAovLyBAcGFyYW0gaXNzdWVkCi8vIEBwYXJhbSBzdXBwbHlfb2ZfYQovLyBAcGFyYW0gc3VwcGx5X29mX2IKLy8gQHBhcmFtIGFtb3VudF9vZl9hCi8vIEBwYXJhbSBhbW91bnRfb2ZfYgovLyBAcmV0dXJucwp0b2tlbnNfdG9fbWludDoKCXByb3RvIDUgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CglkdXBuIDIKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MjYzCgkvLyBhX3JhdGlvID0gd2lkZVJhdGlvKFthbW91bnRfb2ZfYSwgU0NBTEVdLCBbc3VwcGx5X29mX2FdKQoJZnJhbWVfZGlnIC00IC8vIGFtb3VudF9vZl9hOiB1aW50NjQKCWludCAxMDAwMDAwMDAKCW11bHcKCWludCAwCglmcmFtZV9kaWcgLTIgLy8gc3VwcGx5X29mX2E6IHVpbnQ2NAoJZGl2bW9kdwoJcG9wCglwb3AKCXN3YXAKCSEKCWFzc2VydAoJZnJhbWVfYnVyeSAwIC8vIGFfcmF0aW86IHVpbnQ2NAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czoyNjQKCS8vIGJfcmF0aW8gPSB3aWRlUmF0aW8oW2Ftb3VudF9vZl9iLCBTQ0FMRV0sIFtzdXBwbHlfb2ZfYl0pCglmcmFtZV9kaWcgLTUgLy8gYW1vdW50X29mX2I6IHVpbnQ2NAoJaW50IDEwMDAwMDAwMAoJbXVsdwoJaW50IDAKCWZyYW1lX2RpZyAtMyAvLyBzdXBwbHlfb2ZfYjogdWludDY0CglkaXZtb2R3Cglwb3AKCXBvcAoJc3dhcAoJIQoJYXNzZXJ0CglmcmFtZV9idXJ5IDEgLy8gYl9yYXRpbzogdWludDY0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjI2NgoJLy8gcmF0aW8gPSBhX3JhdGlvIDwgYl9yYXRpbyA/IGFfcmF0aW8gOiBiX3JhdGlvCglmcmFtZV9kaWcgMCAvLyBhX3JhdGlvOiB1aW50NjQKCWZyYW1lX2RpZyAxIC8vIGJfcmF0aW86IHVpbnQ2NAoJPAoJYnogdGVybmFyeTFfZmFsc2UKCWZyYW1lX2RpZyAwIC8vIGFfcmF0aW86IHVpbnQ2NAoJYiB0ZXJuYXJ5MV9lbmQKCnRlcm5hcnkxX2ZhbHNlOgoJZnJhbWVfZGlnIDEgLy8gYl9yYXRpbzogdWludDY0Cgp0ZXJuYXJ5MV9lbmQ6CglmcmFtZV9idXJ5IDIgLy8gcmF0aW86IHVpbnQ2NAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czoyNjgKCS8vIHJldHVybiB3aWRlUmF0aW8oW3JhdGlvLCBpc3N1ZWRdLCBbU0NBTEVdKTsKCWZyYW1lX2RpZyAyIC8vIHJhdGlvOiB1aW50NjQKCWZyYW1lX2RpZyAtMSAvLyBpc3N1ZWQ6IHVpbnQ2NAoJbXVsdwoJaW50IDAKCWludCAxMDAwMDAwMDAKCWRpdm1vZHcKCXBvcAoJcG9wCglzd2FwCgkhCglhc3NlcnQKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAyCglyZXRzdWIKCi8vIGNvbXB1dGVfdG9rZW5fcmV0dXJuX2Ftb3VudF9mb3JfYnVybmluZ19scHQobHB0X2lzc3VlZDogdWludDY0LCBzdXBwbHlfb2ZfdG9rZW5faW5fYXBwOiB1aW50NjQsIGxwdF9hbW91bnQ6IHVpbnQ2NCk6IHVpbnQ2NAovLwovLwovLyBAcGFyYW0gbHB0X2lzc3VlZAovLyBAcGFyYW0gc3VwcGx5X29mX3Rva2VuX2luX2FwcAovLyBAcGFyYW0gbHB0X2Ftb3VudAovLyBAcmV0dXJucwpjb21wdXRlX3Rva2VuX3JldHVybl9hbW91bnRfZm9yX2J1cm5pbmdfbHB0OgoJcHJvdG8gMyAxCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjI4MwoJLy8gcmV0dXJuIHdpZGVSYXRpbyhbc3VwcGx5X29mX3Rva2VuX2luX2FwcCwgbHB0X2Ftb3VudF0sIFtscHRfaXNzdWVkXSk7CglmcmFtZV9kaWcgLTIgLy8gc3VwcGx5X29mX3Rva2VuX2luX2FwcDogdWludDY0CglmcmFtZV9kaWcgLTMgLy8gbHB0X2Ftb3VudDogdWludDY0CgltdWx3CglpbnQgMAoJZnJhbWVfZGlnIC0xIC8vIGxwdF9pc3N1ZWQ6IHVpbnQ2NAoJZGl2bW9kdwoJcG9wCglwb3AKCXN3YXAKCSEKCWFzc2VydAoJcmV0c3ViCgovLyBjb21wdXRlX291dF90b2tlbnMoaW5fYW1vdW50OiB1aW50NjQsIGluX3N1cHBseTogdWludDY0LCBvdXRfc3VwcGx5OiB1aW50NjQsIGZlZTogdWludDY0KTogdWludDY0Ci8vCi8vIENvbXB1dGUgaG93IG1hbnkgdG9rZW5zIHRvIGdpdmUgb3V0IGR1cmluZyBzd2FwCi8vIEBwYXJhbSBpbl9hbW91bnQKLy8gQHBhcmFtIGluX3N1cHBseQovLyBAcGFyYW0gb3V0X3N1cHBseQovLyBAcGFyYW0gZmVlCi8vIEByZXR1cm5zCmNvbXB1dGVfb3V0X3Rva2VuczoKCXByb3RvIDQgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CglkdXBuIDIKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6Mjk1CgkvLyBmYWN0b3IgPSBTQ0FMRSAtIGZlZQoJaW50IDEwMDAwMDAwMAoJZnJhbWVfZGlnIC00IC8vIGZlZTogdWludDY0CgktCglmcmFtZV9idXJ5IDAgLy8gZmFjdG9yOiB1aW50NjQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6Mjk3CgkvLyBudW1lcmF0b3IgPSA8dWludDwyNTY+PmluX2Ftb3VudCAqIDx1aW50PDI1Nj4+b3V0X3N1cHBseSAqIDx1aW50PDI1Nj4+ZmFjdG9yCglmcmFtZV9kaWcgLTEgLy8gaW5fYW1vdW50OiB1aW50NjQKCWl0b2IKCWZyYW1lX2RpZyAtMyAvLyBvdXRfc3VwcGx5OiB1aW50NjQKCWl0b2IKCWIqCglmcmFtZV9kaWcgMCAvLyBmYWN0b3I6IHVpbnQ2NAoJaXRvYgoJYioKCWZyYW1lX2J1cnkgMSAvLyBudW1lcmF0b3I6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjI5OAoJLy8gZGVub21pbmF0b3IgPSAoPHVpbnQ8MjU2Pj5pbl9hbW91bnQgKyA8dWludDwyNTY+PmluX3N1cHBseSkgKiA8dWludDwyNTY+PlNDQUxFCglmcmFtZV9kaWcgLTEgLy8gaW5fYW1vdW50OiB1aW50NjQKCWl0b2IKCWZyYW1lX2RpZyAtMiAvLyBpbl9zdXBwbHk6IHVpbnQ2NAoJaXRvYgoJYisKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA1ZjVlMTAwCgliKgoJZnJhbWVfYnVyeSAyIC8vIGRlbm9taW5hdG9yOiB1bnNhZmUgdWludDI1NgoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czozMDAKCS8vIHJldHVybiA8dWludDY0PihudW1lcmF0b3IgLyBkZW5vbWluYXRvcik7CglmcmFtZV9kaWcgMSAvLyBudW1lcmF0b3I6IHVuc2FmZSB1aW50MjU2CglmcmFtZV9kaWcgMiAvLyBkZW5vbWluYXRvcjogdW5zYWZlIHVpbnQyNTYKCWIvCglkdXAKCWJpdGxlbgoJaW50IDY0Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCA4CgktCglzd2FwCglzdWJzdHJpbmczCglidG9pCgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCgoJLy8gcG9wIGFsbCBsb2NhbCB2YXJpYWJsZXMgZnJvbSB0aGUgc3RhY2sKCXBvcG4gMgoJcmV0c3ViCgovLyBjb21wdXRlX291dF90b2tlbnNfYWRtaW5fZmVlKGluX2Ftb3VudDogdWludDY0LCBpbl9zdXBwbHk6IHVpbnQ2NCwgb3V0X3N1cHBseTogdWludDY0KTogdWludDY0Ci8vCi8vIENvbXB1dGUgcGxhdGZvcm0gZmVlIGR1cmFpbmcgc3dhcAovLyBAcGFyYW0gaW5fYW1vdW50Ci8vIEBwYXJhbSBpbl9zdXBwbHkKLy8gQHBhcmFtIG91dF9zdXBwbHkKLy8gQHJldHVybnMKY29tcHV0ZV9vdXRfdG9rZW5zX2FkbWluX2ZlZToKCXByb3RvIDMgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CglkdXAKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MzExCgkvLyBhbW91bnRfd2l0aG91dF9mZWUgPSB0aGlzLmNvbXB1dGVfb3V0X3Rva2Vucyhpbl9hbW91bnQsIGluX3N1cHBseSwgb3V0X3N1cHBseSwgMCkKCWludCAwCglmcmFtZV9kaWcgLTMgLy8gb3V0X3N1cHBseTogdWludDY0CglmcmFtZV9kaWcgLTIgLy8gaW5fc3VwcGx5OiB1aW50NjQKCWZyYW1lX2RpZyAtMSAvLyBpbl9hbW91bnQ6IHVpbnQ2NAoJY2FsbHN1YiBjb21wdXRlX291dF90b2tlbnMKCWZyYW1lX2J1cnkgMCAvLyBhbW91bnRfd2l0aG91dF9mZWU6IHVpbnQ2NAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czozMTIKCS8vIGFtb3VudF93aXRoX2ZlZSA9IHRoaXMuY29tcHV0ZV9vdXRfdG9rZW5zKGluX2Ftb3VudCwgaW5fc3VwcGx5LCBvdXRfc3VwcGx5LCB0aGlzLnN3YXBfZmVlLnZhbHVlKQoJYnl0ZSAweDczNzc2MTcwNWY2NjY1NjUgLy8gInN3YXBfZmVlIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMyAvLyBvdXRfc3VwcGx5OiB1aW50NjQKCWZyYW1lX2RpZyAtMiAvLyBpbl9zdXBwbHk6IHVpbnQ2NAoJZnJhbWVfZGlnIC0xIC8vIGluX2Ftb3VudDogdWludDY0CgljYWxsc3ViIGNvbXB1dGVfb3V0X3Rva2VucwoJZnJhbWVfYnVyeSAxIC8vIGFtb3VudF93aXRoX2ZlZTogdWludDY0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjMxNAoJLy8gcmV0dXJuICgoYW1vdW50X3dpdGhvdXRfZmVlIC0gYW1vdW50X3dpdGhfZmVlKSAqIHRoaXMuYWRtaW5fZmVlLnZhbHVlKSAvIFNDQUxFOwoJZnJhbWVfZGlnIDAgLy8gYW1vdW50X3dpdGhvdXRfZmVlOiB1aW50NjQKCWZyYW1lX2RpZyAxIC8vIGFtb3VudF93aXRoX2ZlZTogdWludDY0CgktCglieXRlIDB4NjE2NDZkNjk2ZTVmNjY2NTY1IC8vICJhZG1pbl9mZWUiCglhcHBfZ2xvYmFsX2dldAoJKgoJaW50IDEwMDAwMDAwMAoJLwoKCS8vIHNldCB0aGUgc3Vicm91dGluZSByZXR1cm4gdmFsdWUKCWZyYW1lX2J1cnkgMAoKCS8vIHBvcCBhbGwgbG9jYWwgdmFyaWFibGVzIGZyb20gdGhlIHN0YWNrCglwb3BuIDEKCXJldHN1YgoKLy8gbWludChwYXksdWludDY0LGFzc2V0KXZvaWQKYWJpX3JvdXRlX21pbnQ6CgkvLyBscHRfYXNzZXQ6IGFzc2V0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgl0eG5hcyBBc3NldHMKCgkvLyBhcmMyMDBfYW1vdW50OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBwYXlfdHhuOiBwYXkKCXR4biBHcm91cEluZGV4CglpbnQgMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50IHBheQoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgbWludChwYXksdWludDY0LGFzc2V0KXZvaWQKCWNhbGxzdWIgbWludAoJaW50IDEKCXJldHVybgoKLy8gbWludChwYXlfdHhuOiBQYXlUeG4sIGFyYzIwMF9hbW91bnQ6IHVpbnQ2NCwgbHB0X2Fzc2V0OiBBc3NldCk6IHZvaWQKLy8KLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi8vIE1pbnQgLyBCdXJuIC8gU3dhcCBNZXRob2RzICAgICAgICoqCi8vICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgovLwovLyBBZGQgbGlxdWlkaXR5IGFuZCBtaW50cyBscHQgdG9rZW4KLy8gQHBhcmFtIHBheV90eG4gcGF5IHR4biB3aXRoIGFsZ29zIHNlbmRpbmcgdG8gdGhpcyBhcHAgYWNjb3VudAovLyBAcGFyYW0gYXJjMjAwX2Ftb3VudCBhbW91bnQgb2YgYXJjMjAwIGFwcHJvdmVkIHRvIGFkZCB0byBsaXF1aWRpdHkKLy8gQHBhcmFtIGxwdF9hc3NldCBscHQgYXNzZXQgbmVlZGVkIHRvIG1pbnQKbWludDoKCXByb3RvIDMgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjMyOAoJLy8gYXNzZXJ0KHRoaXMubWludF9lbmFibGVkLnZhbHVlKQoJYnl0ZSAweDZkNjk2ZTc0NWY2NTZlNjE2MjZjNjU2NCAvLyAibWludF9lbmFibGVkIgoJYXBwX2dsb2JhbF9nZXQKCWludCAwCglnZXRiaXQKCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czozMzAKCS8vIHZlcmlmeVBheVR4bihwYXlfdHhuLCB7CgkvLyAJCQlzZW5kZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vIAkJCXJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gCQkJYW1vdW50OiB7IGdyZWF0ZXJUaGFuOiAwIH0sCgkvLyAJCX0pCgkvLyB2ZXJpZnkgc2VuZGVyCglmcmFtZV9kaWcgLTEgLy8gcGF5X3R4bjogUGF5VHhuCglndHhucyBTZW5kZXIKCXR4biBTZW5kZXIKCT09Cglhc3NlcnQKCgkvLyB2ZXJpZnkgcmVjZWl2ZXIKCWZyYW1lX2RpZyAtMSAvLyBwYXlfdHhuOiBQYXlUeG4KCWd0eG5zIFJlY2VpdmVyCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSBhbW91bnQKCWZyYW1lX2RpZyAtMSAvLyBwYXlfdHhuOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJaW50IDAKCT4KCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czozMzYKCS8vIGFzc2VydChhcmMyMDBfYW1vdW50ID4gMCkKCWZyYW1lX2RpZyAtMiAvLyBhcmMyMDBfYW1vdW50OiB1aW50NjQKCWludCAwCgk+Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MzM3CgkvLyBhc3NlcnQobHB0X2Fzc2V0ID09PSB0aGlzLmxwdF9hc3NldC52YWx1ZSkKCWZyYW1lX2RpZyAtMyAvLyBscHRfYXNzZXQ6IEFzc2V0CglieXRlIDB4NmM3MDc0NWY2MTczNzM2NTc0IC8vICJscHRfYXNzZXQiCglhcHBfZ2xvYmFsX2dldAoJPT0KCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czozMzgKCS8vIGFzc2VydCh0aGlzLmdldF9iYWxhbmNlKCkgPiAwKQoJY2FsbHN1YiBnZXRfYmFsYW5jZQoJaW50IDAKCT4KCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czozNDAKCS8vIHRoaXMuYXJjMjAwX3RyYW5mZXJfZnJvbSh0aGlzLnR4bi5zZW5kZXIsIHRoaXMuYXBwLmFkZHJlc3MsIGFyYzIwMF9hbW91bnQpCglmcmFtZV9kaWcgLTIgLy8gYXJjMjAwX2Ftb3VudDogdWludDY0CglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJdHhuIFNlbmRlcgoJY2FsbHN1YiBhcmMyMDBfdHJhbmZlcl9mcm9tCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjM0MgoJLy8gdG9fbWludCA9IDx1aW50NjQ+MAoJaW50IDAKCWZyYW1lX2J1cnkgMCAvLyB0b19taW50OiB1aW50NjQKCgkvLyBpZjBfY29uZGl0aW9uCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MzQ0CgkvLyAhdGhpcy5pbml0aWFsaXplZC52YWx1ZQoJYnl0ZSAweDY5NmU2OTc0Njk2MTZjNjk3YTY1NjQgLy8gImluaXRpYWxpemVkIgoJYXBwX2dsb2JhbF9nZXQKCWludCAwCglnZXRiaXQKCSEKCWJ6IGlmMF9lbHNlCgoJLy8gaWYwX2NvbnNlcXVlbnQKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czozNDUKCS8vIHRvX21pbnQgPSB0aGlzLnRva2Vuc190b19taW50X2ludGlhbChwYXlfdHhuLmFtb3VudCwgYXJjMjAwX2Ftb3VudCkKCWZyYW1lX2RpZyAtMiAvLyBhcmMyMDBfYW1vdW50OiB1aW50NjQKCWZyYW1lX2RpZyAtMSAvLyBwYXlfdHhuOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJY2FsbHN1YiB0b2tlbnNfdG9fbWludF9pbnRpYWwKCWZyYW1lX2J1cnkgMCAvLyB0b19taW50OiB1aW50NjQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MzQ2CgkvLyB0aGlzLmluaXRpYWxpemVkLnZhbHVlID0gdHJ1ZQoJYnl0ZSAweDY5NmU2OTc0Njk2MTZjNjk3YTY1NjQgLy8gImluaXRpYWxpemVkIgoJaW50IDEKCWJ5dGUgMHgwMAoJaW50IDAKCXVuY292ZXIgMgoJc2V0Yml0CglhcHBfZ2xvYmFsX3B1dAoJYiBpZjBfZW5kCgppZjBfZWxzZToKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czozNDgKCS8vIHRvX21pbnQgPSB0aGlzLnRva2Vuc190b19taW50KAoJLy8gCQkJCUxQVF9UT1RBTF9TVVBQTFkgLSB0aGlzLmFwcC5hZGRyZXNzLmFzc2V0QmFsYW5jZSh0aGlzLmxwdF9hc3NldC52YWx1ZSksCgkvLyAJCQkJdGhpcy5nZXRfYmFsYW5jZSgpIC0gcGF5X3R4bi5hbW91bnQsCgkvLyAJCQkJdGhpcy5nZXRfYXJjMjAwX2JhbGFuY2UoKSAtIGFyYzIwMF9hbW91bnQsCgkvLyAJCQkJcGF5X3R4bi5hbW91bnQsCgkvLyAJCQkJYXJjMjAwX2Ftb3VudAoJLy8gCQkJKQoJZnJhbWVfZGlnIC0yIC8vIGFyYzIwMF9hbW91bnQ6IHVpbnQ2NAoJZnJhbWVfZGlnIC0xIC8vIHBheV90eG46IFBheVR4bgoJZ3R4bnMgQW1vdW50CgljYWxsc3ViIGdldF9hcmMyMDBfYmFsYW5jZQoJZnJhbWVfZGlnIC0yIC8vIGFyYzIwMF9hbW91bnQ6IHVpbnQ2NAoJLQoJY2FsbHN1YiBnZXRfYmFsYW5jZQoJZnJhbWVfZGlnIC0xIC8vIHBheV90eG46IFBheVR4bgoJZ3R4bnMgQW1vdW50CgktCglpbnQgMTAwMDAwMDAwMDAwMDAwMDAKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglieXRlIDB4NmM3MDc0NWY2MTczNzM2NTc0IC8vICJscHRfYXNzZXQiCglhcHBfZ2xvYmFsX2dldAoJYXNzZXRfaG9sZGluZ19nZXQgQXNzZXRCYWxhbmNlCglwb3AKCS0KCWNhbGxzdWIgdG9rZW5zX3RvX21pbnQKCWZyYW1lX2J1cnkgMCAvLyB0b19taW50OiB1aW50NjQKCmlmMF9lbmQ6CgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MzU3CgkvLyBhc3NlcnQodG9fbWludCA+IDApCglmcmFtZV9kaWcgMCAvLyB0b19taW50OiB1aW50NjQKCWludCAwCgk+Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MzU5CgkvLyB0aGlzLmFzYV90cmFuc2Zlcl90byh0aGlzLnR4bi5zZW5kZXIsIHRoaXMubHB0X2Fzc2V0LnZhbHVlLCB0b19taW50KQoJZnJhbWVfZGlnIDAgLy8gdG9fbWludDogdWludDY0CglieXRlIDB4NmM3MDc0NWY2MTczNzM2NTc0IC8vICJscHRfYXNzZXQiCglhcHBfZ2xvYmFsX2dldAoJdHhuIFNlbmRlcgoJY2FsbHN1YiBhc2FfdHJhbnNmZXJfdG8KCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6MzYxCgkvLyB0aGlzLk1pbnQubG9nKHsKCS8vIAkJCXNlbmRlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gCQkJYWxnb19hbW91bnQ6IHBheV90eG4uYW1vdW50LAoJLy8gCQkJYXJjMjAwX2Ftb3VudDogYXJjMjAwX2Ftb3VudCwKCS8vIAkJCWxwdF9hbW91bnQ6IHRvX21pbnQsCgkvLyAJCX0pCglieXRlIDB4YzEwOTM1NWUgLy8gTWludChhZGRyZXNzLHVpbnQ2NCx1aW50NjQsdWludDY0KQoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIHBheV90eG46IFBheVR4bgoJZ3R4bnMgQW1vdW50CglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtMiAvLyBhcmMyMDBfYW1vdW50OiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIDAgLy8gdG9fbWludDogdWludDY0CglpdG9iCgljb25jYXQKCWNvbmNhdAoJbG9nCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjM2OAoJLy8gdGhpcy5zZXRfcmF0aW8oKQoJY2FsbHN1YiBzZXRfcmF0aW8KCXJldHN1YgoKLy8gYnVybihheGZlcil2b2lkCmFiaV9yb3V0ZV9idXJuOgoJLy8gbHB0X3hmZXJfdHhuOiBheGZlcgoJdHhuIEdyb3VwSW5kZXgKCWludCAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnQgYXhmZXIKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGJ1cm4oYXhmZXIpdm9pZAoJY2FsbHN1YiBidXJuCglpbnQgMQoJcmV0dXJuCgovLyBidXJuKGxwdF94ZmVyX3R4bjogQXNzZXRUcmFuc2ZlclR4bik6IHZvaWQKLy8KLy8gV2l0aGRyYXcgbGlxdWlkaXR5CmJ1cm46Cglwcm90byAxIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoJZHVwbiAyCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjM3NQoJLy8gYXNzZXJ0KHRoaXMuYnVybl9lbmFibGVkLnZhbHVlKQoJYnl0ZSAweDYyNzU3MjZlNWY2NTZlNjE2MjZjNjU2NCAvLyAiYnVybl9lbmFibGVkIgoJYXBwX2dsb2JhbF9nZXQKCWludCAwCglnZXRiaXQKCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czozNzcKCS8vIHZlcmlmeUFzc2V0VHJhbnNmZXJUeG4obHB0X3hmZXJfdHhuLCB7CgkvLyAJCQlzZW5kZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vIAkJCWFzc2V0QW1vdW50OiB7IGdyZWF0ZXJUaGFuOiAwIH0sCgkvLyAJCQlhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gCQkJeGZlckFzc2V0OiB0aGlzLmxwdF9hc3NldC52YWx1ZSwKCS8vIAkJfSkKCS8vIHZlcmlmeSBzZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBscHRfeGZlcl90eG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIFNlbmRlcgoJdHhuIFNlbmRlcgoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSBhc3NldEFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIGxwdF94ZmVyX3R4bjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgQXNzZXRBbW91bnQKCWludCAwCgk+Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYXNzZXRSZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIGxwdF94ZmVyX3R4bjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgQXNzZXRSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyB2ZXJpZnkgeGZlckFzc2V0CglmcmFtZV9kaWcgLTEgLy8gbHB0X3hmZXJfdHhuOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBYZmVyQXNzZXQKCWJ5dGUgMHg2YzcwNzQ1ZjYxNzM3MzY1NzQgLy8gImxwdF9hc3NldCIKCWFwcF9nbG9iYWxfZ2V0Cgk9PQoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjM4NAoJLy8gYXNzZXJ0KHRoaXMuZ2V0X2JhbGFuY2UoKSA+IDApCgljYWxsc3ViIGdldF9iYWxhbmNlCglpbnQgMAoJPgoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjM4NgoJLy8gbHB0X2lzc3VlcyA9CgkvLyAJCQlMUFRfVE9UQUxfU1VQUExZIC0gKHRoaXMuYXBwLmFkZHJlc3MuYXNzZXRCYWxhbmNlKHRoaXMubHB0X2Fzc2V0LnZhbHVlKSAtIGxwdF94ZmVyX3R4bi5hc3NldEFtb3VudCkKCWludCAxMDAwMDAwMDAwMDAwMDAwMAoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWJ5dGUgMHg2YzcwNzQ1ZjYxNzM3MzY1NzQgLy8gImxwdF9hc3NldCIKCWFwcF9nbG9iYWxfZ2V0Cglhc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKCXBvcAoJZnJhbWVfZGlnIC0xIC8vIGxwdF94ZmVyX3R4bjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgQXNzZXRBbW91bnQKCS0KCS0KCWZyYW1lX2J1cnkgMCAvLyBscHRfaXNzdWVzOiB1aW50NjQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6Mzg5CgkvLyB3aXRoZHJhd19hbW91bnQgPSB0aGlzLmNvbXB1dGVfdG9rZW5fcmV0dXJuX2Ftb3VudF9mb3JfYnVybmluZ19scHQoCgkvLyAJCQlscHRfaXNzdWVzLAoJLy8gCQkJdGhpcy5nZXRfYmFsYW5jZSgpLAoJLy8gCQkJbHB0X3hmZXJfdHhuLmFzc2V0QW1vdW50CgkvLyAJCSkKCWZyYW1lX2RpZyAtMSAvLyBscHRfeGZlcl90eG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0QW1vdW50CgljYWxsc3ViIGdldF9iYWxhbmNlCglmcmFtZV9kaWcgMCAvLyBscHRfaXNzdWVzOiB1aW50NjQKCWNhbGxzdWIgY29tcHV0ZV90b2tlbl9yZXR1cm5fYW1vdW50X2Zvcl9idXJuaW5nX2xwdAoJZnJhbWVfYnVyeSAxIC8vIHdpdGhkcmF3X2Ftb3VudDogdWludDY0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjM5NAoJLy8gYXJjMjAwX3dpdGhkcmF3X2Ftb3VudCA9IHRoaXMuY29tcHV0ZV90b2tlbl9yZXR1cm5fYW1vdW50X2Zvcl9idXJuaW5nX2xwdCgKCS8vIAkJCWxwdF9pc3N1ZXMsCgkvLyAJCQl0aGlzLmdldF9hcmMyMDBfYmFsYW5jZSgpLAoJLy8gCQkJbHB0X3hmZXJfdHhuLmFzc2V0QW1vdW50CgkvLyAJCSkKCWZyYW1lX2RpZyAtMSAvLyBscHRfeGZlcl90eG46IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0QW1vdW50CgljYWxsc3ViIGdldF9hcmMyMDBfYmFsYW5jZQoJZnJhbWVfZGlnIDAgLy8gbHB0X2lzc3VlczogdWludDY0CgljYWxsc3ViIGNvbXB1dGVfdG9rZW5fcmV0dXJuX2Ftb3VudF9mb3JfYnVybmluZ19scHQKCWZyYW1lX2J1cnkgMiAvLyBhcmMyMDBfd2l0aGRyYXdfYW1vdW50OiB1aW50NjQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6NDAwCgkvLyB0aGlzLnRyYW5zZmVyX3RvKHRoaXMudHhuLnNlbmRlciwgd2l0aGRyYXdfYW1vdW50KQoJZnJhbWVfZGlnIDEgLy8gd2l0aGRyYXdfYW1vdW50OiB1aW50NjQKCXR4biBTZW5kZXIKCWNhbGxzdWIgdHJhbnNmZXJfdG8KCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6NDAxCgkvLyB0aGlzLmFyYzIwMF90cmFuc2Zlcl90byh0aGlzLnR4bi5zZW5kZXIsIGFyYzIwMF93aXRoZHJhd19hbW91bnQpCglmcmFtZV9kaWcgMiAvLyBhcmMyMDBfd2l0aGRyYXdfYW1vdW50OiB1aW50NjQKCXR4biBTZW5kZXIKCWNhbGxzdWIgYXJjMjAwX3RyYW5zZmVyX3RvCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjQwMwoJLy8gdGhpcy5CdXJuLmxvZyh7CgkvLyAJCQlzZW5kZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vIAkJCWxwdF9hbW91bnQ6IGxwdF94ZmVyX3R4bi5hc3NldEFtb3VudCwKCS8vIAkJCWFsZ29fYW1vdW50OiB3aXRoZHJhd19hbW91bnQsCgkvLyAJCQlhcmMyMDBfYW1vdW50OiBhcmMyMDBfd2l0aGRyYXdfYW1vdW50LAoJLy8gCQl9KQoJYnl0ZSAweGU4NGY3Mjg0IC8vIEJ1cm4oYWRkcmVzcyx1aW50NjQsdWludDY0LHVpbnQ2NCkKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAxIC8vIHdpdGhkcmF3X2Ftb3VudDogdWludDY0CglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAyIC8vIGFyYzIwMF93aXRoZHJhd19hbW91bnQ6IHVpbnQ2NAoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgLTEgLy8gbHB0X3hmZXJfdHhuOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBBc3NldEFtb3VudAoJaXRvYgoJY29uY2F0Cgljb25jYXQKCWxvZwoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czo0MTAKCS8vIHRoaXMuc2V0X3JhdGlvKCkKCWNhbGxzdWIgc2V0X3JhdGlvCglyZXRzdWIKCi8vIHN3YXBfdG9fYXJjMjAwKHBheSx1aW50NjQpdWludDY0CmFiaV9yb3V0ZV9zd2FwX3RvX2FyYzIwMDoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZSAweDE1MWY3Yzc1CgoJLy8gbWluX2Ftb3VudDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gcGF5X3R4bjogcGF5Cgl0eG4gR3JvdXBJbmRleAoJaW50IDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCWludCBwYXkKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIHN3YXBfdG9fYXJjMjAwKHBheSx1aW50NjQpdWludDY0CgljYWxsc3ViIHN3YXBfdG9fYXJjMjAwCglpdG9iCgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKLy8gc3dhcF90b19hcmMyMDAocGF5X3R4bjogUGF5VHhuLCBtaW5fYW1vdW50OiB1aW50NjQpOiB1aW50NjQKLy8KLy8gU3dhcCBmcm9tIEFsZ29zIHRvIEFyYzIwMAovLyBAcGFyYW0gcGF5X3R4biBUeG4gd2l0aCBhbiBhbW91bnQgb2YgYWxnb3Mgc2VuZGluZyB0byB0aGlzIGFwcCBhY2NvdW50Ci8vIEBwYXJhbSBtaW5fYW1vdW50IG1pbiBhcmMyMDAgZm9yIHRoaXMgc3dhcCB0byBiZSBzdWNjZXNzZnVsCi8vIEByZXR1cm5zIGFtb3VudCBvZiBhbGdvcyByZXR1cm5lZApzd2FwX3RvX2FyYzIwMDoKCXByb3RvIDIgMQoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CglkdXBuIDQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6NDIwCgkvLyBhc3NlcnQodGhpcy5zd2FwX2VuYWJsZWQudmFsdWUpCglieXRlIDB4NzM3NzYxNzA1ZjY1NmU2MTYyNmM2NTY0IC8vICJzd2FwX2VuYWJsZWQiCglhcHBfZ2xvYmFsX2dldAoJaW50IDAKCWdldGJpdAoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjQyMgoJLy8gdmVyaWZ5UGF5VHhuKHBheV90eG4sIHsKCS8vIAkJCXNlbmRlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gCQkJcmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAJCQlhbW91bnQ6IHsgZ3JlYXRlclRoYW46IDAgfSwKCS8vIAkJfSkKCS8vIHZlcmlmeSBzZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBwYXlfdHhuOiBQYXlUeG4KCWd0eG5zIFNlbmRlcgoJdHhuIFNlbmRlcgoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIHBheV90eG46IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIHBheV90eG46IFBheVR4bgoJZ3R4bnMgQW1vdW50CglpbnQgMAoJPgoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjQyOAoJLy8gYXJjMjAwX2JhbGFuY2UgPSB0aGlzLmdldF9hcmMyMDBfYmFsYW5jZSgpCgljYWxsc3ViIGdldF9hcmMyMDBfYmFsYW5jZQoJZnJhbWVfYnVyeSAwIC8vIGFyYzIwMF9iYWxhbmNlOiB1aW50NjQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6NDI5CgkvLyBiYWxhbmNlID0gdGhpcy5nZXRfYmFsYW5jZSgpCgljYWxsc3ViIGdldF9iYWxhbmNlCglmcmFtZV9idXJ5IDEgLy8gYmFsYW5jZTogdWludDY0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjQzMQoJLy8gYXNzZXJ0KGJhbGFuY2UgPiAwKQoJZnJhbWVfZGlnIDEgLy8gYmFsYW5jZTogdWludDY0CglpbnQgMAoJPgoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjQzMgoJLy8gYXNzZXJ0KGFyYzIwMF9iYWxhbmNlID4gMCkKCWZyYW1lX2RpZyAwIC8vIGFyYzIwMF9iYWxhbmNlOiB1aW50NjQKCWludCAwCgk+Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6NDM0CgkvLyB0b19zd2FwID0gdGhpcy5jb21wdXRlX291dF90b2tlbnMoCgkvLyAJCQlwYXlfdHhuLmFtb3VudCwKCS8vIAkJCWJhbGFuY2UgLSBwYXlfdHhuLmFtb3VudCwKCS8vIAkJCWFyYzIwMF9iYWxhbmNlLAoJLy8gCQkJdGhpcy5zd2FwX2ZlZS52YWx1ZQoJLy8gCQkpCglieXRlIDB4NzM3NzYxNzA1ZjY2NjU2NSAvLyAic3dhcF9mZWUiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIDAgLy8gYXJjMjAwX2JhbGFuY2U6IHVpbnQ2NAoJZnJhbWVfZGlnIDEgLy8gYmFsYW5jZTogdWludDY0CglmcmFtZV9kaWcgLTEgLy8gcGF5X3R4bjogUGF5VHhuCglndHhucyBBbW91bnQKCS0KCWZyYW1lX2RpZyAtMSAvLyBwYXlfdHhuOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJY2FsbHN1YiBjb21wdXRlX291dF90b2tlbnMKCWZyYW1lX2J1cnkgMiAvLyB0b19zd2FwOiB1aW50NjQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6NDQxCgkvLyBhZG1pbl9mZWUgPSB0aGlzLmNvbXB1dGVfb3V0X3Rva2Vuc19hZG1pbl9mZWUocGF5X3R4bi5hbW91bnQsIGJhbGFuY2UgLSBwYXlfdHhuLmFtb3VudCwgYXJjMjAwX2JhbGFuY2UpCglmcmFtZV9kaWcgMCAvLyBhcmMyMDBfYmFsYW5jZTogdWludDY0CglmcmFtZV9kaWcgMSAvLyBiYWxhbmNlOiB1aW50NjQKCWZyYW1lX2RpZyAtMSAvLyBwYXlfdHhuOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJLQoJZnJhbWVfZGlnIC0xIC8vIHBheV90eG46IFBheVR4bgoJZ3R4bnMgQW1vdW50CgljYWxsc3ViIGNvbXB1dGVfb3V0X3Rva2Vuc19hZG1pbl9mZWUKCWZyYW1lX2J1cnkgMyAvLyBhZG1pbl9mZWU6IHVpbnQ2NAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czo0NDMKCS8vIGFkbWluX2ZlZV9pbl9hbGdvcyA9IHRoaXMuY29tcHV0ZV9vdXRfdG9rZW5zKGFkbWluX2ZlZSwgYXJjMjAwX2JhbGFuY2UgLSBhZG1pbl9mZWUsIGJhbGFuY2UsIDApCglpbnQgMAoJZnJhbWVfZGlnIDEgLy8gYmFsYW5jZTogdWludDY0CglmcmFtZV9kaWcgMCAvLyBhcmMyMDBfYmFsYW5jZTogdWludDY0CglmcmFtZV9kaWcgMyAvLyBhZG1pbl9mZWU6IHVpbnQ2NAoJLQoJZnJhbWVfZGlnIDMgLy8gYWRtaW5fZmVlOiB1aW50NjQKCWNhbGxzdWIgY29tcHV0ZV9vdXRfdG9rZW5zCglmcmFtZV9idXJ5IDQgLy8gYWRtaW5fZmVlX2luX2FsZ29zOiB1aW50NjQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6NDQ1CgkvLyBhc3NlcnQodG9fc3dhcCA+IDApCglmcmFtZV9kaWcgMiAvLyB0b19zd2FwOiB1aW50NjQKCWludCAwCgk+Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6NDQ2CgkvLyBhc3NlcnQodG9fc3dhcCA+PSBtaW5fYW1vdW50KQoJZnJhbWVfZGlnIDIgLy8gdG9fc3dhcDogdWludDY0CglmcmFtZV9kaWcgLTIgLy8gbWluX2Ftb3VudDogdWludDY0Cgk+PQoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjQ0OAoJLy8gdGhpcy5hcmMyMDBfdHJhbnNmZXJfdG8odGhpcy50eG4uc2VuZGVyLCB0b19zd2FwKQoJZnJhbWVfZGlnIDIgLy8gdG9fc3dhcDogdWludDY0Cgl0eG4gU2VuZGVyCgljYWxsc3ViIGFyYzIwMF90cmFuc2Zlcl90bwoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czo0NDkKCS8vIHRoaXMudHJhbnNmZXJfdG8odGhpcy5hZG1pbi52YWx1ZSwgYWRtaW5fZmVlX2luX2FsZ29zKQoJZnJhbWVfZGlnIDQgLy8gYWRtaW5fZmVlX2luX2FsZ29zOiB1aW50NjQKCWJ5dGUgMHg2MTY0NmQ2OTZlIC8vICJhZG1pbiIKCWFwcF9nbG9iYWxfZ2V0CgljYWxsc3ViIHRyYW5zZmVyX3RvCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjQ1MQoJLy8gdGhpcy5zZXRfcmF0aW8oKQoJY2FsbHN1YiBzZXRfcmF0aW8KCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6NDUzCgkvLyB0aGlzLlN3YXAubG9nKHsKCS8vIAkJCXNlbmRlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gCQkJZnJvbV9hbW91bnQ6IHBheV90eG4uYW1vdW50LAoJLy8gCQkJdG9fYW1vdW50OiB0b19zd2FwLAoJLy8gCQkJaXNfZGlyZWN0aW9uX2Zyb21fYXJjMjAwX3RvX2FsZ286IDAsCgkvLyAJCX0pCglieXRlIDB4YWUyOGYwODkgLy8gU3dhcChhZGRyZXNzLHVpbnQ2NCx1aW50NjQsdWludDgpCgl0eG4gU2VuZGVyCglmcmFtZV9kaWcgLTEgLy8gcGF5X3R4bjogUGF5VHhuCglndHhucyBBbW91bnQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIDIgLy8gdG9fc3dhcDogdWludDY0CglpdG9iCgljb25jYXQKCWJ5dGUgMHgwMAoJY29uY2F0Cgljb25jYXQKCWxvZwoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czo0NjAKCS8vIHJldHVybiB0b19zd2FwOwoJZnJhbWVfZGlnIDIgLy8gdG9fc3dhcDogdWludDY0CgoJLy8gc2V0IHRoZSBzdWJyb3V0aW5lIHJldHVybiB2YWx1ZQoJZnJhbWVfYnVyeSAwCgoJLy8gcG9wIGFsbCBsb2NhbCB2YXJpYWJsZXMgZnJvbSB0aGUgc3RhY2sKCXBvcG4gNAoJcmV0c3ViCgovLyBzd2FwX2Zyb21fYXJjMjAwKHVpbnQ2NCx1aW50NjQpdWludDY0CmFiaV9yb3V0ZV9zd2FwX2Zyb21fYXJjMjAwOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBtaW5fYW1vdW50OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyBhcmMyMDBfYW1vdW50OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIHN3YXBfZnJvbV9hcmMyMDAodWludDY0LHVpbnQ2NCl1aW50NjQKCWNhbGxzdWIgc3dhcF9mcm9tX2FyYzIwMAoJaXRvYgoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCi8vIHN3YXBfZnJvbV9hcmMyMDAoYXJjMjAwX2Ftb3VudDogdWludDY0LCBtaW5fYW1vdW50OiB1aW50NjQpOiB1aW50NjQKLy8KLy8gU3dhcCB0b2tlbnMgZnJvbSBBcmMyMDAgdG8gQWxnb3MKLy8gQHBhcmFtIGFyYzIwMF9hbW91bnQgYW1vdW50IG9mIGFyYzIwMCBhcHByb3ZlZAovLyBAcGFyYW0gbWluX2Ftb3VudCBtaW4gYWxnbyBmb3IgdGhpcyBzd2FwIHRvIGJlIHN1Y2Nlc3NmdWwKLy8gQHJldHVybnMgYW1vdW50IG9mIGFsZ29zIHJldHVybmVkCnN3YXBfZnJvbV9hcmMyMDA6Cglwcm90byAyIDEKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZSAweAoJZHVwbiAzCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjQ3MAoJLy8gYXNzZXJ0KHRoaXMuc3dhcF9lbmFibGVkLnZhbHVlKQoJYnl0ZSAweDczNzc2MTcwNWY2NTZlNjE2MjZjNjU2NCAvLyAic3dhcF9lbmFibGVkIgoJYXBwX2dsb2JhbF9nZXQKCWludCAwCglnZXRiaXQKCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czo0NzIKCS8vIHRoaXMuYXJjMjAwX3RyYW5mZXJfZnJvbSh0aGlzLnR4bi5zZW5kZXIsIHRoaXMuYXBwLmFkZHJlc3MsIGFyYzIwMF9hbW91bnQpCglmcmFtZV9kaWcgLTEgLy8gYXJjMjAwX2Ftb3VudDogdWludDY0CglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJdHhuIFNlbmRlcgoJY2FsbHN1YiBhcmMyMDBfdHJhbmZlcl9mcm9tCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjQ3NAoJLy8gYXJjMjAwX2JhbGFuY2UgPSB0aGlzLmdldF9hcmMyMDBfYmFsYW5jZSgpCgljYWxsc3ViIGdldF9hcmMyMDBfYmFsYW5jZQoJZnJhbWVfYnVyeSAwIC8vIGFyYzIwMF9iYWxhbmNlOiB1aW50NjQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6NDc1CgkvLyBiYWxhbmNlID0gdGhpcy5nZXRfYmFsYW5jZSgpCgljYWxsc3ViIGdldF9iYWxhbmNlCglmcmFtZV9idXJ5IDEgLy8gYmFsYW5jZTogdWludDY0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjQ3NwoJLy8gYXNzZXJ0KGJhbGFuY2UgPiAwKQoJZnJhbWVfZGlnIDEgLy8gYmFsYW5jZTogdWludDY0CglpbnQgMAoJPgoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjQ3OAoJLy8gYXNzZXJ0KGFyYzIwMF9iYWxhbmNlID4gMCkKCWZyYW1lX2RpZyAwIC8vIGFyYzIwMF9iYWxhbmNlOiB1aW50NjQKCWludCAwCgk+Cglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6NDgwCgkvLyB0b19zd2FwID0gdGhpcy5jb21wdXRlX291dF90b2tlbnMoCgkvLyAJCQlhcmMyMDBfYW1vdW50LAoJLy8gCQkJYXJjMjAwX2JhbGFuY2UgLSBhcmMyMDBfYW1vdW50LAoJLy8gCQkJYmFsYW5jZSwKCS8vIAkJCXRoaXMuc3dhcF9mZWUudmFsdWUKCS8vIAkJKQoJYnl0ZSAweDczNzc2MTcwNWY2NjY1NjUgLy8gInN3YXBfZmVlIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAxIC8vIGJhbGFuY2U6IHVpbnQ2NAoJZnJhbWVfZGlnIDAgLy8gYXJjMjAwX2JhbGFuY2U6IHVpbnQ2NAoJZnJhbWVfZGlnIC0xIC8vIGFyYzIwMF9hbW91bnQ6IHVpbnQ2NAoJLQoJZnJhbWVfZGlnIC0xIC8vIGFyYzIwMF9hbW91bnQ6IHVpbnQ2NAoJY2FsbHN1YiBjb21wdXRlX291dF90b2tlbnMKCWZyYW1lX2J1cnkgMiAvLyB0b19zd2FwOiB1aW50NjQKCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6NDg3CgkvLyBhZG1pbl9mZWVfaW5fYWxnb3MgPSB0aGlzLmNvbXB1dGVfb3V0X3Rva2Vuc19hZG1pbl9mZWUoCgkvLyAJCQlhcmMyMDBfYW1vdW50LAoJLy8gCQkJYXJjMjAwX2JhbGFuY2UgLSBhcmMyMDBfYW1vdW50LAoJLy8gCQkJYmFsYW5jZQoJLy8gCQkpCglmcmFtZV9kaWcgMSAvLyBiYWxhbmNlOiB1aW50NjQKCWZyYW1lX2RpZyAwIC8vIGFyYzIwMF9iYWxhbmNlOiB1aW50NjQKCWZyYW1lX2RpZyAtMSAvLyBhcmMyMDBfYW1vdW50OiB1aW50NjQKCS0KCWZyYW1lX2RpZyAtMSAvLyBhcmMyMDBfYW1vdW50OiB1aW50NjQKCWNhbGxzdWIgY29tcHV0ZV9vdXRfdG9rZW5zX2FkbWluX2ZlZQoJZnJhbWVfYnVyeSAzIC8vIGFkbWluX2ZlZV9pbl9hbGdvczogdWludDY0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjQ5MwoJLy8gYXNzZXJ0KHRvX3N3YXAgPiAwKQoJZnJhbWVfZGlnIDIgLy8gdG9fc3dhcDogdWludDY0CglpbnQgMAoJPgoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjQ5NAoJLy8gYXNzZXJ0KHRvX3N3YXAgPj0gbWluX2Ftb3VudCkKCWZyYW1lX2RpZyAyIC8vIHRvX3N3YXA6IHVpbnQ2NAoJZnJhbWVfZGlnIC0yIC8vIG1pbl9hbW91bnQ6IHVpbnQ2NAoJPj0KCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czo0OTYKCS8vIHRoaXMudHJhbnNmZXJfdG8odGhpcy50eG4uc2VuZGVyLCB0b19zd2FwKQoJZnJhbWVfZGlnIDIgLy8gdG9fc3dhcDogdWludDY0Cgl0eG4gU2VuZGVyCgljYWxsc3ViIHRyYW5zZmVyX3RvCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjQ5NwoJLy8gdGhpcy50cmFuc2Zlcl90byh0aGlzLmFkbWluLnZhbHVlLCBhZG1pbl9mZWVfaW5fYWxnb3MpCglmcmFtZV9kaWcgMyAvLyBhZG1pbl9mZWVfaW5fYWxnb3M6IHVpbnQ2NAoJYnl0ZSAweDYxNjQ2ZDY5NmUgLy8gImFkbWluIgoJYXBwX2dsb2JhbF9nZXQKCWNhbGxzdWIgdHJhbnNmZXJfdG8KCgkvLyBzcmMvY29udHJhY3RzL0FsZ29BcmMyMDBQb29sLmFsZ28udHM6NDk5CgkvLyB0aGlzLnNldF9yYXRpbygpCgljYWxsc3ViIHNldF9yYXRpbwoKCS8vIHNyYy9jb250cmFjdHMvQWxnb0FyYzIwMFBvb2wuYWxnby50czo1MDEKCS8vIHRoaXMuU3dhcC5sb2coewoJLy8gCQkJc2VuZGVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAJCQlmcm9tX2Ftb3VudDogYXJjMjAwX2Ftb3VudCwKCS8vIAkJCXRvX2Ftb3VudDogdG9fc3dhcCwKCS8vIAkJCWlzX2RpcmVjdGlvbl9mcm9tX2FyYzIwMF90b19hbGdvOiAxLAoJLy8gCQl9KQoJYnl0ZSAweGFlMjhmMDg5IC8vIFN3YXAoYWRkcmVzcyx1aW50NjQsdWludDY0LHVpbnQ4KQoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIGFyYzIwMF9hbW91bnQ6IHVpbnQ2NAoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgMiAvLyB0b19zd2FwOiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJYnl0ZSAweDAxCgljb25jYXQKCWNvbmNhdAoJbG9nCgoJLy8gc3JjL2NvbnRyYWN0cy9BbGdvQXJjMjAwUG9vbC5hbGdvLnRzOjUwOAoJLy8gcmV0dXJuIHRvX3N3YXA7CglmcmFtZV9kaWcgMiAvLyB0b19zd2FwOiB1aW50NjQKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCgkvLyBwb3AgYWxsIGxvY2FsIHZhcmlhYmxlcyBmcm9tIHRoZSBzdGFjawoJcG9wbiAzCglyZXRzdWIKCmNyZWF0ZV9Ob09wOgoJbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbihhZGRyZXNzLGFkZHJlc3MsYXBwbGljYXRpb24sdWludDY0KXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCBhYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb24KCWVycgoKY2FsbF9Ob09wOgoJbWV0aG9kICJjcmVhdGVfcG9vbF90b2tlbihwYXksc3RyaW5nLHN0cmluZyl1aW50NjQiCgltZXRob2QgInNldF9hZG1pbihhZGRyZXNzKXZvaWQiCgltZXRob2QgInNldF9nb3Zlcm5lcihhZGRyZXNzKXZvaWQiCgltZXRob2QgInNldF9mZWVzKHVpbnQ2NCl2b2lkIgoJbWV0aG9kICJzZXRfbWludF9lbmFibGVkKGJvb2wpdm9pZCIKCW1ldGhvZCAic2V0X2J1cm5fZW5hYmxlZChib29sKXZvaWQiCgltZXRob2QgInNldF9zd2FwX2VuYWJsZWQoYm9vbCl2b2lkIgoJbWV0aG9kICJyZWdpc3Rlcl9vbmxpbmUoYnl0ZVtdLGJ5dGVbXSxieXRlW10sdWludDY0LHVpbnQ2NCx1aW50NjQpdm9pZCIKCW1ldGhvZCAicmVnaXN0ZXJfb2ZmbGluZSgpdm9pZCIKCW1ldGhvZCAic2V0X3JhdGlvKCl2b2lkIgoJbWV0aG9kICJtaW50KHBheSx1aW50NjQsYXNzZXQpdm9pZCIKCW1ldGhvZCAiYnVybihheGZlcil2b2lkIgoJbWV0aG9kICJzd2FwX3RvX2FyYzIwMChwYXksdWludDY0KXVpbnQ2NCIKCW1ldGhvZCAic3dhcF9mcm9tX2FyYzIwMCh1aW50NjQsdWludDY0KXVpbnQ2NCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoIGFiaV9yb3V0ZV9jcmVhdGVfcG9vbF90b2tlbiBhYmlfcm91dGVfc2V0X2FkbWluIGFiaV9yb3V0ZV9zZXRfZ292ZXJuZXIgYWJpX3JvdXRlX3NldF9mZWVzIGFiaV9yb3V0ZV9zZXRfbWludF9lbmFibGVkIGFiaV9yb3V0ZV9zZXRfYnVybl9lbmFibGVkIGFiaV9yb3V0ZV9zZXRfc3dhcF9lbmFibGVkIGFiaV9yb3V0ZV9yZWdpc3Rlcl9vbmxpbmUgYWJpX3JvdXRlX3JlZ2lzdGVyX29mZmxpbmUgYWJpX3JvdXRlX3NldF9yYXRpbyBhYmlfcm91dGVfbWludCBhYmlfcm91dGVfYnVybiBhYmlfcm91dGVfc3dhcF90b19hcmMyMDAgYWJpX3JvdXRlX3N3YXBfZnJvbV9hcmMyMDAKCWVycgoKY2FsbF9VcGRhdGVBcHBsaWNhdGlvbjoKCW1ldGhvZCAidXBkYXRlQXBwbGljYXRpb24oKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCBhYmlfcm91dGVfdXBkYXRlQXBwbGljYXRpb24KCWVycg==",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "AlgoArc200Pool",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "initialize values",
        "args": [
          {
            "name": "admin",
            "type": "address"
          },
          {
            "name": "governer",
            "type": "address"
          },
          {
            "name": "arc200_token",
            "type": "application"
          },
          {
            "name": "lp_fee",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateApplication",
        "desc": "allows admin to update the application",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "create_pool_token",
        "args": [
          {
            "name": "algo_seed_txn",
            "type": "pay"
          },
          {
            "name": "lpt_name",
            "type": "string"
          },
          {
            "name": "lpt_unit",
            "type": "string"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "set_admin",
        "args": [
          {
            "name": "admin",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_governer",
        "args": [
          {
            "name": "governer",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_fees",
        "args": [
          {
            "name": "fee",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_mint_enabled",
        "args": [
          {
            "name": "enabled",
            "type": "bool"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_burn_enabled",
        "args": [
          {
            "name": "enabled",
            "type": "bool"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_swap_enabled",
        "args": [
          {
            "name": "enabled",
            "type": "bool"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "register_online",
        "args": [
          {
            "name": "selection_pk",
            "type": "byte[]"
          },
          {
            "name": "state_proof_pk",
            "type": "byte[]"
          },
          {
            "name": "vote_pk",
            "type": "byte[]"
          },
          {
            "name": "vote_first",
            "type": "uint64"
          },
          {
            "name": "vote_last",
            "type": "uint64"
          },
          {
            "name": "vote_key_dilution",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "register_offline",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_ratio",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "mint",
        "desc": "*******************************************",
        "args": [
          {
            "name": "pay_txn",
            "type": "pay"
          },
          {
            "name": "arc200_amount",
            "type": "uint64"
          },
          {
            "name": "lpt_asset",
            "type": "asset"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Mint",
            "args": [
              {
                "name": "sender",
                "type": "address"
              },
              {
                "name": "algo_amount",
                "type": "uint64"
              },
              {
                "name": "arc200_amount",
                "type": "uint64"
              },
              {
                "name": "lpt_amount",
                "type": "uint64"
              }
            ],
            "desc": "Event Mint(sender, algo_amount, arc200_amount, lpt_amount_minted)"
          }
        ]
      },
      {
        "name": "burn",
        "desc": "Withdraw liquidity",
        "args": [
          {
            "name": "lpt_xfer_txn",
            "type": "axfer"
          }
        ],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "Burn",
            "args": [
              {
                "name": "sender",
                "type": "address"
              },
              {
                "name": "algo_amount",
                "type": "uint64"
              },
              {
                "name": "arc200_amount",
                "type": "uint64"
              },
              {
                "name": "lpt_amount",
                "type": "uint64"
              }
            ],
            "desc": "Event Burn(sender, lpt_amount_burned, algo_amount, arc200_amount)"
          }
        ]
      },
      {
        "name": "swap_to_arc200",
        "desc": "Swap from Algos to Arc200",
        "args": [
          {
            "name": "pay_txn",
            "type": "pay",
            "desc": "Txn with an amount of algos sending to this app account"
          },
          {
            "name": "min_amount",
            "type": "uint64",
            "desc": "min arc200 for this swap to be successful"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "amount of algos returned"
        },
        "events": [
          {
            "name": "Swap",
            "args": [
              {
                "name": "sender",
                "type": "address"
              },
              {
                "name": "from_amount",
                "type": "uint64"
              },
              {
                "name": "to_amount",
                "type": "uint64"
              },
              {
                "name": "is_direction_from_arc200_to_algo",
                "type": "uint8"
              }
            ],
            "desc": "Event Swap(sender, from_amount, to_amount, is_direction_from_arc200_to_algo)"
          }
        ]
      },
      {
        "name": "swap_from_arc200",
        "desc": "Swap tokens from Arc200 to Algos",
        "args": [
          {
            "name": "arc200_amount",
            "type": "uint64",
            "desc": "amount of arc200 approved"
          },
          {
            "name": "min_amount",
            "type": "uint64",
            "desc": "min algo for this swap to be successful"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "amount of algos returned"
        },
        "events": [
          {
            "name": "Swap",
            "args": [
              {
                "name": "sender",
                "type": "address"
              },
              {
                "name": "from_amount",
                "type": "uint64"
              },
              {
                "name": "to_amount",
                "type": "uint64"
              },
              {
                "name": "is_direction_from_arc200_to_algo",
                "type": "uint8"
              }
            ],
            "desc": "Event Swap(sender, from_amount, to_amount, is_direction_from_arc200_to_algo)"
          }
        ]
      }
    ],
    "events": [
      {
        "name": "Swap",
        "args": [
          {
            "name": "sender",
            "type": "address"
          },
          {
            "name": "from_amount",
            "type": "uint64"
          },
          {
            "name": "to_amount",
            "type": "uint64"
          },
          {
            "name": "is_direction_from_arc200_to_algo",
            "type": "uint8"
          }
        ],
        "desc": "Event Swap(sender, from_amount, to_amount, is_direction_from_arc200_to_algo)"
      },
      {
        "name": "Mint",
        "args": [
          {
            "name": "sender",
            "type": "address"
          },
          {
            "name": "algo_amount",
            "type": "uint64"
          },
          {
            "name": "arc200_amount",
            "type": "uint64"
          },
          {
            "name": "lpt_amount",
            "type": "uint64"
          }
        ],
        "desc": "Event Mint(sender, algo_amount, arc200_amount, lpt_amount_minted)"
      },
      {
        "name": "Burn",
        "args": [
          {
            "name": "sender",
            "type": "address"
          },
          {
            "name": "algo_amount",
            "type": "uint64"
          },
          {
            "name": "arc200_amount",
            "type": "uint64"
          },
          {
            "name": "lpt_amount",
            "type": "uint64"
          }
        ],
        "desc": "Event Burn(sender, lpt_amount_burned, algo_amount, arc200_amount)"
      }
    ]
  }
}