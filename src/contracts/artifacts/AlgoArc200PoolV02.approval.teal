#pragma version 10

// This TEAL was generated by TEALScript v0.80.1
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch call_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_UpdateApplication call_DeleteApplication create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED

NOT_IMPLEMENTED:
	err

// createApplication(address)void
abi_route_createApplication:
	// manager: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute createApplication(address)void
	callsub createApplication
	int 1
	return

// createApplication(manager: Address): void
createApplication:
	proto 1 0

	// src/contracts/Arc200Token.algo.ts:17
	// this.manager.value = manager
	byte 0x6d616e61676572 // "manager"
	frame_dig -1 // manager: Address
	app_global_put
	retsub

// updateApplication()void
abi_route_updateApplication:
	// execute updateApplication()void
	callsub updateApplication
	int 1
	return

// updateApplication(): void
updateApplication:
	proto 0 0

	// src/contracts/Arc200Token.algo.ts:21
	// assert(this.manager.value === this.txn.sender)
	byte 0x6d616e61676572 // "manager"
	app_global_get
	txn Sender
	==
	assert
	retsub

// setManager(address)bool
abi_route_setManager:
	// The ABI return prefix
	byte 0x151f7c75

	// manager: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute setManager(address)bool
	callsub setManager
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// setManager(manager: Address): boolean
setManager:
	proto 1 1

	// src/contracts/Arc200Token.algo.ts:25
	// assert(this.manager.value === this.txn.sender)
	byte 0x6d616e61676572 // "manager"
	app_global_get
	txn Sender
	==
	assert

	// src/contracts/Arc200Token.algo.ts:26
	// this.manager.value = manager
	byte 0x6d616e61676572 // "manager"
	frame_dig -1 // manager: Address
	app_global_put

	// src/contracts/Arc200Token.algo.ts:27
	// return true;
	int 1
	retsub

// arc200Initialize(name: StaticArray<byte, 32>, symbol: StaticArray<byte, 8>, decimals: uint8, totalSupply: uint256, mintTo: Address): void
arc200Initialize:
	proto 5 0

	// src/contracts/Arc200Token.algo.ts:37
	// this.metadata.value = {
	// 			name: name,
	// 			symbol: symbol,
	// 			decimals: decimals,
	// 		}
	byte 0x6d65746164617461 // "metadata"
	frame_dig -1 // name: StaticArray<byte, 32>
	frame_dig -2 // symbol: StaticArray<byte, 8>
	concat
	frame_dig -3 // decimals: uint8
	itob
	extract 7 1
	concat
	box_put

	// src/contracts/Arc200Token.algo.ts:42
	// this.totalSupply.value = totalSupply
	byte 0x746f74616c537570706c79 // "totalSupply"
	frame_dig -4 // totalSupply: uint256
	box_put

	// src/contracts/Arc200Token.algo.ts:44
	// this.balances(mintTo).value = totalSupply
	frame_dig -5 // mintTo: Address
	frame_dig -4 // totalSupply: uint256
	box_put

	// src/contracts/Arc200Token.algo.ts:46
	// this.arc200_Transfer.log({
	// 			from: globals.zeroAddress,
	// 			to: mintTo,
	// 			value: totalSupply,
	// 		})
	byte 0x7983c35c // arc200_Transfer(address,address,uint256)
	global ZeroAddress
	frame_dig -5 // mintTo: Address
	concat
	frame_dig -4 // totalSupply: uint256
	concat
	concat
	log
	retsub

// initialize(byte[32],byte[8],uint8,uint256,address)void
abi_route_initialize:
	// mintTo: address
	txna ApplicationArgs 5
	dup
	len
	int 32
	==
	assert

	// totalSupply: uint256
	txna ApplicationArgs 4
	dup
	len
	int 32
	==
	assert

	// decimals: uint8
	txna ApplicationArgs 3
	dup
	len
	int 1
	==
	assert
	btoi

	// symbol: byte[8]
	txna ApplicationArgs 2
	dup
	len
	int 8
	==
	assert

	// name: byte[32]
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute initialize(byte[32],byte[8],uint8,uint256,address)void
	callsub initialize
	int 1
	return

// initialize(name: StaticArray<byte, 32>, symbol: StaticArray<byte, 8>, decimals: uint8, totalSupply: uint256, mintTo: Address): void
//
// Initialize ARC200
// @param name token name
// @param symbol token symbol
// @param decimals number of decimals
// @param totalSupply total supply of tokens
// @param mintTo initial mint to
initialize:
	proto 5 0

	// src/contracts/Arc200Token.algo.ts:68
	// assert(this.app.creator === this.txn.sender || this.manager.value === this.txn.sender)
	txna Applications 0
	app_params_get AppCreator
	pop
	txn Sender
	==
	dup
	bnz skip_or0
	byte 0x6d616e61676572 // "manager"
	app_global_get
	txn Sender
	==
	||

skip_or0:
	assert

	// src/contracts/Arc200Token.algo.ts:69
	// assert(!this.totalSupply.exists)
	byte 0x746f74616c537570706c79 // "totalSupply"
	box_len
	swap
	pop
	!
	assert

	// src/contracts/Arc200Token.algo.ts:71
	// this.arc200Initialize(name, symbol, decimals, totalSupply, mintTo)
	frame_dig -5 // mintTo: Address
	frame_dig -4 // totalSupply: uint256
	frame_dig -3 // decimals: uint8
	frame_dig -2 // symbol: StaticArray<byte, 8>
	frame_dig -1 // name: StaticArray<byte, 32>
	callsub arc200Initialize
	retsub

// arc200_name()byte[32]
abi_route_arc200_name:
	// The ABI return prefix
	byte 0x151f7c75

	// execute arc200_name()byte[32]
	callsub arc200_name
	concat
	log
	int 1
	return

// arc200_name(): StaticArray<byte, 32>
//
// The name of the token
// @returns The name of the token
arc200_name:
	proto 0 1

	// src/contracts/Arc200Token.algo.ts:80
	// return this.metadata.value.name;
	byte 0x6d65746164617461 // "metadata"
	int 0
	int 32
	box_extract
	retsub

// arc200_symbol()byte[8]
abi_route_arc200_symbol:
	// The ABI return prefix
	byte 0x151f7c75

	// execute arc200_symbol()byte[8]
	callsub arc200_symbol
	concat
	log
	int 1
	return

// arc200_symbol(): StaticArray<byte, 8>
//
// Returns the symbol of the token
// @returns The symbol of the token
arc200_symbol:
	proto 0 1

	// src/contracts/Arc200Token.algo.ts:89
	// return this.metadata.value.symbol;
	byte 0x6d65746164617461 // "metadata"
	int 32 // headOffset
	int 8
	box_extract
	retsub

// arc200_decimals()uint8
abi_route_arc200_decimals:
	// The ABI return prefix
	byte 0x151f7c75

	// execute arc200_decimals()uint8
	callsub arc200_decimals
	itob
	dup
	bitlen
	int 8
	<=
	assert
	extract 7 1
	concat
	log
	int 1
	return

// arc200_decimals(): uint8
//
// Returns the decimals of the token
// @returns The decimals of the token
arc200_decimals:
	proto 0 1

	// src/contracts/Arc200Token.algo.ts:98
	// return this.metadata.value.decimals;
	byte 0x6d65746164617461 // "metadata"
	int 40 // headOffset
	int 1
	box_extract
	btoi
	retsub

// arc200_totalSupply()uint256
abi_route_arc200_totalSupply:
	// The ABI return prefix
	byte 0x151f7c75

	// execute arc200_totalSupply()uint256
	callsub arc200_totalSupply
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// arc200_totalSupply(): uint256
//
// Returns the total supply of the token
// @returns The total supply of the token
arc200_totalSupply:
	proto 0 1

	// src/contracts/Arc200Token.algo.ts:107
	// return (
	// 			this.totalSupply.value - this.arc200_balanceOf(globals.zeroAddress) - this.arc200_balanceOf(this.app.address)
	// 		);
	byte 0x746f74616c537570706c79 // "totalSupply"
	box_get
	assert
	global ZeroAddress
	callsub arc200_balanceOf
	b-
	global CurrentApplicationAddress
	callsub arc200_balanceOf
	b-
	retsub

// arc200_balanceOf(address)uint256
abi_route_arc200_balanceOf:
	// The ABI return prefix
	byte 0x151f7c75

	// owner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute arc200_balanceOf(address)uint256
	callsub arc200_balanceOf
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// arc200_balanceOf(owner: Address): uint256
//
// Returns the current balance of the owner of the token
// @param owner The address of the owner of the token
// @returns The current balance of the holder of the token
arc200_balanceOf:
	proto 1 1

	// if0_condition
	// src/contracts/Arc200Token.algo.ts:119
	// this.balances(owner).exists
	frame_dig -1 // owner: Address
	box_len
	swap
	pop
	bz if0_else

	// if0_consequent
	// src/contracts/Arc200Token.algo.ts:120
	// return this.balances(owner).value;
	frame_dig -1 // owner: Address
	box_get
	assert
	retsub
	b if0_end

if0_else:
	// src/contracts/Arc200Token.algo.ts:122
	// return <uint256>0;
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	retsub

if0_end:
	retsub

// hasBalance(address)bool
abi_route_hasBalance:
	// The ABI return prefix
	byte 0x151f7c75

	// owner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute hasBalance(address)bool
	callsub hasBalance
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// hasBalance(owner: Address): boolean
//
// Check if balance box exists
// @param owner The address of the owner
// @returns `true` if balance box exists
hasBalance:
	proto 1 1

	// if1_condition
	// src/contracts/Arc200Token.algo.ts:133
	// this.balances(owner).exists
	frame_dig -1 // owner: Address
	box_len
	swap
	pop
	bz if1_end

	// if1_consequent
	// src/contracts/Arc200Token.algo.ts:134
	// return true;
	int 1
	retsub

if1_end:
	// src/contracts/Arc200Token.algo.ts:136
	// return false;
	int 0
	retsub

// hasAllowance(address,address)bool
abi_route_hasAllowance:
	// The ABI return prefix
	byte 0x151f7c75

	// spender: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// owner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute hasAllowance(address,address)bool
	callsub hasAllowance
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// hasAllowance(owner: Address, spender: Address): boolean
//
// Check if allowance box exists
// @param owner The address of the owner
// @param spender The address of the spender
// @returns `true` if allowance box exists
hasAllowance:
	proto 2 1

	// if2_condition
	// src/contracts/Arc200Token.algo.ts:147
	// this.allowances([owner, spender]).exists
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	box_len
	swap
	pop
	bz if2_end

	// if2_consequent
	// src/contracts/Arc200Token.algo.ts:148
	// return true;
	int 1
	retsub

if2_end:
	// src/contracts/Arc200Token.algo.ts:150
	// return false;
	int 0
	retsub

// arc200_allowance(address,address)uint256
abi_route_arc200_allowance:
	// The ABI return prefix
	byte 0x151f7c75

	// spender: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// owner: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute arc200_allowance(address,address)uint256
	callsub arc200_allowance
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// arc200_allowance(owner: Address, spender: Address): uint256
//
// Returns the current allowance of the spender of the tokens of the owner
// @param owner
// @param spender
// @returns The remaining allowance
arc200_allowance:
	proto 2 1

	// if3_condition
	// src/contracts/Arc200Token.algo.ts:161
	// this.allowances([owner, spender]).exists
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	box_len
	swap
	pop
	bz if3_else

	// if3_consequent
	// src/contracts/Arc200Token.algo.ts:162
	// return this.allowances([owner, spender]).value;
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	box_get
	assert
	retsub
	b if3_end

if3_else:
	// src/contracts/Arc200Token.algo.ts:164
	// return <uint256>0;
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	retsub

if3_end:
	retsub

// arc200_transfer(address,uint256)bool
abi_route_arc200_transfer:
	// The ABI return prefix
	byte 0x151f7c75

	// value: uint256
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// to: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute arc200_transfer(address,uint256)bool
	callsub arc200_transfer
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// arc200_transfer(to: Address, value: uint256): boolean
//
// Transfers tokens
// @param to The destination of the transfer
// @param value Amount of tokens to transfer
// @returns Success
arc200_transfer:
	proto 2 1

	// src/contracts/Arc200Token.algo.ts:199
	// return this.transfer(this.txn.sender, to, value);
	frame_dig -2 // value: uint256
	frame_dig -1 // to: Address
	txn Sender
	callsub transfer
	retsub

// transfer(from: Address, to: Address, value: uint256): boolean
transfer:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// src/contracts/Arc200Token.algo.ts:203
	// senderBalance = this.arc200_balanceOf(from)
	frame_dig -1 // from: Address
	callsub arc200_balanceOf
	frame_bury 0 // senderBalance: unsafe uint256

	// src/contracts/Arc200Token.algo.ts:204
	// assert(senderBalance >= value)
	frame_dig 0 // senderBalance: unsafe uint256
	frame_dig -3 // value: uint256
	b>=
	assert

	// src/contracts/Arc200Token.algo.ts:206
	// senderBalanceAfter = <uint256>(senderBalance - value)
	frame_dig 0 // senderBalance: unsafe uint256
	frame_dig -3 // value: uint256
	b-
	frame_bury 1 // senderBalanceAfter: unsafe uint256

	// if4_condition
	// src/contracts/Arc200Token.algo.ts:207
	// senderBalanceAfter > <uint256>0
	frame_dig 1 // senderBalanceAfter: unsafe uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	bz if4_elseif1_condition

	// if4_consequent
	// src/contracts/Arc200Token.algo.ts:208
	// this.balances(from).value = senderBalanceAfter
	frame_dig -1 // from: Address
	frame_dig 1 // senderBalanceAfter: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	box_put
	b if4_end

if4_elseif1_condition:
	// src/contracts/Arc200Token.algo.ts:209
	// this.balances(from).exists
	frame_dig -1 // from: Address
	box_len
	swap
	pop
	bz if4_end

	// if4_elseif1_consequent
	// src/contracts/Arc200Token.algo.ts:211
	// this.balances(from).delete()
	frame_dig -1 // from: Address
	box_del

if4_end:
	// src/contracts/Arc200Token.algo.ts:214
	// receiverBalanceAfter = <uint256>(this.arc200_balanceOf(to) + value)
	frame_dig -2 // to: Address
	callsub arc200_balanceOf
	frame_dig -3 // value: uint256
	b+
	frame_bury 2 // receiverBalanceAfter: unsafe uint256

	// if5_condition
	// src/contracts/Arc200Token.algo.ts:215
	// receiverBalanceAfter > <uint256>0
	frame_dig 2 // receiverBalanceAfter: unsafe uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	bz if5_end

	// if5_consequent
	// src/contracts/Arc200Token.algo.ts:216
	// this.balances(to).value = receiverBalanceAfter
	frame_dig -2 // to: Address
	frame_dig 2 // receiverBalanceAfter: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	box_put

if5_end:
	// src/contracts/Arc200Token.algo.ts:219
	// this.arc200_Transfer.log({
	// 			from: from,
	// 			to: to,
	// 			value: value,
	// 		})
	byte 0x7983c35c // arc200_Transfer(address,address,uint256)
	frame_dig -1 // from: Address
	frame_dig -2 // to: Address
	concat
	frame_dig -3 // value: uint256
	concat
	concat
	log

	// src/contracts/Arc200Token.algo.ts:225
	// return true;
	int 1

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// arc200_approve(address,uint256)bool
abi_route_arc200_approve:
	// The ABI return prefix
	byte 0x151f7c75

	// value: uint256
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// spender: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute arc200_approve(address,uint256)bool
	callsub arc200_approve
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// arc200_approve(spender: Address, value: uint256): boolean
//
// Approve spender for a token
// @param spender
// @param value
// @returns Success
arc200_approve:
	proto 2 1

	// src/contracts/Arc200Token.algo.ts:235
	// return this.approve(this.txn.sender, spender, value);
	frame_dig -2 // value: uint256
	frame_dig -1 // spender: Address
	txn Sender
	callsub approve
	retsub

// approve(owner: Address, spender: Address, value: uint256): boolean
approve:
	proto 3 1

	// if6_condition
	// src/contracts/Arc200Token.algo.ts:239
	// value > <uint256>0
	frame_dig -3 // value: uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	bz if6_elseif1_condition

	// if6_consequent
	// src/contracts/Arc200Token.algo.ts:240
	// this.allowances([owner, spender]).value = value
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	frame_dig -3 // value: uint256
	box_put
	b if6_end

if6_elseif1_condition:
	// src/contracts/Arc200Token.algo.ts:241
	// this.allowances([owner, spender]).exists
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	box_len
	swap
	pop
	bz if6_end

	// if6_elseif1_consequent
	// src/contracts/Arc200Token.algo.ts:242
	// this.allowances([owner, spender]).delete()
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	box_del

if6_end:
	// src/contracts/Arc200Token.algo.ts:245
	// this.arc200_Approval.log({
	// 			owner: owner,
	// 			spender: spender,
	// 			value: value,
	// 		})
	byte 0x1969f865 // arc200_Approval(address,address,uint256)
	frame_dig -1 // owner: Address
	frame_dig -2 // spender: Address
	concat
	frame_dig -3 // value: uint256
	concat
	concat
	log

	// src/contracts/Arc200Token.algo.ts:251
	// return true;
	int 1
	retsub

// arc200_transferFrom(address,address,uint256)bool
abi_route_arc200_transferFrom:
	// The ABI return prefix
	byte 0x151f7c75

	// value: uint256
	txna ApplicationArgs 3
	dup
	len
	int 32
	==
	assert

	// to: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// from: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute arc200_transferFrom(address,address,uint256)bool
	callsub arc200_transferFrom
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// arc200_transferFrom(from: Address, to: Address, value: uint256): boolean
//
// Transfers tokens from source to destination as approved spender
// @param from The source  of the transfer
// @param to The destination of the transfer
// @param value Amount of tokens to transfer
// @returns Success
arc200_transferFrom:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 4

	// src/contracts/Arc200Token.algo.ts:262
	// allowance = this.arc200_allowance(from, this.txn.sender)
	txn Sender
	frame_dig -1 // from: Address
	callsub arc200_allowance
	frame_bury 0 // allowance: unsafe uint256

	// src/contracts/Arc200Token.algo.ts:263
	// assert(allowance >= value)
	frame_dig 0 // allowance: unsafe uint256
	frame_dig -3 // value: uint256
	b>=
	assert

	// src/contracts/Arc200Token.algo.ts:265
	// ownerBalance = this.arc200_balanceOf(from)
	frame_dig -1 // from: Address
	callsub arc200_balanceOf
	frame_bury 1 // ownerBalance: unsafe uint256

	// src/contracts/Arc200Token.algo.ts:266
	// assert(ownerBalance >= value)
	frame_dig 1 // ownerBalance: unsafe uint256
	frame_dig -3 // value: uint256
	b>=
	assert

	// src/contracts/Arc200Token.algo.ts:268
	// allowanceAfter = <uint256>(allowance - value)
	frame_dig 0 // allowance: unsafe uint256
	frame_dig -3 // value: uint256
	b-
	frame_bury 2 // allowanceAfter: unsafe uint256

	// if7_condition
	// src/contracts/Arc200Token.algo.ts:269
	// allowanceAfter > <uint256>0
	frame_dig 2 // allowanceAfter: unsafe uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	bz if7_elseif1_condition

	// if7_consequent
	// src/contracts/Arc200Token.algo.ts:270
	// this.allowances([from, this.txn.sender]).value = allowanceAfter
	frame_dig -1 // from: Address
	txn Sender
	concat
	frame_dig 2 // allowanceAfter: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	box_put
	b if7_end

if7_elseif1_condition:
	// src/contracts/Arc200Token.algo.ts:271
	// this.allowances([from, this.txn.sender]).exists
	frame_dig -1 // from: Address
	txn Sender
	concat
	box_len
	swap
	pop
	bz if7_end

	// if7_elseif1_consequent
	// src/contracts/Arc200Token.algo.ts:273
	// this.allowances([from, this.txn.sender]).delete()
	frame_dig -1 // from: Address
	txn Sender
	concat
	box_del

if7_end:
	// src/contracts/Arc200Token.algo.ts:276
	// ownerBalanceAfter = <uint256>(ownerBalance - value)
	frame_dig 1 // ownerBalance: unsafe uint256
	frame_dig -3 // value: uint256
	b-
	frame_bury 3 // ownerBalanceAfter: unsafe uint256

	// if8_condition
	// src/contracts/Arc200Token.algo.ts:277
	// ownerBalanceAfter > <uint256>0
	frame_dig 3 // ownerBalanceAfter: unsafe uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	bz if8_elseif1_condition

	// if8_consequent
	// src/contracts/Arc200Token.algo.ts:278
	// this.balances(from).value = ownerBalanceAfter
	frame_dig -1 // from: Address
	frame_dig 3 // ownerBalanceAfter: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	box_put
	b if8_end

if8_elseif1_condition:
	// src/contracts/Arc200Token.algo.ts:279
	// this.balances(from).exists
	frame_dig -1 // from: Address
	box_len
	swap
	pop
	bz if8_end

	// if8_elseif1_consequent
	// src/contracts/Arc200Token.algo.ts:281
	// this.balances(from).delete()
	frame_dig -1 // from: Address
	box_del

if8_end:
	// src/contracts/Arc200Token.algo.ts:284
	// receiverBalanceAfter = <uint256>(this.arc200_balanceOf(to) + value)
	frame_dig -2 // to: Address
	callsub arc200_balanceOf
	frame_dig -3 // value: uint256
	b+
	frame_bury 4 // receiverBalanceAfter: unsafe uint256

	// if9_condition
	// src/contracts/Arc200Token.algo.ts:285
	// receiverBalanceAfter > <uint256>0
	frame_dig 4 // receiverBalanceAfter: unsafe uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	bz if9_end

	// if9_consequent
	// src/contracts/Arc200Token.algo.ts:286
	// this.balances(to).value = receiverBalanceAfter
	frame_dig -2 // to: Address
	frame_dig 4 // receiverBalanceAfter: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	box_put

if9_end:
	// src/contracts/Arc200Token.algo.ts:289
	// this.arc200_Transfer.log({
	// 			from: from,
	// 			to: to,
	// 			value: value,
	// 		})
	byte 0x7983c35c // arc200_Transfer(address,address,uint256)
	frame_dig -1 // from: Address
	frame_dig -2 // to: Address
	concat
	frame_dig -3 // value: uint256
	concat
	concat
	log

	// src/contracts/Arc200Token.algo.ts:295
	// return true;
	int 1

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 4
	retsub

// deleteApplication()void
abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	int 1
	return

// deleteApplication(): void
//
// Delete the app if balance total supply has been burned
deleteApplication:
	proto 0 0

	// src/contracts/Arc200Token.algo.ts:302
	// assert(this.manager.value === this.txn.sender)
	byte 0x6d616e61676572 // "manager"
	app_global_get
	txn Sender
	==
	assert

	// src/contracts/Arc200Token.algo.ts:303
	// assert(this.arc200_balanceOf(globals.zeroAddress) === this.totalSupply.value)
	global ZeroAddress
	callsub arc200_balanceOf
	byte 0x746f74616c537570706c79 // "totalSupply"
	box_get
	assert
	b==
	assert

	// src/contracts/Arc200Token.algo.ts:304
	// this.balances(globals.zeroAddress).delete()
	global ZeroAddress
	box_del

	// src/contracts/Arc200Token.algo.ts:305
	// this.metadata.delete()
	byte 0x6d65746164617461 // "metadata"
	box_del

	// src/contracts/Arc200Token.algo.ts:306
	// this.totalSupply.delete()
	byte 0x746f74616c537570706c79 // "totalSupply"
	box_del

	// src/contracts/Arc200Token.algo.ts:307
	// this.manager.delete()
	byte 0x6d616e61676572 // "manager"
	app_global_del

	// src/contracts/Arc200Token.algo.ts:308
	// sendPayment({
	// 			sender: this.app.address,
	// 			receiver: this.txn.sender,
	// 			amount: 0,
	// 			closeRemainderTo: this.txn.sender,
	// 			fee: globals.minTxnFee,
	// 		})
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/contracts/Arc200Token.algo.ts:309
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/Arc200Token.algo.ts:310
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// src/contracts/Arc200Token.algo.ts:311
	// amount: 0
	int 0
	itxn_field Amount

	// src/contracts/Arc200Token.algo.ts:312
	// closeRemainderTo: this.txn.sender
	txn Sender
	itxn_field CloseRemainderTo

	// src/contracts/Arc200Token.algo.ts:313
	// fee: globals.minTxnFee
	global MinTxnFee
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/contracts/Arc200Token.algo.ts:315
	// assert(this.app.address.balance === 0)
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	int 0
	==
	assert
	retsub

// poolInitialize(byte[32],byte[8],application)void
abi_route_poolInitialize:
	// tokenYAppId: application
	txna ApplicationArgs 3
	btoi
	txnas Applications

	// symbol: byte[8]
	txna ApplicationArgs 2
	dup
	len
	int 8
	==
	assert

	// name: byte[32]
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute poolInitialize(byte[32],byte[8],application)void
	callsub poolInitialize
	int 1
	return

// poolInitialize(name: StaticArray<byte, 32>, symbol: StaticArray<byte, 8>, tokenYAppId: Application): void
//
// Initialize the pool
// @param name name of the lp token
// @param symbol symbol of the lp token
// @param tokenYAppId appid (or id) of the y-token
poolInitialize:
	proto 3 0

	// src/contracts/AlgoArc200PoolV02.algo.ts:68
	// assert(this.app.creator === this.txn.sender || this.manager.value === this.txn.sender)
	txna Applications 0
	app_params_get AppCreator
	pop
	txn Sender
	==
	dup
	bnz skip_or1
	byte 0x6d616e61676572 // "manager"
	app_global_get
	txn Sender
	==
	||

skip_or1:
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:69
	// assert(!this.totalSupply.exists)
	byte 0x746f74616c537570706c79 // "totalSupply"
	box_len
	swap
	pop
	!
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:71
	// this.arc200Initialize(name, symbol, <uint8>DECIMALS, <uint256>SCALE * <uint256>(10 ** DECIMALS), this.app.address)
	global CurrentApplicationAddress
	byte 0x00000000000000000000000000000000000000000000000000005af3107a4000
	int 10
	int 6
	exp
	itob
	b*
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	int 6
	frame_dig -2 // symbol: StaticArray<byte, 8>
	frame_dig -1 // name: StaticArray<byte, 32>
	callsub arc200Initialize

	// src/contracts/AlgoArc200PoolV02.algo.ts:73
	// this.feeController.value = this.txn.sender
	byte 0x6665655f636f6e74726f6c6c6572 // "fee_controller"
	txn Sender
	app_global_put

	// src/contracts/AlgoArc200PoolV02.algo.ts:74
	// this.ratio.value = <uint256>SCALE
	byte 0x726174696f // "ratio"
	byte 0x00000000000000000000000000000000000000000000000000005af3107a4000
	app_global_put

	// src/contracts/AlgoArc200PoolV02.algo.ts:75
	// this.fee.value = {
	// 			swapFee: <uint256>INITIAL_FEE,
	// 			platformFee: <uint256>INITIAL_MANAGER_FEE,
	// 		}
	byte 0x666565 // "fee"
	byte 0x000000000000000000000000000000000000000000000000000000e8d4a5100000000000000000000000000000000000000000000000000000002d79883d2000
	box_put

	// src/contracts/AlgoArc200PoolV02.algo.ts:79
	// this.tokenYAppId.value = tokenYAppId
	byte 0x746f6b656e5f795f6170705f6964 // "token_y_app_id"
	frame_dig -3 // tokenYAppId: Application
	itob
	box_put
	retsub

// setFeeController(address)bool
abi_route_setFeeController:
	// The ABI return prefix
	byte 0x151f7c75

	// feeController: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute setFeeController(address)bool
	callsub setFeeController
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// setFeeController(feeController: Address): boolean
//
// Update fee-controller address
// @param feeController new fee-controller address
// @returns `true` if success
setFeeController:
	proto 1 1

	// src/contracts/AlgoArc200PoolV02.algo.ts:88
	// assert(this.manager.value === this.txn.sender || this.feeController.value === this.txn.sender)
	byte 0x6d616e61676572 // "manager"
	app_global_get
	txn Sender
	==
	dup
	bnz skip_or2
	byte 0x6665655f636f6e74726f6c6c6572 // "fee_controller"
	app_global_get
	txn Sender
	==
	||

skip_or2:
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:89
	// this.feeController.value = feeController
	byte 0x6665655f636f6e74726f6c6c6572 // "fee_controller"
	frame_dig -1 // feeController: Address
	app_global_put

	// src/contracts/AlgoArc200PoolV02.algo.ts:90
	// return true;
	int 1
	retsub

// setFees(uint256)bool
abi_route_setFees:
	// The ABI return prefix
	byte 0x151f7c75

	// fee: uint256
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute setFees(uint256)bool
	callsub setFees
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// setFees(fee: uint256): boolean
//
// Update the swap-fee of the pool
// @param fee updated swap-fee
// @returns `true` if success
setFees:
	proto 1 1

	// src/contracts/AlgoArc200PoolV02.algo.ts:99
	// assert(this.feeController.value === this.txn.sender)
	byte 0x6665655f636f6e74726f6c6c6572 // "fee_controller"
	app_global_get
	txn Sender
	==
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:100
	// this.fee.value = {
	// 			swapFee: fee,
	// 			platformFee: this.fee.value.platformFee,
	// 		}
	byte 0x666565 // "fee"
	frame_dig -1 // fee: uint256
	byte 0x666565 // "fee"
	int 32 // headOffset
	int 32
	box_extract
	concat
	box_put

	// src/contracts/AlgoArc200PoolV02.algo.ts:104
	// return true;
	int 1
	retsub

// setPlatformFees(uint256)bool
abi_route_setPlatformFees:
	// The ABI return prefix
	byte 0x151f7c75

	// fee: uint256
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute setPlatformFees(uint256)bool
	callsub setPlatformFees
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// setPlatformFees(fee: uint256): boolean
//
// Update the platform-fee of the pool
// @param fee updated platform-fee
// @returns `true` if success
setPlatformFees:
	proto 1 1

	// src/contracts/AlgoArc200PoolV02.algo.ts:113
	// assert(this.manager.value === this.txn.sender)
	byte 0x6d616e61676572 // "manager"
	app_global_get
	txn Sender
	==
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:114
	// this.fee.value = {
	// 			swapFee: this.fee.value.swapFee,
	// 			platformFee: fee,
	// 		}
	byte 0x666565 // "fee"
	dup
	int 0
	int 32
	box_extract
	frame_dig -1 // fee: uint256
	concat
	box_put

	// src/contracts/AlgoArc200PoolV02.algo.ts:118
	// return true;
	int 1
	retsub

// registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void
abi_route_registerOnline:
	// voteKeyDilution: uint64
	txna ApplicationArgs 6
	btoi

	// voteLast: uint64
	txna ApplicationArgs 5
	btoi

	// voteFirst: uint64
	txna ApplicationArgs 4
	btoi

	// votePk: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// stateProofPk: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// selectionPk: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void
	callsub registerOnline
	int 1
	return

// registerOnline(selectionPk: bytes, stateProofPk: bytes, votePk: bytes, voteFirst: uint64, voteLast: uint64, voteKeyDilution: uint64): void
//
// Bring the pool account online for consensus participation
registerOnline:
	proto 6 0

	// src/contracts/AlgoArc200PoolV02.algo.ts:132
	// assert(this.txn.sender === this.feeController.value || this.txn.sender === this.manager.value)
	txn Sender
	byte 0x6665655f636f6e74726f6c6c6572 // "fee_controller"
	app_global_get
	==
	dup
	bnz skip_or3
	txn Sender
	byte 0x6d616e61676572 // "manager"
	app_global_get
	==
	||

skip_or3:
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:134
	// sendOnlineKeyRegistration({
	// 			sender: this.app.address,
	// 			selectionPK: selectionPk,
	// 			stateProofPK: stateProofPk,
	// 			votePK: votePk,
	// 			voteFirst: voteFirst,
	// 			voteLast: voteLast,
	// 			voteKeyDilution: voteKeyDilution,
	// 			fee: globals.minTxnFee,
	// 		})
	itxn_begin
	int keyreg
	itxn_field TypeEnum

	// src/contracts/AlgoArc200PoolV02.algo.ts:135
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/AlgoArc200PoolV02.algo.ts:136
	// selectionPK: selectionPk
	frame_dig -1 // selectionPk: bytes
	itxn_field SelectionPK

	// src/contracts/AlgoArc200PoolV02.algo.ts:137
	// stateProofPK: stateProofPk
	frame_dig -2 // stateProofPk: bytes
	itxn_field StateProofPK

	// src/contracts/AlgoArc200PoolV02.algo.ts:138
	// votePK: votePk
	frame_dig -3 // votePk: bytes
	itxn_field VotePK

	// src/contracts/AlgoArc200PoolV02.algo.ts:139
	// voteFirst: voteFirst
	frame_dig -4 // voteFirst: uint64
	itxn_field VoteFirst

	// src/contracts/AlgoArc200PoolV02.algo.ts:140
	// voteLast: voteLast
	frame_dig -5 // voteLast: uint64
	itxn_field VoteLast

	// src/contracts/AlgoArc200PoolV02.algo.ts:141
	// voteKeyDilution: voteKeyDilution
	frame_dig -6 // voteKeyDilution: uint64
	itxn_field VoteKeyDilution

	// src/contracts/AlgoArc200PoolV02.algo.ts:142
	// fee: globals.minTxnFee
	global MinTxnFee
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// registerOffline()void
abi_route_registerOffline:
	// execute registerOffline()void
	callsub registerOffline
	int 1
	return

// registerOffline(): void
//
// Bring the pool account offline i.e. stop consensus participation
registerOffline:
	proto 0 0

	// src/contracts/AlgoArc200PoolV02.algo.ts:150
	// assert(this.txn.sender === this.feeController.value || this.txn.sender === this.manager.value)
	txn Sender
	byte 0x6665655f636f6e74726f6c6c6572 // "fee_controller"
	app_global_get
	==
	dup
	bnz skip_or4
	txn Sender
	byte 0x6d616e61676572 // "manager"
	app_global_get
	==
	||

skip_or4:
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:152
	// sendOfflineKeyRegistration({
	// 			sender: this.app.address,
	// 			fee: globals.minTxnFee,
	// 		})
	itxn_begin
	int keyreg
	itxn_field TypeEnum

	// src/contracts/AlgoArc200PoolV02.algo.ts:153
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/AlgoArc200PoolV02.algo.ts:154
	// fee: globals.minTxnFee
	global MinTxnFee
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// getTokenXBalance(): uint256
getTokenXBalance:
	proto 0 1

	// src/contracts/AlgoArc200PoolV02.algo.ts:159
	// return <uint256>(this.app.address.balance - this.app.address.minBalance);
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	-
	itob
	retsub

// getTokenYBalance(): uint256
getTokenYBalance:
	proto 0 1

	// src/contracts/AlgoArc200PoolV02.algo.ts:163
	// return sendMethodCall<[Address], uint256>({
	// 			sender: this.app.address,
	// 			name: 'arc200_balanceOf',
	// 			applicationID: this.tokenYAppId.value,
	// 			methodArgs: [this.app.address],
	// 			fee: globals.minTxnFee,
	// 		});
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "arc200_balanceOf(address)uint256"
	itxn_field ApplicationArgs

	// src/contracts/AlgoArc200PoolV02.algo.ts:164
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/AlgoArc200PoolV02.algo.ts:166
	// applicationID: this.tokenYAppId.value
	byte 0x746f6b656e5f795f6170705f6964 // "token_y_app_id"
	box_get
	assert
	btoi
	itxn_field ApplicationID

	// src/contracts/AlgoArc200PoolV02.algo.ts:167
	// methodArgs: [this.app.address]
	global CurrentApplicationAddress
	itxn_field ApplicationArgs

	// src/contracts/AlgoArc200PoolV02.algo.ts:168
	// fee: globals.minTxnFee
	global MinTxnFee
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	retsub

// getTokenXDecimals(): uint8
getTokenXDecimals:
	proto 0 1

	// src/contracts/AlgoArc200PoolV02.algo.ts:173
	// return <uint8>6;
	int 6
	retsub

// getTokenYDecimals(): uint8
getTokenYDecimals:
	proto 0 1

	// src/contracts/AlgoArc200PoolV02.algo.ts:177
	// return sendMethodCall<[], uint8>({
	// 			sender: this.app.address,
	// 			name: 'arc200_decimals',
	// 			applicationID: this.tokenYAppId.value,
	// 			methodArgs: [],
	// 			fee: globals.minTxnFee,
	// 		});
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "arc200_decimals()uint8"
	itxn_field ApplicationArgs

	// src/contracts/AlgoArc200PoolV02.algo.ts:178
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/AlgoArc200PoolV02.algo.ts:180
	// applicationID: this.tokenYAppId.value
	byte 0x746f6b656e5f795f6170705f6964 // "token_y_app_id"
	box_get
	assert
	btoi
	itxn_field ApplicationID

	// src/contracts/AlgoArc200PoolV02.algo.ts:181
	// methodArgs: []
	// src/contracts/AlgoArc200PoolV02.algo.ts:182
	// fee: globals.minTxnFee
	global MinTxnFee
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	btoi
	retsub

// transferXTo(to: Address, amount: uint256): boolean
transferXTo:
	proto 2 1

	// src/contracts/AlgoArc200PoolV02.algo.ts:187
	// sendPayment({
	// 			sender: this.app.address,
	// 			receiver: to,
	// 			amount: <uint64>amount,
	// 			fee: globals.minTxnFee,
	// 		})
	itxn_begin
	int pay
	itxn_field TypeEnum

	// src/contracts/AlgoArc200PoolV02.algo.ts:188
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/AlgoArc200PoolV02.algo.ts:189
	// receiver: to
	frame_dig -1 // to: Address
	itxn_field Receiver

	// src/contracts/AlgoArc200PoolV02.algo.ts:190
	// amount: <uint64>amount
	frame_dig -2 // amount: uint256
	dup
	bitlen
	int 64
	<=
	assert
	extract 24 8
	btoi
	itxn_field Amount

	// src/contracts/AlgoArc200PoolV02.algo.ts:191
	// fee: globals.minTxnFee
	global MinTxnFee
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// src/contracts/AlgoArc200PoolV02.algo.ts:193
	// return true;
	int 1
	retsub

// transferYTo(to: Address, amount: uint256): boolean
transferYTo:
	proto 2 1

	// src/contracts/AlgoArc200PoolV02.algo.ts:197
	// return sendMethodCall<[Address, uint256], boolean>({
	// 			sender: this.app.address,
	// 			name: 'arc200_transfer',
	// 			applicationID: this.tokenYAppId.value,
	// 			methodArgs: [to, amount],
	// 			fee: globals.minTxnFee,
	// 		});
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "arc200_transfer(address,uint256)bool"
	itxn_field ApplicationArgs

	// src/contracts/AlgoArc200PoolV02.algo.ts:198
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/AlgoArc200PoolV02.algo.ts:200
	// applicationID: this.tokenYAppId.value
	byte 0x746f6b656e5f795f6170705f6964 // "token_y_app_id"
	box_get
	assert
	btoi
	itxn_field ApplicationID

	// src/contracts/AlgoArc200PoolV02.algo.ts:201
	// methodArgs: [to, amount]
	frame_dig -1 // to: Address
	itxn_field ApplicationArgs
	frame_dig -2 // amount: uint256
	itxn_field ApplicationArgs

	// src/contracts/AlgoArc200PoolV02.algo.ts:202
	// fee: globals.minTxnFee
	global MinTxnFee
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	int 0
	getbit
	retsub

// transferYFrom(from: Address, to: Address, amount: uint256): boolean
transferYFrom:
	proto 3 1

	// src/contracts/AlgoArc200PoolV02.algo.ts:207
	// return sendMethodCall<[Address, Address, uint256], boolean>({
	// 			sender: this.app.address,
	// 			name: 'arc200_transferFrom',
	// 			applicationID: this.tokenYAppId.value,
	// 			methodArgs: [from, to, amount],
	// 			fee: globals.minTxnFee,
	// 		});
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "arc200_transferFrom(address,address,uint256)bool"
	itxn_field ApplicationArgs

	// src/contracts/AlgoArc200PoolV02.algo.ts:208
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// src/contracts/AlgoArc200PoolV02.algo.ts:210
	// applicationID: this.tokenYAppId.value
	byte 0x746f6b656e5f795f6170705f6964 // "token_y_app_id"
	box_get
	assert
	btoi
	itxn_field ApplicationID

	// src/contracts/AlgoArc200PoolV02.algo.ts:211
	// methodArgs: [from, to, amount]
	frame_dig -1 // from: Address
	itxn_field ApplicationArgs
	frame_dig -2 // to: Address
	itxn_field ApplicationArgs
	frame_dig -3 // amount: uint256
	itxn_field ApplicationArgs

	// src/contracts/AlgoArc200PoolV02.algo.ts:212
	// fee: globals.minTxnFee
	global MinTxnFee
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	int 0
	getbit
	retsub

// getRatio()uint256
abi_route_getRatio:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getRatio()uint256
	callsub getRatio
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// getRatio(): uint256
getRatio:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// src/contracts/AlgoArc200PoolV02.algo.ts:218
	// yBalance = this.getTokenYBalance()
	callsub getTokenYBalance
	frame_bury 0 // yBalance: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:219
	// xBalance = this.getTokenXBalance()
	callsub getTokenXBalance
	frame_bury 1 // xBalance: unsafe uint256

	// if10_condition
	// src/contracts/AlgoArc200PoolV02.algo.ts:220
	// yBalance > <uint256>0
	frame_dig 0 // yBalance: unsafe uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	bz if10_else

	// if10_consequent
	// src/contracts/AlgoArc200PoolV02.algo.ts:221
	// return (xBalance * <uint256>SCALE * <uint256>SCALE) / yBalance;
	frame_dig 1 // xBalance: unsafe uint256
	byte 0x00000000000000000000000000000000000000000000000000005af3107a4000
	b*
	byte 0x00000000000000000000000000000000000000000000000000005af3107a4000
	b*
	frame_dig 0 // yBalance: unsafe uint256
	b/

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub
	b if10_end

if10_else:
	// src/contracts/AlgoArc200PoolV02.algo.ts:223
	// return <uint256>SCALE * <uint256>SCALE;
	byte 0x00000000000000000000000000000000000000000000000000005af3107a4000
	dup
	b*

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

if10_end:
	retsub

// updateRatio(): void
updateRatio:
	proto 0 0

	// src/contracts/AlgoArc200PoolV02.algo.ts:228
	// this.ratio.value = this.getRatio()
	byte 0x726174696f // "ratio"
	callsub getRatio
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	app_global_put
	retsub

// powOfTen(decimals: uint64): uint256
//
// Example: `powOfTen(6)` returns `1,000,000`
// @param pow number of decimal places
// @returns
powOfTen:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// src/contracts/AlgoArc200PoolV02.algo.ts:237
	// result: uint256 = 1
	byte 0x0000000000000000000000000000000000000000000000000000000000000001
	frame_bury 0 // result: uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:239
	// i: uint64 = 0
	int 0
	frame_bury 1 // i: uint64

for_0:
	// src/contracts/AlgoArc200PoolV02.algo.ts:239
	// i < decimals
	frame_dig 1 // i: uint64
	frame_dig -1 // decimals: uint64
	<
	bz for_0_end

	// src/contracts/AlgoArc200PoolV02.algo.ts:240
	// result = result * <uint256>10
	frame_dig 0 // result: uint256
	byte 0x000000000000000000000000000000000000000000000000000000000000000a
	b*
	frame_bury 0 // result: uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:239
	// i = i + 1
	frame_dig 1 // i: uint64
	int 1
	+
	frame_bury 1 // i: uint64
	b for_0

for_0_end:
	// src/contracts/AlgoArc200PoolV02.algo.ts:243
	// return result;
	frame_dig 0 // result: uint256

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// addLiquidity(pay,uint256)bool
abi_route_addLiquidity:
	// The ABI return prefix
	byte 0x151f7c75

	// amountY: uint256
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// payTxnX: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute addLiquidity(pay,uint256)bool
	callsub addLiquidity
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// addLiquidity(payTxnX: PayTxn, amountY: uint256): boolean
//
// Add liquidity to the pool
// @param payTxnX x-token txn
// @param amountY amount of y-token approved to the pool
// @returns `true` if success
addLiquidity:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 14

	// src/contracts/AlgoArc200PoolV02.algo.ts:253
	// verifyPayTxn(payTxnX, {
	// 			sender: this.txn.sender,
	// 			receiver: this.app.address,
	// 			amount: { greaterThan: 0 },
	// 			rekeyTo: globals.zeroAddress,
	// 			closeRemainderTo: globals.zeroAddress,
	// 		})
	// verify sender
	frame_dig -1 // payTxnX: PayTxn
	gtxns Sender
	txn Sender
	==
	assert

	// verify receiver
	frame_dig -1 // payTxnX: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -1 // payTxnX: PayTxn
	gtxns Amount
	int 0
	>
	assert

	// verify rekeyTo
	frame_dig -1 // payTxnX: PayTxn
	gtxns RekeyTo
	global ZeroAddress
	==
	assert

	// verify closeRemainderTo
	frame_dig -1 // payTxnX: PayTxn
	gtxns CloseRemainderTo
	global ZeroAddress
	==
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:261
	// amountX = <uint256>payTxnX.amount
	frame_dig -1 // payTxnX: PayTxn
	gtxns Amount
	itob
	frame_bury 0 // amountX: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:263
	// assert(amountY > <uint256>0)
	frame_dig -2 // amountY: uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:265
	// balanceY = this.getTokenYBalance()
	callsub getTokenYBalance
	frame_bury 1 // balanceY: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:266
	// balanceX = this.getTokenXBalance()
	callsub getTokenXBalance
	frame_bury 2 // balanceX: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:267
	// issuedLptBefore = this.totalSupply.value - this.arc200_balanceOf(this.app.address)
	byte 0x746f74616c537570706c79 // "totalSupply"
	box_get
	assert
	global CurrentApplicationAddress
	callsub arc200_balanceOf
	b-
	frame_bury 3 // issuedLptBefore: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:269
	// assert(this.transferYFrom(this.txn.sender, this.app.address, amountY))
	frame_dig -2 // amountY: uint256
	global CurrentApplicationAddress
	txn Sender
	callsub transferYFrom
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:271
	// lptToMint = <uint256>0
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	frame_bury 4 // lptToMint: uint256

	// if11_condition
	// src/contracts/AlgoArc200PoolV02.algo.ts:273
	// issuedLptBefore === <uint256>0
	frame_dig 3 // issuedLptBefore: unsafe uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b==
	bz if11_else

	// if11_consequent
	// src/contracts/AlgoArc200PoolV02.algo.ts:274
	// decimalsOfX = this.getTokenXDecimals()
	callsub getTokenXDecimals
	frame_bury 5 // decimalsOfX: unsafe uint8

	// src/contracts/AlgoArc200PoolV02.algo.ts:275
	// decimalsOfY = this.getTokenYDecimals()
	callsub getTokenYDecimals
	frame_bury 6 // decimalsOfY: unsafe uint8

	// src/contracts/AlgoArc200PoolV02.algo.ts:277
	// amountXNormalized = (amountX * this.powOfTen(DECIMALS)) / this.powOfTen(<uint64>decimalsOfX)
	frame_dig 0 // amountX: unsafe uint256
	int 6
	callsub powOfTen
	b*
	frame_dig 5 // decimalsOfX: unsafe uint8
	callsub powOfTen
	b/
	frame_bury 7 // amountXNormalized: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:278
	// amountYNormalized = (amountY * this.powOfTen(DECIMALS)) / this.powOfTen(<uint64>decimalsOfY)
	frame_dig -2 // amountY: uint256
	int 6
	callsub powOfTen
	b*
	frame_dig 6 // decimalsOfY: unsafe uint8
	callsub powOfTen
	b/
	frame_bury 8 // amountYNormalized: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:280
	// lptToMint = sqrt(amountXNormalized * amountYNormalized)
	frame_dig 7 // amountXNormalized: unsafe uint256
	frame_dig 8 // amountYNormalized: unsafe uint256
	b*
	bsqrt
	frame_bury 4 // lptToMint: uint256
	b if11_end

if11_else:
	// src/contracts/AlgoArc200PoolV02.algo.ts:282
	// ratioX = (amountX * <uint256>SCALE) / (balanceX - amountX)
	frame_dig 0 // amountX: unsafe uint256
	byte 0x00000000000000000000000000000000000000000000000000005af3107a4000
	b*
	frame_dig 2 // balanceX: unsafe uint256
	frame_dig 0 // amountX: unsafe uint256
	b-
	b/
	frame_bury 9 // ratioX: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:283
	// ratioY = (amountY * <uint256>SCALE) / balanceY
	frame_dig -2 // amountY: uint256
	byte 0x00000000000000000000000000000000000000000000000000005af3107a4000
	b*
	frame_dig 1 // balanceY: unsafe uint256
	b/
	frame_bury 10 // ratioY: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:284
	// ratio = ratioX < ratioY ? ratioX : ratioY
	frame_dig 9 // ratioX: unsafe uint256
	frame_dig 10 // ratioY: unsafe uint256
	b<
	bz ternary1_false
	frame_dig 9 // ratioX: unsafe uint256
	b ternary1_end

ternary1_false:
	frame_dig 10 // ratioY: unsafe uint256

ternary1_end:
	frame_bury 11 // ratio: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:286
	// lptToMint = (issuedLptBefore * ratio) / <uint256>SCALE
	frame_dig 3 // issuedLptBefore: unsafe uint256
	frame_dig 11 // ratio: unsafe uint256
	b*
	byte 0x00000000000000000000000000000000000000000000000000005af3107a4000
	b/
	frame_bury 4 // lptToMint: uint256

if11_end:
	// src/contracts/AlgoArc200PoolV02.algo.ts:289
	// assert(lptToMint > <uint256>0)
	frame_dig 4 // lptToMint: uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:290
	// assert(this.transfer(this.app.address, this.txn.sender, lptToMint))
	frame_dig 4 // lptToMint: uint256
	txn Sender
	global CurrentApplicationAddress
	callsub transfer
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:293
	// innerTxnsFee = innerTxnsCount * globals.minTxnFee
	int 2
	global MinTxnFee
	*
	frame_bury 12 // innerTxnsFee: uint64

	// src/contracts/AlgoArc200PoolV02.algo.ts:294
	// finalBalanceX = balanceX + amountX - <uint256>innerTxnsFee
	frame_dig 2 // balanceX: unsafe uint256
	frame_dig 0 // amountX: unsafe uint256
	b+
	frame_dig 12 // innerTxnsFee: uint64
	itob
	b-
	frame_bury 13 // finalBalanceX: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:295
	// finalBalanceY = balanceY + amountY
	frame_dig 1 // balanceY: unsafe uint256
	frame_dig -2 // amountY: uint256
	b+
	frame_bury 14 // finalBalanceY: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:297
	// this.Deposit.log({
	// 			sender: this.txn.sender,
	// 			inAmts: [amountX, amountY],
	// 			outLpt: <uint256>0 + lptToMint,
	// 			poolBals: [finalBalanceX, finalBalanceY],
	// 		})
	byte 0x3d013e7d // Deposit(address,(uint256,uint256),uint256,(uint256,uint256))
	txn Sender
	frame_dig 0 // amountX: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig -2 // amountY: uint256
	concat
	concat
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	frame_dig 4 // lptToMint: uint256
	b+
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	frame_dig 13 // finalBalanceX: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 14 // finalBalanceY: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	concat
	concat
	log

	// src/contracts/AlgoArc200PoolV02.algo.ts:304
	// this.updateRatio()
	callsub updateRatio

	// src/contracts/AlgoArc200PoolV02.algo.ts:306
	// return true;
	int 1

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 14
	retsub

// removeLiquidity(uint256)bool
abi_route_removeLiquidity:
	// The ABI return prefix
	byte 0x151f7c75

	// lptAmount: uint256
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute removeLiquidity(uint256)bool
	callsub removeLiquidity
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// removeLiquidity(lptAmount: uint256): boolean
//
// Remove liquidity from the pool
// @param lptAmount amount of lp-token to burn
// @returns `true` of success
removeLiquidity:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 7

	// src/contracts/AlgoArc200PoolV02.algo.ts:315
	// balanceY = this.getTokenYBalance()
	callsub getTokenYBalance
	frame_bury 0 // balanceY: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:316
	// balanceX = this.getTokenXBalance()
	callsub getTokenXBalance
	frame_bury 1 // balanceX: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:318
	// assert(balanceX > <uint256>0)
	frame_dig 1 // balanceX: unsafe uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:319
	// assert(balanceY > <uint256>0)
	frame_dig 0 // balanceY: unsafe uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:321
	// issuedLptBefore = this.totalSupply.value - this.arc200_balanceOf(this.app.address)
	byte 0x746f74616c537570706c79 // "totalSupply"
	box_get
	assert
	global CurrentApplicationAddress
	callsub arc200_balanceOf
	b-
	frame_bury 2 // issuedLptBefore: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:322
	// withdrawAmountX = (balanceX * lptAmount) / issuedLptBefore
	frame_dig 1 // balanceX: unsafe uint256
	frame_dig -1 // lptAmount: uint256
	b*
	frame_dig 2 // issuedLptBefore: unsafe uint256
	b/
	frame_bury 3 // withdrawAmountX: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:323
	// withdrawAmountY = (balanceY * lptAmount) / issuedLptBefore
	frame_dig 0 // balanceY: unsafe uint256
	frame_dig -1 // lptAmount: uint256
	b*
	frame_dig 2 // issuedLptBefore: unsafe uint256
	b/
	frame_bury 4 // withdrawAmountY: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:325
	// assert(withdrawAmountX > <uint256>0)
	frame_dig 3 // withdrawAmountX: unsafe uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:326
	// assert(withdrawAmountY > <uint256>0)
	frame_dig 4 // withdrawAmountY: unsafe uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:328
	// assert(this.transfer(this.txn.sender, this.app.address, lptAmount))
	frame_dig -1 // lptAmount: uint256
	global CurrentApplicationAddress
	txn Sender
	callsub transfer
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:329
	// assert(this.transferXTo(this.txn.sender, withdrawAmountX))
	frame_dig 3 // withdrawAmountX: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	txn Sender
	callsub transferXTo
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:330
	// assert(this.transferYTo(this.txn.sender, withdrawAmountY))
	frame_dig 4 // withdrawAmountY: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	txn Sender
	callsub transferYTo
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:333
	// innerTxnsFee = innerTxnsCount * globals.minTxnFee
	int 2
	global MinTxnFee
	*
	frame_bury 5 // innerTxnsFee: uint64

	// src/contracts/AlgoArc200PoolV02.algo.ts:334
	// finalBalanceX = balanceX - withdrawAmountX - <uint256>(balanceX === withdrawAmountX ? 0 : innerTxnsFee)
	frame_dig 1 // balanceX: unsafe uint256
	frame_dig 3 // withdrawAmountX: unsafe uint256
	b-
	frame_dig 1 // balanceX: unsafe uint256
	frame_dig 3 // withdrawAmountX: unsafe uint256
	b==
	bz ternary5_false
	int 0
	b ternary5_end

ternary5_false:
	frame_dig 5 // innerTxnsFee: uint64

ternary5_end:
	itob
	b-
	frame_bury 6 // finalBalanceX: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:335
	// finalBalanceY = balanceY - withdrawAmountY
	frame_dig 0 // balanceY: unsafe uint256
	frame_dig 4 // withdrawAmountY: unsafe uint256
	b-
	frame_bury 7 // finalBalanceY: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:337
	// this.Withdraw.log({
	// 			sender: this.txn.sender,
	// 			inLpt: lptAmount,
	// 			outAmts: [withdrawAmountX, withdrawAmountY],
	// 			poolBals: [finalBalanceX, finalBalanceY],
	// 		})
	byte 0xa68e655c // Withdraw(address,uint256,(uint256,uint256),(uint256,uint256))
	txn Sender
	frame_dig -1 // lptAmount: uint256
	concat
	frame_dig 3 // withdrawAmountX: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 4 // withdrawAmountY: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	concat
	frame_dig 6 // finalBalanceX: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 7 // finalBalanceY: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	concat
	concat
	log

	// src/contracts/AlgoArc200PoolV02.algo.ts:344
	// this.updateRatio()
	callsub updateRatio

	// src/contracts/AlgoArc200PoolV02.algo.ts:346
	// return true;
	int 1

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 7
	retsub

// computeOutTokens(amountA: uint256, supplyA: uint256, supplyB: uint256, fee: uint256): uint256
computeOutTokens:
	proto 4 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// src/contracts/AlgoArc200PoolV02.algo.ts:350
	// factor = <uint256>SCALE - fee
	byte 0x00000000000000000000000000000000000000000000000000005af3107a4000
	frame_dig -4 // fee: uint256
	b-
	frame_bury 0 // factor: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:352
	// numerator = <uint<512>>amountA * <uint<512>>supplyB * <uint<512>>factor
	frame_dig -1 // amountA: uint256
	frame_dig -3 // supplyB: uint256
	b*
	frame_dig 0 // factor: unsafe uint256
	b*
	frame_bury 1 // numerator: unsafe uint512

	// src/contracts/AlgoArc200PoolV02.algo.ts:353
	// denominator = (<uint<512>>amountA + <uint<512>>supplyA) * <uint<512>>SCALE
	frame_dig -1 // amountA: uint256
	frame_dig -2 // supplyA: uint256
	b+
	byte 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005af3107a4000
	b*
	frame_bury 2 // denominator: unsafe uint512

	// src/contracts/AlgoArc200PoolV02.algo.ts:355
	// return <uint256>(numerator / denominator);
	frame_dig 1 // numerator: unsafe uint512
	frame_dig 2 // denominator: unsafe uint512
	b/

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// computePlatformFee(amountA: uint256, supplyA: uint256, supplyB: uint256): uint256
computePlatformFee:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// src/contracts/AlgoArc200PoolV02.algo.ts:359
	// amount_without_fee = this.computeOutTokens(amountA, supplyA, supplyB, <uint256>0)
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	frame_dig -3 // supplyB: uint256
	frame_dig -2 // supplyA: uint256
	frame_dig -1 // amountA: uint256
	callsub computeOutTokens
	frame_bury 0 // amount_without_fee: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:360
	// amount_with_fee = this.computeOutTokens(amountA, supplyA, supplyB, this.fee.value.swapFee)
	byte 0x666565 // "fee"
	int 0
	int 32
	box_extract
	frame_dig -3 // supplyB: uint256
	frame_dig -2 // supplyA: uint256
	frame_dig -1 // amountA: uint256
	callsub computeOutTokens
	frame_bury 1 // amount_with_fee: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:362
	// return ((amount_without_fee - amount_with_fee) * this.fee.value.platformFee) / <uint256>SCALE;
	frame_dig 0 // amount_without_fee: unsafe uint256
	frame_dig 1 // amount_with_fee: unsafe uint256
	b-
	byte 0x666565 // "fee"
	int 32 // headOffset
	int 32
	box_extract
	b*
	byte 0x00000000000000000000000000000000000000000000000000005af3107a4000
	b/

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// swapXtoY(pay,uint256)uint256
abi_route_swapXtoY:
	// The ABI return prefix
	byte 0x151f7c75

	// minAmountY: uint256
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// payTxnX: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute swapXtoY(pay,uint256)uint256
	callsub swapXtoY
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// swapXtoY(payTxnX: PayTxn, minAmountY: uint256): uint256
//
// Swap x-token for y-token
// @param payTxnX x-token pay txn
// @param minAmountY minimum amount of y-token required for this txn to be successful
// @returns amount of y-token given out in exchange for x-token
swapXtoY:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 7

	// src/contracts/AlgoArc200PoolV02.algo.ts:372
	// verifyPayTxn(payTxnX, {
	// 			sender: this.txn.sender,
	// 			receiver: this.app.address,
	// 			amount: { greaterThan: 0 },
	// 			rekeyTo: globals.zeroAddress,
	// 			closeRemainderTo: globals.zeroAddress,
	// 		})
	// verify sender
	frame_dig -1 // payTxnX: PayTxn
	gtxns Sender
	txn Sender
	==
	assert

	// verify receiver
	frame_dig -1 // payTxnX: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -1 // payTxnX: PayTxn
	gtxns Amount
	int 0
	>
	assert

	// verify rekeyTo
	frame_dig -1 // payTxnX: PayTxn
	gtxns RekeyTo
	global ZeroAddress
	==
	assert

	// verify closeRemainderTo
	frame_dig -1 // payTxnX: PayTxn
	gtxns CloseRemainderTo
	global ZeroAddress
	==
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:380
	// amountX = <uint256>payTxnX.amount
	frame_dig -1 // payTxnX: PayTxn
	gtxns Amount
	itob
	frame_bury 0 // amountX: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:381
	// balanceY = this.getTokenYBalance()
	callsub getTokenYBalance
	frame_bury 1 // balanceY: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:382
	// balanceX = this.getTokenXBalance()
	callsub getTokenXBalance
	frame_bury 2 // balanceX: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:384
	// assert(balanceX > <uint256>0)
	frame_dig 2 // balanceX: unsafe uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:385
	// assert(balanceY > <uint256>0)
	frame_dig 1 // balanceY: unsafe uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:386
	// assert(balanceY > minAmountY)
	frame_dig 1 // balanceY: unsafe uint256
	frame_dig -2 // minAmountY: uint256
	b>
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:388
	// amountOut = this.computeOutTokens(amountX, balanceX - amountX, balanceY, this.fee.value.swapFee)
	byte 0x666565 // "fee"
	int 0
	int 32
	box_extract
	frame_dig 1 // balanceY: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 2 // balanceX: unsafe uint256
	frame_dig 0 // amountX: unsafe uint256
	b-
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 0 // amountX: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	callsub computeOutTokens
	frame_bury 3 // amountOut: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:390
	// assert(amountOut > <uint256>0)
	frame_dig 3 // amountOut: unsafe uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:391
	// assert(amountOut >= minAmountY)
	frame_dig 3 // amountOut: unsafe uint256
	frame_dig -2 // minAmountY: uint256
	b>=
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:392
	// assert(amountOut < balanceY)
	frame_dig 3 // amountOut: unsafe uint256
	frame_dig 1 // balanceY: unsafe uint256
	b<
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:394
	// platformFee = this.computePlatformFee(amountX, balanceX - amountX, balanceY)
	frame_dig 1 // balanceY: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 2 // balanceX: unsafe uint256
	frame_dig 0 // amountX: unsafe uint256
	b-
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 0 // amountX: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	callsub computePlatformFee
	frame_bury 4 // platformFee: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:396
	// assert(this.transferYTo(this.txn.sender, amountOut))
	frame_dig 3 // amountOut: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	txn Sender
	callsub transferYTo
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:397
	// assert(this.transferYTo(this.manager.value, platformFee))
	frame_dig 4 // platformFee: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	byte 0x6d616e61676572 // "manager"
	app_global_get
	callsub transferYTo
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:400
	// innerTxnsFee = innerTxnsCount * globals.minTxnFee
	int 2
	global MinTxnFee
	*
	frame_bury 5 // innerTxnsFee: uint64

	// src/contracts/AlgoArc200PoolV02.algo.ts:401
	// finalBalanceX = balanceX - <uint256>innerTxnsFee
	frame_dig 2 // balanceX: unsafe uint256
	frame_dig 5 // innerTxnsFee: uint64
	itob
	b-
	frame_bury 6 // finalBalanceX: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:402
	// finalBalanceY = balanceY - amountOut - platformFee
	frame_dig 1 // balanceY: unsafe uint256
	frame_dig 3 // amountOut: unsafe uint256
	b-
	frame_dig 4 // platformFee: unsafe uint256
	b-
	frame_bury 7 // finalBalanceY: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:404
	// this.Swap.log({
	// 			sender: this.txn.sender,
	// 			inAmts: [amountX, 0],
	// 			outAmts: [0, amountOut],
	// 			poolBals: [finalBalanceX, finalBalanceY],
	// 		})
	byte 0x7048d0ea // Swap(address,(uint256,uint256),(uint256,uint256),(uint256,uint256))
	txn Sender
	frame_dig 0 // amountX: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	concat
	concat
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	frame_dig 3 // amountOut: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	concat
	frame_dig 6 // finalBalanceX: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 7 // finalBalanceY: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	concat
	concat
	log

	// src/contracts/AlgoArc200PoolV02.algo.ts:411
	// this.updateRatio()
	callsub updateRatio

	// src/contracts/AlgoArc200PoolV02.algo.ts:413
	// return amountOut;
	frame_dig 3 // amountOut: unsafe uint256

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 7
	retsub

// swapYtoX(uint256,uint256)uint256
abi_route_swapYtoX:
	// The ABI return prefix
	byte 0x151f7c75

	// minAmountX: uint256
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// amountY: uint256
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute swapYtoX(uint256,uint256)uint256
	callsub swapYtoX
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// swapYtoX(amountY: uint256, minAmountX: uint256): uint256
//
// Swap y-token for x-token
// @param amountY amount of y-token approved for swap
// @param minAmountX minimum amount of x-token required for this txn to be successful
// @returns amount of x-token given out in exchange for x-token
swapYtoX:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 6

	// src/contracts/AlgoArc200PoolV02.algo.ts:423
	// assert(this.transferYFrom(this.txn.sender, this.app.address, amountY))
	frame_dig -1 // amountY: uint256
	global CurrentApplicationAddress
	txn Sender
	callsub transferYFrom
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:425
	// balanceY = this.getTokenYBalance()
	callsub getTokenYBalance
	frame_bury 0 // balanceY: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:426
	// balanceX = this.getTokenXBalance()
	callsub getTokenXBalance
	frame_bury 1 // balanceX: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:428
	// assert(balanceX > <uint256>0)
	frame_dig 1 // balanceX: unsafe uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:429
	// assert(balanceX > minAmountX)
	frame_dig 1 // balanceX: unsafe uint256
	frame_dig -2 // minAmountX: uint256
	b>
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:430
	// assert(balanceY > <uint256>0)
	frame_dig 0 // balanceY: unsafe uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:432
	// amountOut = this.computeOutTokens(amountY, balanceY - amountY, balanceX, this.fee.value.swapFee)
	byte 0x666565 // "fee"
	int 0
	int 32
	box_extract
	frame_dig 1 // balanceX: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 0 // balanceY: unsafe uint256
	frame_dig -1 // amountY: uint256
	b-
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig -1 // amountY: uint256
	callsub computeOutTokens
	frame_bury 2 // amountOut: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:434
	// assert(amountOut > <uint256>0)
	frame_dig 2 // amountOut: unsafe uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	b>
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:435
	// assert(amountOut >= minAmountX)
	frame_dig 2 // amountOut: unsafe uint256
	frame_dig -2 // minAmountX: uint256
	b>=
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:436
	// assert(amountOut < balanceX)
	frame_dig 2 // amountOut: unsafe uint256
	frame_dig 1 // balanceX: unsafe uint256
	b<
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:438
	// platformFee = this.computePlatformFee(amountY, balanceY - amountY, balanceX)
	frame_dig 1 // balanceX: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 0 // balanceY: unsafe uint256
	frame_dig -1 // amountY: uint256
	b-
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig -1 // amountY: uint256
	callsub computePlatformFee
	frame_bury 3 // platformFee: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:440
	// assert(this.transferXTo(this.txn.sender, amountOut))
	frame_dig 2 // amountOut: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	txn Sender
	callsub transferXTo
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:441
	// assert(this.transferXTo(this.manager.value, platformFee))
	frame_dig 3 // platformFee: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	byte 0x6d616e61676572 // "manager"
	app_global_get
	callsub transferXTo
	assert

	// src/contracts/AlgoArc200PoolV02.algo.ts:444
	// innerTxnsFee = innerTxnsCount * globals.minTxnFee
	int 2
	global MinTxnFee
	*
	frame_bury 4 // innerTxnsFee: uint64

	// src/contracts/AlgoArc200PoolV02.algo.ts:445
	// finalBalanceX = balanceX - amountOut - platformFee - <uint256>innerTxnsFee
	frame_dig 1 // balanceX: unsafe uint256
	frame_dig 2 // amountOut: unsafe uint256
	b-
	frame_dig 3 // platformFee: unsafe uint256
	b-
	frame_dig 4 // innerTxnsFee: uint64
	itob
	b-
	frame_bury 5 // finalBalanceX: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:446
	// finalBalanceY = balanceY
	frame_dig 0 // balanceY: unsafe uint256
	frame_bury 6 // finalBalanceY: unsafe uint256

	// src/contracts/AlgoArc200PoolV02.algo.ts:448
	// this.Swap.log({
	// 			sender: this.txn.sender,
	// 			inAmts: [0, amountY],
	// 			outAmts: [amountOut, 0],
	// 			poolBals: [finalBalanceX, finalBalanceY],
	// 		})
	byte 0x7048d0ea // Swap(address,(uint256,uint256),(uint256,uint256),(uint256,uint256))
	txn Sender
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	frame_dig -1 // amountY: uint256
	concat
	concat
	frame_dig 2 // amountOut: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	concat
	concat
	frame_dig 5 // finalBalanceX: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	frame_dig 6 // finalBalanceY: unsafe uint256
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	concat
	concat
	log

	// src/contracts/AlgoArc200PoolV02.algo.ts:455
	// this.updateRatio()
	callsub updateRatio

	// src/contracts/AlgoArc200PoolV02.algo.ts:457
	// return amountOut;
	frame_dig 2 // amountOut: unsafe uint256

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 6
	retsub

create_NoOp:
	method "createApplication(address)void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "setManager(address)bool"
	method "initialize(byte[32],byte[8],uint8,uint256,address)void"
	method "arc200_name()byte[32]"
	method "arc200_symbol()byte[8]"
	method "arc200_decimals()uint8"
	method "arc200_totalSupply()uint256"
	method "arc200_balanceOf(address)uint256"
	method "hasBalance(address)bool"
	method "hasAllowance(address,address)bool"
	method "arc200_allowance(address,address)uint256"
	method "arc200_transfer(address,uint256)bool"
	method "arc200_approve(address,uint256)bool"
	method "arc200_transferFrom(address,address,uint256)bool"
	method "poolInitialize(byte[32],byte[8],application)void"
	method "setFeeController(address)bool"
	method "setFees(uint256)bool"
	method "setPlatformFees(uint256)bool"
	method "registerOnline(byte[],byte[],byte[],uint64,uint64,uint64)void"
	method "registerOffline()void"
	method "getRatio()uint256"
	method "addLiquidity(pay,uint256)bool"
	method "removeLiquidity(uint256)bool"
	method "swapXtoY(pay,uint256)uint256"
	method "swapYtoX(uint256,uint256)uint256"
	txna ApplicationArgs 0
	match abi_route_setManager abi_route_initialize abi_route_arc200_name abi_route_arc200_symbol abi_route_arc200_decimals abi_route_arc200_totalSupply abi_route_arc200_balanceOf abi_route_hasBalance abi_route_hasAllowance abi_route_arc200_allowance abi_route_arc200_transfer abi_route_arc200_approve abi_route_arc200_transferFrom abi_route_poolInitialize abi_route_setFeeController abi_route_setFees abi_route_setPlatformFees abi_route_registerOnline abi_route_registerOffline abi_route_getRatio abi_route_addLiquidity abi_route_removeLiquidity abi_route_swapXtoY abi_route_swapYtoX
	err

call_UpdateApplication:
	method "updateApplication()void"
	txna ApplicationArgs 0
	match abi_route_updateApplication
	err

call_DeleteApplication:
	method "deleteApplication()void"
	txna ApplicationArgs 0
	match abi_route_deleteApplication
	err