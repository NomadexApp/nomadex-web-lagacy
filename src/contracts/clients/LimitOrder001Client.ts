/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils';
import type {
	AppCallTransactionResult,
	AppCallTransactionResultOfType,
	CoreAppCallArgs,
	RawAppCallArgs,
	AppState,
	TealTemplateParams,
	ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app';
import type {
	AppClientCallCoreParams,
	AppClientCompilationParams,
	AppClientDeployCoreParams,
	AppDetails,
	ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client';
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec';
import type {
	SendTransactionResult,
	TransactionToSign,
	SendTransactionFrom,
} from '@algorandfoundation/algokit-utils/types/transaction';
import type { ABIResult, TransactionWithSigner, modelsv2 } from 'algosdk';
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk';
export const APP_SPEC: AppSpec = {
	hints: {
		'createApplication(uint256)void': {
			call_config: {
				no_op: 'CREATE',
			},
		},
		'updateApplication()void': {
			call_config: {
				update_application: 'CALL',
			},
		},
		'setFee(uint256)void': {
			call_config: {
				no_op: 'CALL',
			},
		},
		'createAlgoToArc200Order(pay,application,uint256)void': {
			call_config: {
				no_op: 'CALL',
			},
		},
		'createArc200ToAlgoOrder(appl,uint256,uint256)void': {
			call_config: {
				no_op: 'CALL',
			},
		},
		'fillAlgoToArc200Order(appl,uint256,uint256)void': {
			call_config: {
				no_op: 'CALL',
			},
		},
		'fillArc200ToAlgoOrder(pay,uint256)void': {
			call_config: {
				no_op: 'CALL',
			},
		},
	},
	bare_call_config: {
		no_op: 'NEVER',
		opt_in: 'NEVER',
		close_out: 'NEVER',
		update_application: 'NEVER',
		delete_application: 'NEVER',
	},
	schema: {
		local: {
			declared: {},
			reserved: {},
		},
		global: {
			declared: {},
			reserved: {},
		},
	},
	state: {
		global: {
			num_byte_slices: 0,
			num_uints: 0,
		},
		local: {
			num_byte_slices: 0,
			num_uints: 0,
		},
	},
	source: {
		approval:
			'I3ByYWdtYSB2ZXJzaW9uIDkKCi8vIFRoaXMgVEVBTCB3YXMgZ2VuZXJhdGVkIGJ5IFRFQUxTY3JpcHQgdjAuNjguMQovLyBodHRwczovL2dpdGh1Yi5jb20vYWxnb3JhbmRmb3VuZGF0aW9uL1RFQUxTY3JpcHQKCi8vIFRoaXMgY29udHJhY3QgaXMgY29tcGxpYW50IHdpdGggYW5kL29yIGltcGxlbWVudHMgdGhlIGZvbGxvd2luZyBBUkNzOiBbIEFSQzQgXQoKLy8gVGhlIGZvbGxvd2luZyB0ZW4gbGluZXMgb2YgVEVBTCBoYW5kbGUgaW5pdGlhbCBwcm9ncmFtIGZsb3cKLy8gVGhpcyBwYXR0ZXJuIGlzIHVzZWQgdG8gbWFrZSBpdCBlYXN5IGZvciBhbnlvbmUgdG8gcGFyc2UgdGhlIHN0YXJ0IG9mIHRoZSBwcm9ncmFtIGFuZCBkZXRlcm1pbmUgaWYgYSBzcGVjaWZpYyBhY3Rpb24gaXMgYWxsb3dlZAovLyBIZXJlLCBhY3Rpb24gcmVmZXJzIHRvIHRoZSBPbkNvbXBsZXRlIGluIGNvbWJpbmF0aW9uIHdpdGggd2hldGhlciB0aGUgYXBwIGlzIGJlaW5nIGNyZWF0ZWQgb3IgY2FsbGVkCi8vIEV2ZXJ5IHBvc3NpYmxlIGFjdGlvbiBmb3IgdGhpcyBjb250cmFjdCBpcyByZXByZXNlbnRlZCBpbiB0aGUgc3dpdGNoIHN0YXRlbWVudAovLyBJZiB0aGUgYWN0aW9uIGlzIG5vdCBpbXBsbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlc3BlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCmludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCBjYWxsX05vT3AgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgY2FsbF9VcGRhdGVBcHBsaWNhdGlvbiBOT1RfSU1QTEVNRU5URUQgY3JlYXRlX05vT3AgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRAoKTk9UX0lNUExFTUVOVEVEOgoJZXJyCgphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb246CgkvLyBvd25lckZlZTogdWludDI1NgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgY3JlYXRlQXBwbGljYXRpb24odWludDI1Nil2b2lkCgljYWxsc3ViIGNyZWF0ZUFwcGxpY2F0aW9uCglpbnQgMQoJcmV0dXJuCgovLyBjcmVhdGVBcHBsaWNhdGlvbih1aW50MjU2KXZvaWQKY3JlYXRlQXBwbGljYXRpb246Cglwcm90byAxIDAKCgkvLyBzcmMvY29udHJhY3RzL0xpbWl0T3JkZXJzLmFsZ28udHM6MjIKCS8vIHRoaXMub3duZXIudmFsdWUgPSB0aGlzLnR4bi5zZW5kZXIKCWJ5dGUgMHg2Zjc3NmU2NTcyIC8vICJvd25lciIKCXR4biBTZW5kZXIKCWJveF9wdXQKCgkvLyBzcmMvY29udHJhY3RzL0xpbWl0T3JkZXJzLmFsZ28udHM6MjMKCS8vIHRoaXMub3JkZXJDb3VudGVyLnZhbHVlID0gPHVpbnQ8MjU2Pj4wCglieXRlIDB4NmY3MjY0NjU3MjQzNmY3NTZlNzQ2NTcyIC8vICJvcmRlckNvdW50ZXIiCglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAoJYm94X3B1dAoKCS8vIHNyYy9jb250cmFjdHMvTGltaXRPcmRlcnMuYWxnby50czoyNAoJLy8gdGhpcy5mZWUudmFsdWUgPSBvd25lckZlZQoJYnl0ZSAweDY2NjU2NSAvLyAiZmVlIgoJZnJhbWVfZGlnIC0xIC8vIG93bmVyRmVlOiB1aW50PDI1Nj4KCWJveF9wdXQKCXJldHN1YgoKYWJpX3JvdXRlX3VwZGF0ZUFwcGxpY2F0aW9uOgoJLy8gZXhlY3V0ZSB1cGRhdGVBcHBsaWNhdGlvbigpdm9pZAoJY2FsbHN1YiB1cGRhdGVBcHBsaWNhdGlvbgoJaW50IDEKCXJldHVybgoKLy8gdXBkYXRlQXBwbGljYXRpb24oKXZvaWQKdXBkYXRlQXBwbGljYXRpb246Cglwcm90byAwIDAKCgkvLyBzcmMvY29udHJhY3RzL0xpbWl0T3JkZXJzLmFsZ28udHM6MjgKCS8vIGFzc2VydCh0aGlzLm93bmVyLnZhbHVlID09PSB0aGlzLnR4bi5zZW5kZXIpCglieXRlIDB4NmY3NzZlNjU3MiAvLyAib3duZXIiCglib3hfZ2V0Cglhc3NlcnQKCXR4biBTZW5kZXIKCT09Cglhc3NlcnQKCXJldHN1YgoKYWJpX3JvdXRlX3NldEZlZToKCS8vIG93bmVyRmVlOiB1aW50MjU2Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBzZXRGZWUodWludDI1Nil2b2lkCgljYWxsc3ViIHNldEZlZQoJaW50IDEKCXJldHVybgoKLy8gc2V0RmVlKHVpbnQyNTYpdm9pZApzZXRGZWU6Cglwcm90byAxIDAKCgkvLyBzcmMvY29udHJhY3RzL0xpbWl0T3JkZXJzLmFsZ28udHM6MzIKCS8vIHRoaXMuZmVlLnZhbHVlID0gb3duZXJGZWUKCWJ5dGUgMHg2NjY1NjUgLy8gImZlZSIKCWZyYW1lX2RpZyAtMSAvLyBvd25lckZlZTogdWludDwyNTY+Cglib3hfcHV0CglyZXRzdWIKCi8vIGdldEJhbGFuY2UoKXVpbnQ2NAovLwovLyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKZ2V0QmFsYW5jZToKCXByb3RvIDAgMQoKCS8vIHNyYy9jb250cmFjdHMvTGltaXRPcmRlcnMuYWxnby50czozNwoJLy8gcmV0dXJuIHRoaXMuYXBwLmFkZHJlc3MuYmFsYW5jZTsKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglhY2N0X3BhcmFtc19nZXQgQWNjdEJhbGFuY2UKCWFzc2VydAoJcmV0c3ViCgovLyB0cmFuc2ZlclRvKHVpbnQ2NCxhZGRyZXNzKWJvb2wKdHJhbnNmZXJUbzoKCXByb3RvIDIgMQoKCS8vIHNyYy9jb250cmFjdHMvTGltaXRPcmRlcnMuYWxnby50czo0MQoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgICAgICAgc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgcmVjZWl2ZXI6IHRvLAoJLy8gICAgICAgICAgICAgYW1vdW50OiBhbW91bnQsCgkvLyAgICAgICAgICAgICBmZWU6IDEwMDAKCS8vICAgICAgICAgfSkKCWl0eG5fYmVnaW4KCWludCBwYXkKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBzcmMvY29udHJhY3RzL0xpbWl0T3JkZXJzLmFsZ28udHM6NDIKCS8vIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gc3JjL2NvbnRyYWN0cy9MaW1pdE9yZGVycy5hbGdvLnRzOjQzCgkvLyByZWNlaXZlcjogdG8KCWZyYW1lX2RpZyAtMSAvLyB0bzogQWRkcmVzcwoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIHNyYy9jb250cmFjdHMvTGltaXRPcmRlcnMuYWxnby50czo0NAoJLy8gYW1vdW50OiBhbW91bnQKCWZyYW1lX2RpZyAtMiAvLyBhbW91bnQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBzcmMvY29udHJhY3RzL0xpbWl0T3JkZXJzLmFsZ28udHM6NDUKCS8vIGZlZTogMTAwMAoJaW50IDEwMDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIHNyYy9jb250cmFjdHMvTGltaXRPcmRlcnMuYWxnby50czo0NwoJLy8gcmV0dXJuIHRydWU7CglpbnQgMQoJcmV0c3ViCgovLyBnZXRBcmMyMDBCYWxhbmNlKGFwcGxpY2F0aW9uKXVpbnQ2NApnZXRBcmMyMDBCYWxhbmNlOgoJcHJvdG8gMSAxCgoJLy8gc3JjL2NvbnRyYWN0cy9MaW1pdE9yZGVycy5hbGdvLnRzOjUxCgkvLyByZXR1cm4gPHVpbnQ2ND5zZW5kTWV0aG9kQ2FsbDxbQWRkcmVzc10sIHVpbnQ8MjU2Pj4oewoJLy8gICAgICAgICAgICAgc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgbmFtZTogJ2FyYzIwMF9iYWxhbmNlT2YnLAoJLy8gICAgICAgICAgICAgYXBwbGljYXRpb25JRDogYXJjMjAwSWQsCgkvLyAgICAgICAgICAgICBtZXRob2RBcmdzOiBbdGhpcy5hcHAuYWRkcmVzc10sCgkvLyAgICAgICAgICAgICBmZWU6IDEwMDAsCgkvLyAgICAgICAgIH0pOwoJaXR4bl9iZWdpbgoJaW50IGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCW1ldGhvZCAiYXJjMjAwX2JhbGFuY2VPZihhZGRyZXNzKXVpbnQyNTYiCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIHNyYy9jb250cmFjdHMvTGltaXRPcmRlcnMuYWxnby50czo1MgoJLy8gc2VuZGVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBTZW5kZXIKCgkvLyBzcmMvY29udHJhY3RzL0xpbWl0T3JkZXJzLmFsZ28udHM6NTQKCS8vIGFwcGxpY2F0aW9uSUQ6IGFyYzIwMElkCglmcmFtZV9kaWcgLTEgLy8gYXJjMjAwSWQ6IEFwcGxpY2F0aW9uCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKCgkvLyBzcmMvY29udHJhY3RzL0xpbWl0T3JkZXJzLmFsZ28udHM6NTUKCS8vIG1ldGhvZEFyZ3M6IFt0aGlzLmFwcC5hZGRyZXNzXQoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gc3JjL2NvbnRyYWN0cy9MaW1pdE9yZGVycy5hbGdvLnRzOjU2CgkvLyBmZWU6IDEwMDAKCWludCAxMDAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCWl0eG4gTnVtTG9ncwoJaW50IDEKCS0KCWl0eG5hcyBMb2dzCglleHRyYWN0IDQgMAoJZHVwCgliaXRsZW4KCWludCA2NAoJPD0KCWFzc2VydAoJZXh0cmFjdCAyNCA4CglidG9pCglyZXRzdWIKCi8vIGFyYzIwMFRyYW5zZmVyVG8odWludDY0LGFkZHJlc3MsYXBwbGljYXRpb24pYm9vbAphcmMyMDBUcmFuc2ZlclRvOgoJcHJvdG8gMyAxCgoJLy8gc3JjL2NvbnRyYWN0cy9MaW1pdE9yZGVycy5hbGdvLnRzOjYxCgkvLyByZXR1cm4gc2VuZE1ldGhvZENhbGw8W0FkZHJlc3MsIHVpbnQ8MjU2Pl0sIGJvb2xlYW4+KHsKCS8vICAgICAgICAgICAgIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICAgIG5hbWU6ICdhcmMyMDBfdHJhbnNmZXInLAoJLy8gICAgICAgICAgICAgYXBwbGljYXRpb25JRDogYXJjMjAwSWQsCgkvLyAgICAgICAgICAgICBtZXRob2RBcmdzOiBbdG8sIDx1aW50PDI1Nj4+YW1vdW50XSwKCS8vICAgICAgICAgICAgIGZlZTogMTAwMAoJLy8gICAgICAgICB9KTsKCWl0eG5fYmVnaW4KCWludCBhcHBsCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgltZXRob2QgImFyYzIwMF90cmFuc2ZlcihhZGRyZXNzLHVpbnQyNTYpYm9vbCIKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gc3JjL2NvbnRyYWN0cy9MaW1pdE9yZGVycy5hbGdvLnRzOjYyCgkvLyBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIFNlbmRlcgoKCS8vIHNyYy9jb250cmFjdHMvTGltaXRPcmRlcnMuYWxnby50czo2NAoJLy8gYXBwbGljYXRpb25JRDogYXJjMjAwSWQKCWZyYW1lX2RpZyAtMSAvLyBhcmMyMDBJZDogQXBwbGljYXRpb24KCWl0eG5fZmllbGQgQXBwbGljYXRpb25JRAoKCS8vIHNyYy9jb250cmFjdHMvTGltaXRPcmRlcnMuYWxnby50czo2NQoJLy8gbWV0aG9kQXJnczogW3RvLCA8dWludDwyNTY+PmFtb3VudF0KCWZyYW1lX2RpZyAtMiAvLyB0bzogQWRkcmVzcwoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWZyYW1lX2RpZyAtMyAvLyBhbW91bnQ6IHVpbnQ2NAoJaXRvYgoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBzcmMvY29udHJhY3RzL0xpbWl0T3JkZXJzLmFsZ28udHM6NjYKCS8vIGZlZTogMTAwMAoJaW50IDEwMDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJaXR4biBOdW1Mb2dzCglpbnQgMQoJLQoJaXR4bmFzIExvZ3MKCWV4dHJhY3QgNCAwCglpbnQgMAoJZ2V0Yml0CglyZXRzdWIKCi8vIGFyYzIwMFRyYW5mZXJGcm9tKHVpbnQ2NCxhZGRyZXNzLGFkZHJlc3MsYXBwbGljYXRpb24pYm9vbAphcmMyMDBUcmFuZmVyRnJvbToKCXByb3RvIDQgMQoKCS8vIHNyYy9jb250cmFjdHMvTGltaXRPcmRlcnMuYWxnby50czo3MQoJLy8gcmV0dXJuIHNlbmRNZXRob2RDYWxsPFtBZGRyZXNzLCBBZGRyZXNzLCB1aW50PDI1Nj5dLCBib29sZWFuPih7CgkvLyAgICAgICAgICAgICBzZW5kZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgICAgICBuYW1lOiAnYXJjMjAwX3RyYW5zZmVyRnJvbScsCgkvLyAgICAgICAgICAgICBhcHBsaWNhdGlvbklEOiBhcmMyMDBJZCwKCS8vICAgICAgICAgICAgIG1ldGhvZEFyZ3M6IFtmcm9tLCB0bywgPHVpbnQ8MjU2Pj5hbW91bnRdLAoJLy8gICAgICAgICAgICAgZmVlOiAxMDAwCgkvLyAgICAgICAgIH0pOwoJaXR4bl9iZWdpbgoJaW50IGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCW1ldGhvZCAiYXJjMjAwX3RyYW5zZmVyRnJvbShhZGRyZXNzLGFkZHJlc3MsdWludDI1Nilib29sIgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCgkvLyBzcmMvY29udHJhY3RzL0xpbWl0T3JkZXJzLmFsZ28udHM6NzIKCS8vIHNlbmRlcjogdGhpcy5hcHAuYWRkcmVzcwoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWl0eG5fZmllbGQgU2VuZGVyCgoJLy8gc3JjL2NvbnRyYWN0cy9MaW1pdE9yZGVycy5hbGdvLnRzOjc0CgkvLyBhcHBsaWNhdGlvbklEOiBhcmMyMDBJZAoJZnJhbWVfZGlnIC0xIC8vIGFyYzIwMElkOiBBcHBsaWNhdGlvbgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gc3JjL2NvbnRyYWN0cy9MaW1pdE9yZGVycy5hbGdvLnRzOjc1CgkvLyBtZXRob2RBcmdzOiBbZnJvbSwgdG8sIDx1aW50PDI1Nj4+YW1vdW50XQoJZnJhbWVfZGlnIC0yIC8vIGZyb206IEFkZHJlc3MKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCglmcmFtZV9kaWcgLTMgLy8gdG86IEFkZHJlc3MKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCglmcmFtZV9kaWcgLTQgLy8gYW1vdW50OiB1aW50NjQKCWl0b2IKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCgoJLy8gc3JjL2NvbnRyYWN0cy9MaW1pdE9yZGVycy5hbGdvLnRzOjc2CgkvLyBmZWU6IDEwMDAKCWludCAxMDAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCWl0eG4gTnVtTG9ncwoJaW50IDEKCS0KCWl0eG5hcyBMb2dzCglleHRyYWN0IDQgMAoJaW50IDAKCWdldGJpdAoJcmV0c3ViCgphYmlfcm91dGVfY3JlYXRlQWxnb1RvQXJjMjAwT3JkZXI6CgkvLyBhcmMyMDBBbW91bnQ6IHVpbnQyNTYKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnQgMzIKCT09Cglhc3NlcnQKCgkvLyBhcmMyMDBJZDogYXBwbGljYXRpb24KCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCXR4bmFzIEFwcGxpY2F0aW9ucwoKCS8vIGFsZ29QYXlUeG46IHBheQoJdHhuIEdyb3VwSW5kZXgKCWludCAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnQgcGF5Cgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBjcmVhdGVBbGdvVG9BcmMyMDBPcmRlcih1aW50MjU2LGFwcGxpY2F0aW9uLHBheSl2b2lkCgljYWxsc3ViIGNyZWF0ZUFsZ29Ub0FyYzIwME9yZGVyCglpbnQgMQoJcmV0dXJuCgovLyBjcmVhdGVBbGdvVG9BcmMyMDBPcmRlcih1aW50MjU2LGFwcGxpY2F0aW9uLHBheSl2b2lkCmNyZWF0ZUFsZ29Ub0FyYzIwME9yZGVyOgoJcHJvdG8gMyAwCgoJLy8gc3JjL2NvbnRyYWN0cy9MaW1pdE9yZGVycy5hbGdvLnRzOjEwMAoJLy8gdmVyaWZ5UGF5VHhuKGFsZ29QYXlUeG4sIHsKCS8vICAgICAgICAgICAgIGFtb3VudDogeyBncmVhdGVyVGhhbjogMCB9LAoJLy8gICAgICAgICAgICAgc2VuZGVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICAgICAgICByZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgICAgICAgIHJla2V5VG86IGdsb2JhbHMuemVyb0FkZHJlc3MsCgkvLyAgICAgICAgICAgICBjbG9zZVJlbWFpbmRlclRvOiBnbG9iYWxzLnplcm9BZGRyZXNzLAoJLy8gICAgICAgICB9KQoJLy8gdmVyaWZ5IGFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIGFsZ29QYXlUeG46IFBheVR4bgoJZ3R4bnMgQW1vdW50CglpbnQgMAoJPgoJYXNzZXJ0CgoJLy8gdmVyaWZ5IHNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIGFsZ29QYXlUeG46IFBheVR4bgoJZ3R4bnMgU2VuZGVyCgl0eG4gU2VuZGVyCgk9PQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IHJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gYWxnb1BheVR4bjogUGF5VHhuCglndHhucyBSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyB2ZXJpZnkgcmVrZXlUbwoJZnJhbWVfZGlnIC0xIC8vIGFsZ29QYXlUeG46IFBheVR4bgoJZ3R4bnMgUmVrZXlUbwoJZ2xvYmFsIFplcm9BZGRyZXNzCgk9PQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGNsb3NlUmVtYWluZGVyVG8KCWZyYW1lX2RpZyAtMSAvLyBhbGdvUGF5VHhuOiBQYXlUeG4KCWd0eG5zIENsb3NlUmVtYWluZGVyVG8KCWdsb2JhbCBaZXJvQWRkcmVzcwoJPT0KCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvTGltaXRPcmRlcnMuYWxnby50czoxMDgKCS8vIGFzc2VydCghdGhpcy5vcmRlcmJvb2sodGhpcy5vcmRlckNvdW50ZXIudmFsdWUpLmV4aXN0cykKCWJ5dGUgMHg2ZjcyNjQ2NTcyNDM2Zjc1NmU3NDY1NzIgLy8gIm9yZGVyQ291bnRlciIKCWJveF9nZXQKCWFzc2VydAoJYm94X2xlbgoJc3dhcAoJcG9wCgkhCglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0xpbWl0T3JkZXJzLmFsZ28udHM6MTEwCgkvLyB0aGlzLm9yZGVyYm9vayh0aGlzLm9yZGVyQ291bnRlci52YWx1ZSkudmFsdWUgPSB7CgkvLyAgICAgICAgICAgICBtYWtlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgICAgICAgYWxnb0Ftb3VudDogPHVpbnQ8MjU2Pj5hbGdvUGF5VHhuLmFtb3VudCwKCS8vICAgICAgICAgICAgIGFyYzIwMElkOiBhcmMyMDBJZCwKCS8vICAgICAgICAgICAgIGFyYzIwMEFtb3VudDogYXJjMjAwQW1vdW50LAoJLy8gICAgICAgICAgICAgaXNEaXJlY3Rpb25Gcm9tQXJjMjAwVG9BbGdvOiBmYWxzZQoJLy8gICAgICAgICB9CglieXRlIDB4NmY3MjY0NjU3MjQzNmY3NTZlNzQ2NTcyIC8vICJvcmRlckNvdW50ZXIiCglib3hfZ2V0Cglhc3NlcnQKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBhbGdvUGF5VHhuOiBQYXlUeG4KCWd0eG5zIEFtb3VudAoJaXRvYgoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJY29uY2F0CglmcmFtZV9kaWcgLTIgLy8gYXJjMjAwSWQ6IEFwcGxpY2F0aW9uCglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtMyAvLyBhcmMyMDBBbW91bnQ6IHVpbnQ8MjU2PgoJY29uY2F0CglieXRlIDB4MDAKCWludCAwCglkdXAKCXNldGJpdAoJYm94X3B1dAoKCS8vIHNyYy9jb250cmFjdHMvTGltaXRPcmRlcnMuYWxnby50czoxMTgKCS8vIHRoaXMuUGxhY2VPcmRlci5sb2coewoJLy8gICAgICAgICAgICAgb3JkZXJJZDogdGhpcy5vcmRlckNvdW50ZXIudmFsdWUsCgkvLyAgICAgICAgICAgICBtYWtlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgICAgICAgYWxnb0Ftb3VudDogPHVpbnQ8MjU2Pj5hbGdvUGF5VHhuLmFtb3VudCwKCS8vICAgICAgICAgICAgIGFyYzIwMEFtb3VudDogYXJjMjAwQW1vdW50LAoJLy8gICAgICAgICAgICAgb3JkZXJEaXJlY3Rpb246IDAKCS8vICAgICAgICAgfSkKCWJ5dGUgMHg4Y2U2NWUxNSAvLyBQbGFjZU9yZGVyKHVpbnQyNTYsYWRkcmVzcyx1aW50MjU2LHVpbnQyNTYsdWludDgpCglieXRlIDB4NmY3MjY0NjU3MjQzNmY3NTZlNzQ2NTcyIC8vICJvcmRlckNvdW50ZXIiCglib3hfZ2V0Cglhc3NlcnQKCXR4biBTZW5kZXIKCWNvbmNhdAoJZnJhbWVfZGlnIC0xIC8vIGFsZ29QYXlUeG46IFBheVR4bgoJZ3R4bnMgQW1vdW50CglpdG9iCglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCgljb25jYXQKCWZyYW1lX2RpZyAtMyAvLyBhcmMyMDBBbW91bnQ6IHVpbnQ8MjU2PgoJY29uY2F0CglieXRlIDB4MDAKCWNvbmNhdAoJY29uY2F0Cglsb2cKCgkvLyBzcmMvY29udHJhY3RzL0xpbWl0T3JkZXJzLmFsZ28udHM6MTI2CgkvLyB0aGlzLm9yZGVyQ291bnRlci52YWx1ZSArPSAxCglieXRlIDB4NmY3MjY0NjU3MjQzNmY3NTZlNzQ2NTcyIC8vICJvcmRlckNvdW50ZXIiCglib3hfZ2V0Cglhc3NlcnQKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxCgliKwoJYnl0ZSAweDZmNzI2NDY1NzI0MzZmNzU2ZTc0NjU3MiAvLyAib3JkZXJDb3VudGVyIgoJc3dhcAoJYm94X3B1dAoJcmV0c3ViCgphYmlfcm91dGVfY3JlYXRlQXJjMjAwVG9BbGdvT3JkZXI6CgkvLyBhbGdvQW1vdW50OiB1aW50MjU2Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gYXJjMjAwQW1vdW50OiB1aW50MjU2Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gYXJjMjAwQXBwcm92ZVR4bjogYXBwbAoJdHhuIEdyb3VwSW5kZXgKCWludCAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnQgYXBwbAoJPT0KCWFzc2VydAoKCS8vIGV4ZWN1dGUgY3JlYXRlQXJjMjAwVG9BbGdvT3JkZXIodWludDI1Nix1aW50MjU2LGFwcGwpdm9pZAoJY2FsbHN1YiBjcmVhdGVBcmMyMDBUb0FsZ29PcmRlcgoJaW50IDEKCXJldHVybgoKLy8gY3JlYXRlQXJjMjAwVG9BbGdvT3JkZXIodWludDI1Nix1aW50MjU2LGFwcGwpdm9pZApjcmVhdGVBcmMyMDBUb0FsZ29PcmRlcjoKCXByb3RvIDMgMAoKCS8vIHNyYy9jb250cmFjdHMvTGltaXRPcmRlcnMuYWxnby50czoxMzAKCS8vIHZlcmlmeUFwcENhbGxUeG4oYXJjMjAwQXBwcm92ZVR4biwgewoJLy8gICAgICAgICAgICAgc2VuZGVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICAgICAgICByZWtleVRvOiBnbG9iYWxzLnplcm9BZGRyZXNzLAoJLy8gICAgICAgICB9KQoJLy8gdmVyaWZ5IHNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIGFyYzIwMEFwcHJvdmVUeG46IEFwcENhbGxUeG4KCWd0eG5zIFNlbmRlcgoJdHhuIFNlbmRlcgoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSByZWtleVRvCglmcmFtZV9kaWcgLTEgLy8gYXJjMjAwQXBwcm92ZVR4bjogQXBwQ2FsbFR4bgoJZ3R4bnMgUmVrZXlUbwoJZ2xvYmFsIFplcm9BZGRyZXNzCgk9PQoJYXNzZXJ0CgoJLy8gc3JjL2NvbnRyYWN0cy9MaW1pdE9yZGVycy5hbGdvLnRzOjEzNQoJLy8gYXNzZXJ0KCF0aGlzLm9yZGVyYm9vayh0aGlzLm9yZGVyQ291bnRlci52YWx1ZSkuZXhpc3RzKQoJYnl0ZSAweDZmNzI2NDY1NzI0MzZmNzU2ZTc0NjU3MiAvLyAib3JkZXJDb3VudGVyIgoJYm94X2dldAoJYXNzZXJ0Cglib3hfbGVuCglzd2FwCglwb3AKCSEKCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvTGltaXRPcmRlcnMuYWxnby50czoxMzcKCS8vIHRoaXMuYXJjMjAwVHJhbmZlckZyb20oCgkvLyAgICAgICAgICAgICBhcmMyMDBBcHByb3ZlVHhuLmFwcGxpY2F0aW9uSUQsCgkvLyAgICAgICAgICAgICB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICAgICAgICB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgICAgICAgYXJjMjAwQW1vdW50CgkvLyAgICAgICAgICkKCWZyYW1lX2RpZyAtMiAvLyBhcmMyMDBBbW91bnQ6IHVpbnQ8MjU2PgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBhcmMyMDBBcHByb3ZlVHhuOiBBcHBDYWxsVHhuCglndHhucyBBcHBsaWNhdGlvbklECgljYWxsc3ViIGFyYzIwMFRyYW5mZXJGcm9tCgoJLy8gc3JjL2NvbnRyYWN0cy9MaW1pdE9yZGVycy5hbGdvLnRzOjE0NAoJLy8gdGhpcy5vcmRlcmJvb2sodGhpcy5vcmRlckNvdW50ZXIudmFsdWUpLnZhbHVlID0gewoJLy8gICAgICAgICAgICAgbWFrZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgICAgICAgIGFsZ29BbW91bnQ6IGFsZ29BbW91bnQsCgkvLyAgICAgICAgICAgICBhcmMyMDBJZDogYXJjMjAwQXBwcm92ZVR4bi5hcHBsaWNhdGlvbklELAoJLy8gICAgICAgICAgICAgYXJjMjAwQW1vdW50OiBhcmMyMDBBbW91bnQsCgkvLyAgICAgICAgICAgICBpc0RpcmVjdGlvbkZyb21BcmMyMDBUb0FsZ286IHRydWUKCS8vICAgICAgICAgfQoJYnl0ZSAweDZmNzI2NDY1NzI0MzZmNzU2ZTc0NjU3MiAvLyAib3JkZXJDb3VudGVyIgoJYm94X2dldAoJYXNzZXJ0Cgl0eG4gU2VuZGVyCglmcmFtZV9kaWcgLTMgLy8gYWxnb0Ftb3VudDogdWludDwyNTY+Cgljb25jYXQKCWZyYW1lX2RpZyAtMSAvLyBhcmMyMDBBcHByb3ZlVHhuOiBBcHBDYWxsVHhuCglndHhucyBBcHBsaWNhdGlvbklECglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtMiAvLyBhcmMyMDBBbW91bnQ6IHVpbnQ8MjU2PgoJY29uY2F0CglieXRlIDB4MDAKCWludCAwCglpbnQgMQoJc2V0Yml0Cglib3hfcHV0CgoJLy8gc3JjL2NvbnRyYWN0cy9MaW1pdE9yZGVycy5hbGdvLnRzOjE1MgoJLy8gdGhpcy5QbGFjZU9yZGVyLmxvZyh7CgkvLyAgICAgICAgICAgICBvcmRlcklkOiB0aGlzLm9yZGVyQ291bnRlci52YWx1ZSwKCS8vICAgICAgICAgICAgIG1ha2VyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICAgICAgICBhbGdvQW1vdW50OiBhbGdvQW1vdW50LAoJLy8gICAgICAgICAgICAgYXJjMjAwQW1vdW50OiBhcmMyMDBBbW91bnQsCgkvLyAgICAgICAgICAgICBvcmRlckRpcmVjdGlvbjogMQoJLy8gICAgICAgICB9KQoJYnl0ZSAweDhjZTY1ZTE1IC8vIFBsYWNlT3JkZXIodWludDI1NixhZGRyZXNzLHVpbnQyNTYsdWludDI1Nix1aW50OCkKCWJ5dGUgMHg2ZjcyNjQ2NTcyNDM2Zjc1NmU3NDY1NzIgLy8gIm9yZGVyQ291bnRlciIKCWJveF9nZXQKCWFzc2VydAoJdHhuIFNlbmRlcgoJY29uY2F0CglmcmFtZV9kaWcgLTMgLy8gYWxnb0Ftb3VudDogdWludDwyNTY+Cgljb25jYXQKCWZyYW1lX2RpZyAtMiAvLyBhcmMyMDBBbW91bnQ6IHVpbnQ8MjU2PgoJY29uY2F0CglieXRlIDB4MDEKCWNvbmNhdAoJY29uY2F0Cglsb2cKCgkvLyBzcmMvY29udHJhY3RzL0xpbWl0T3JkZXJzLmFsZ28udHM6MTYwCgkvLyB0aGlzLm9yZGVyQ291bnRlci52YWx1ZSArPSAxCglieXRlIDB4NmY3MjY0NjU3MjQzNmY3NTZlNzQ2NTcyIC8vICJvcmRlckNvdW50ZXIiCglib3hfZ2V0Cglhc3NlcnQKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxCgliKwoJYnl0ZSAweDZmNzI2NDY1NzI0MzZmNzU2ZTc0NjU3MiAvLyAib3JkZXJDb3VudGVyIgoJc3dhcAoJYm94X3B1dAoJcmV0c3ViCgphYmlfcm91dGVfZmlsbEFsZ29Ub0FyYzIwME9yZGVyOgoJLy8gYXJjMjAwQW1vdW50OiB1aW50MjU2Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50IDMyCgk9PQoJYXNzZXJ0CgoJLy8gb3JkZXJJZDogdWludDI1NgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGFyYzIwMEFwcHJvdmVUeG46IGFwcGwKCXR4biBHcm91cEluZGV4CglpbnQgMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50IGFwcGwKCT09Cglhc3NlcnQKCgkvLyBleGVjdXRlIGZpbGxBbGdvVG9BcmMyMDBPcmRlcih1aW50MjU2LHVpbnQyNTYsYXBwbCl2b2lkCgljYWxsc3ViIGZpbGxBbGdvVG9BcmMyMDBPcmRlcgoJaW50IDEKCXJldHVybgoKLy8gZmlsbEFsZ29Ub0FyYzIwME9yZGVyKHVpbnQyNTYsdWludDI1NixhcHBsKXZvaWQKZmlsbEFsZ29Ub0FyYzIwME9yZGVyOgoJcHJvdG8gMyAwCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCWJ5dGUgMHgKCWR1cG4gMwoKCS8vIHNyYy9jb250cmFjdHMvTGltaXRPcmRlcnMuYWxnby50czoxNjUKCS8vIGFzc2VydCh0aGlzLm9yZGVyYm9vayhvcmRlcklkKS5leGlzdHMpCglmcmFtZV9kaWcgLTIgLy8gb3JkZXJJZDogdWludDwyNTY+Cglib3hfbGVuCglzd2FwCglwb3AKCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvTGltaXRPcmRlcnMuYWxnby50czoxNjYKCS8vIGFzc2VydChhcmMyMDBBbW91bnQgPiAwKQoJZnJhbWVfZGlnIC0zIC8vIGFyYzIwMEFtb3VudDogdWludDwyNTY+CglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAoJYj4KCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvTGltaXRPcmRlcnMuYWxnby50czoxNjcKCS8vIGFzc2VydCh0aGlzLm9yZGVyYm9vayhvcmRlcklkKS52YWx1ZS5pc0RpcmVjdGlvbkZyb21BcmMyMDBUb0FsZ28gPT09IGZhbHNlKQoJZnJhbWVfZGlnIC0yIC8vIG9yZGVySWQ6IHVpbnQ8MjU2PgoJYm94X2dldAoJYXNzZXJ0CglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJaW50IDgzNgoJZ2V0Yml0CglpbnQgMAoJPT0KCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvTGltaXRPcmRlcnMuYWxnby50czoxNjkKCS8vIHZlcmlmeUFwcENhbGxUeG4oYXJjMjAwQXBwcm92ZVR4biwgewoJLy8gICAgICAgICAgICAgYXBwbGljYXRpb25JRDogdGhpcy5vcmRlcmJvb2sob3JkZXJJZCkudmFsdWUuYXJjMjAwSWQsCgkvLyAgICAgICAgICAgICBzZW5kZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgICAgICAgIHJla2V5VG86IGdsb2JhbHMuemVyb0FkZHJlc3MsCgkvLyAgICAgICAgIH0pCgkvLyB2ZXJpZnkgYXBwbGljYXRpb25JRAoJZnJhbWVfZGlnIC0xIC8vIGFyYzIwMEFwcHJvdmVUeG46IEFwcENhbGxUeG4KCWd0eG5zIEFwcGxpY2F0aW9uSUQKCWZyYW1lX2RpZyAtMiAvLyBvcmRlcklkOiB1aW50PDI1Nj4KCWJveF9nZXQKCWFzc2VydAoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWV4dHJhY3QgNjQgOAoJYnRvaQoJPT0KCWFzc2VydAoKCS8vIHZlcmlmeSBzZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBhcmMyMDBBcHByb3ZlVHhuOiBBcHBDYWxsVHhuCglndHhucyBTZW5kZXIKCXR4biBTZW5kZXIKCT09Cglhc3NlcnQKCgkvLyB2ZXJpZnkgcmVrZXlUbwoJZnJhbWVfZGlnIC0xIC8vIGFyYzIwMEFwcHJvdmVUeG46IEFwcENhbGxUeG4KCWd0eG5zIFJla2V5VG8KCWdsb2JhbCBaZXJvQWRkcmVzcwoJPT0KCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvTGltaXRPcmRlcnMuYWxnby50czoxNzUKCS8vIHRoaXMuYXJjMjAwVHJhbmZlckZyb20oCgkvLyAgICAgICAgICAgICB0aGlzLm9yZGVyYm9vayhvcmRlcklkKS52YWx1ZS5hcmMyMDBJZCwKCS8vICAgICAgICAgICAgIHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgICAgICAgIHRoaXMub3JkZXJib29rKG9yZGVySWQpLnZhbHVlLm1ha2VyLAoJLy8gICAgICAgICAgICAgYXJjMjAwQW1vdW50CgkvLyAgICAgICAgICkKCWZyYW1lX2RpZyAtMyAvLyBhcmMyMDBBbW91bnQ6IHVpbnQ8MjU2PgoJZnJhbWVfZGlnIC0yIC8vIG9yZGVySWQ6IHVpbnQ8MjU2PgoJYm94X2dldAoJYXNzZXJ0CglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCAwIDMyCgl0eG4gU2VuZGVyCglmcmFtZV9kaWcgLTIgLy8gb3JkZXJJZDogdWludDwyNTY+Cglib3hfZ2V0Cglhc3NlcnQKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDY0IDgKCWJ0b2kKCWNhbGxzdWIgYXJjMjAwVHJhbmZlckZyb20KCgkvLyBzcmMvY29udHJhY3RzL0xpbWl0T3JkZXJzLmFsZ28udHM6MTgyCgkvLyBhbW91bnRPZkFsZ29zID0gKAoJLy8gICAgICAgICAgICAgKGFyYzIwMEFtb3VudCAqIHRoaXMub3JkZXJib29rKG9yZGVySWQpLnZhbHVlLmFsZ29BbW91bnQpIC8gdGhpcy5vcmRlcmJvb2sob3JkZXJJZCkudmFsdWUuYXJjMjAwQW1vdW50CgkvLyAgICAgICAgICkKCWZyYW1lX2RpZyAtMyAvLyBhcmMyMDBBbW91bnQ6IHVpbnQ8MjU2PgoJZnJhbWVfZGlnIC0yIC8vIG9yZGVySWQ6IHVpbnQ8MjU2PgoJYm94X2dldAoJYXNzZXJ0CglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCAzMiAzMgoJYioKCWZyYW1lX2RpZyAtMiAvLyBvcmRlcklkOiB1aW50PDI1Nj4KCWJveF9nZXQKCWFzc2VydAoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWV4dHJhY3QgNzIgMzIKCWIvCglmcmFtZV9idXJ5IDAgLy8gYW1vdW50T2ZBbGdvczogdW5zYWZlIHVpbnQyNTYKCgkvLyBzcmMvY29udHJhY3RzL0xpbWl0T3JkZXJzLmFsZ28udHM6MTg2CgkvLyB0aGlzLm9yZGVyYm9vayhvcmRlcklkKS52YWx1ZS5hcmMyMDBBbW91bnQgLT0gYXJjMjAwQW1vdW50CglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJaW50IDcyCglmcmFtZV9kaWcgLTIgLy8gb3JkZXJJZDogdWludDwyNTY+Cglib3hfZ2V0Cglhc3NlcnQKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDcyIDMyCglmcmFtZV9kaWcgLTMgLy8gYXJjMjAwQW1vdW50OiB1aW50PDI1Nj4KCWItCglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnQgMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWZyYW1lX2RpZyAtMiAvLyBvcmRlcklkOiB1aW50PDI1Nj4KCWNvdmVyIDIKCWJveF9yZXBsYWNlCgoJLy8gc3JjL2NvbnRyYWN0cy9MaW1pdE9yZGVycy5hbGdvLnRzOjE4NwoJLy8gdGhpcy5vcmRlcmJvb2sob3JkZXJJZCkudmFsdWUuYWxnb0Ftb3VudCAtPSBhbW91bnRPZkFsZ29zCglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJaW50IDMyCglmcmFtZV9kaWcgLTIgLy8gb3JkZXJJZDogdWludDwyNTY+Cglib3hfZ2V0Cglhc3NlcnQKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDMyIDMyCglmcmFtZV9kaWcgMCAvLyBhbW91bnRPZkFsZ29zOiB1bnNhZmUgdWludDI1NgoJYi0KCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJZnJhbWVfZGlnIC0yIC8vIG9yZGVySWQ6IHVpbnQ8MjU2PgoJY292ZXIgMgoJYm94X3JlcGxhY2UKCgkvLyBzcmMvY29udHJhY3RzL0xpbWl0T3JkZXJzLmFsZ28udHM6MTg5CgkvLyBmZWUgPSAoKGFtb3VudE9mQWxnb3MgKiB0aGlzLmZlZS52YWx1ZSkgLyA8dWludDwyNTY+PlNDQUxFKQoJZnJhbWVfZGlnIDAgLy8gYW1vdW50T2ZBbGdvczogdW5zYWZlIHVpbnQyNTYKCWJ5dGUgMHg2NjY1NjUgLy8gImZlZSIKCWJveF9nZXQKCWFzc2VydAoJYioKCWJ5dGUgMHgwMDAwNWFmMzEwN2E0MDAwCglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCgliLwoJZnJhbWVfYnVyeSAxIC8vIGZlZTogdW5zYWZlIHVpbnQyNTYKCgkvLyBzcmMvY29udHJhY3RzL0xpbWl0T3JkZXJzLmFsZ28udHM6MTkxCgkvLyBhbGdvT3V0QW1vdW50ID0gYW1vdW50T2ZBbGdvcyAtIGZlZQoJZnJhbWVfZGlnIDAgLy8gYW1vdW50T2ZBbGdvczogdW5zYWZlIHVpbnQyNTYKCWZyYW1lX2RpZyAxIC8vIGZlZTogdW5zYWZlIHVpbnQyNTYKCWItCglmcmFtZV9idXJ5IDIgLy8gYWxnb091dEFtb3VudDogdW5zYWZlIHVpbnQyNTYKCgkvLyBzcmMvY29udHJhY3RzL0xpbWl0T3JkZXJzLmFsZ28udHM6MTkzCgkvLyB0aGlzLnRyYW5zZmVyVG8odGhpcy50eG4uc2VuZGVyLCBhbGdvT3V0QW1vdW50KQoJZnJhbWVfZGlnIDIgLy8gYWxnb091dEFtb3VudDogdW5zYWZlIHVpbnQyNTYKCXR4biBTZW5kZXIKCWNhbGxzdWIgdHJhbnNmZXJUbwoKCS8vIHNyYy9jb250cmFjdHMvTGltaXRPcmRlcnMuYWxnby50czoxOTUKCS8vIHRoaXMuRmlsbE9yZGVyLmxvZyh7CgkvLyAgICAgICAgICAgICBvcmRlcklkOiBvcmRlcklkLAoJLy8gICAgICAgICAgICAgbWFrZXI6IHRoaXMub3JkZXJib29rKG9yZGVySWQpLnZhbHVlLm1ha2VyLAoJLy8gICAgICAgICAgICAgdGFrZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgICAgICAgIGZpbGxlZEFsZ29BbW91bnQ6IGFtb3VudE9mQWxnb3MsCgkvLyAgICAgICAgICAgICBmaWxsZWRBcmMyMDBBbW91bnQ6IGFyYzIwMEFtb3VudCwKCS8vICAgICAgICAgICAgIG9yZGVyRGlyZWN0aW9uOiAwLAoJLy8gICAgICAgICAgICAgZmVlOiBmZWUKCS8vICAgICAgICAgfSkKCWJ5dGUgMHhmNDg4YjQ0ZSAvLyBGaWxsT3JkZXIodWludDI1NixhZGRyZXNzLGFkZHJlc3MsdWludDI1Nix1aW50MjU2LHVpbnQ4LHVpbnQyNTYpCglmcmFtZV9kaWcgLTIgLy8gb3JkZXJJZDogdWludDwyNTY+CglmcmFtZV9kaWcgLTIgLy8gb3JkZXJJZDogdWludDwyNTY+Cglib3hfZ2V0Cglhc3NlcnQKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDAgMzIKCWNvbmNhdAoJdHhuIFNlbmRlcgoJY29uY2F0CglmcmFtZV9kaWcgMCAvLyBhbW91bnRPZkFsZ29zOiB1bnNhZmUgdWludDI1NgoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCgljb25jYXQKCWZyYW1lX2RpZyAtMyAvLyBhcmMyMDBBbW91bnQ6IHVpbnQ8MjU2PgoJY29uY2F0CglieXRlIDB4MDAKCWNvbmNhdAoJZnJhbWVfZGlnIDEgLy8gZmVlOiB1bnNhZmUgdWludDI1NgoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCgljb25jYXQKCWNvbmNhdAoJbG9nCgoJLy8gaWYwX2NvbmRpdGlvbgoJLy8gc3JjL2NvbnRyYWN0cy9MaW1pdE9yZGVycy5hbGdvLnRzOjIwNQoJLy8gdGhpcy5vcmRlcmJvb2sob3JkZXJJZCkudmFsdWUuYWxnb0Ftb3VudCA8PSAxMDAwCglmcmFtZV9kaWcgLTIgLy8gb3JkZXJJZDogdWludDwyNTY+Cglib3hfZ2V0Cglhc3NlcnQKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDMyIDMyCglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDNlOAoJYjw9CglieiBpZjBfZW5kCgoJLy8gaWYwX2NvbnNlcXVlbnQKCS8vIHNyYy9jb250cmFjdHMvTGltaXRPcmRlcnMuYWxnby50czoyMDYKCS8vIHRoaXMub3JkZXJib29rKG9yZGVySWQpLmRlbGV0ZSgpCglmcmFtZV9kaWcgLTIgLy8gb3JkZXJJZDogdWludDwyNTY+Cglib3hfZGVsCgppZjBfZW5kOgoJcmV0c3ViCgphYmlfcm91dGVfZmlsbEFyYzIwMFRvQWxnb09yZGVyOgoJLy8gb3JkZXJJZDogdWludDI1NgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCWFzc2VydAoKCS8vIGFsZ29QYXlUeG46IHBheQoJdHhuIEdyb3VwSW5kZXgKCWludCAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnQgcGF5Cgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBmaWxsQXJjMjAwVG9BbGdvT3JkZXIodWludDI1NixwYXkpdm9pZAoJY2FsbHN1YiBmaWxsQXJjMjAwVG9BbGdvT3JkZXIKCWludCAxCglyZXR1cm4KCi8vIGZpbGxBcmMyMDBUb0FsZ29PcmRlcih1aW50MjU2LHBheSl2b2lkCmZpbGxBcmMyMDBUb0FsZ29PcmRlcjoKCXByb3RvIDIgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlIDB4CglkdXBuIDQKCgkvLyBzcmMvY29udHJhY3RzL0xpbWl0T3JkZXJzLmFsZ28udHM6MjEyCgkvLyBhc3NlcnQodGhpcy5vcmRlcmJvb2sob3JkZXJJZCkuZXhpc3RzKQoJZnJhbWVfZGlnIC0yIC8vIG9yZGVySWQ6IHVpbnQ8MjU2PgoJYm94X2xlbgoJc3dhcAoJcG9wCglhc3NlcnQKCgkvLyBzcmMvY29udHJhY3RzL0xpbWl0T3JkZXJzLmFsZ28udHM6MjEzCgkvLyBhc3NlcnQodGhpcy5vcmRlcmJvb2sob3JkZXJJZCkudmFsdWUuaXNEaXJlY3Rpb25Gcm9tQXJjMjAwVG9BbGdvID09PSB0cnVlKQoJZnJhbWVfZGlnIC0yIC8vIG9yZGVySWQ6IHVpbnQ8MjU2PgoJYm94X2dldAoJYXNzZXJ0CglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJaW50IDgzNgoJZ2V0Yml0CglpbnQgMQoJPT0KCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvTGltaXRPcmRlcnMuYWxnby50czoyMTUKCS8vIHZlcmlmeVBheVR4bihhbGdvUGF5VHhuLCB7CgkvLyAgICAgICAgICAgICBhbW91bnQ6IHsgZ3JlYXRlclRoYW46IDAgfSwKCS8vICAgICAgICAgICAgIHNlbmRlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgICAgICAgcmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICAgICAgICByZWtleVRvOiBnbG9iYWxzLnplcm9BZGRyZXNzLAoJLy8gICAgICAgICAgICAgY2xvc2VSZW1haW5kZXJUbzogZ2xvYmFscy56ZXJvQWRkcmVzcwoJLy8gICAgICAgICB9KQoJLy8gdmVyaWZ5IGFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIGFsZ29QYXlUeG46IFBheVR4bgoJZ3R4bnMgQW1vdW50CglpbnQgMAoJPgoJYXNzZXJ0CgoJLy8gdmVyaWZ5IHNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIGFsZ29QYXlUeG46IFBheVR4bgoJZ3R4bnMgU2VuZGVyCgl0eG4gU2VuZGVyCgk9PQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IHJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gYWxnb1BheVR4bjogUGF5VHhuCglndHhucyBSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyB2ZXJpZnkgcmVrZXlUbwoJZnJhbWVfZGlnIC0xIC8vIGFsZ29QYXlUeG46IFBheVR4bgoJZ3R4bnMgUmVrZXlUbwoJZ2xvYmFsIFplcm9BZGRyZXNzCgk9PQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGNsb3NlUmVtYWluZGVyVG8KCWZyYW1lX2RpZyAtMSAvLyBhbGdvUGF5VHhuOiBQYXlUeG4KCWd0eG5zIENsb3NlUmVtYWluZGVyVG8KCWdsb2JhbCBaZXJvQWRkcmVzcwoJPT0KCWFzc2VydAoKCS8vIHNyYy9jb250cmFjdHMvTGltaXRPcmRlcnMuYWxnby50czoyMjMKCS8vIGFtb3VudE9mQWxnb3MgPSA8dWludDwyNTY+PmFsZ29QYXlUeG4uYW1vdW50CglmcmFtZV9kaWcgLTEgLy8gYWxnb1BheVR4bjogUGF5VHhuCglndHhucyBBbW91bnQKCWl0b2IKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWZyYW1lX2J1cnkgMCAvLyBhbW91bnRPZkFsZ29zOiB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9MaW1pdE9yZGVycy5hbGdvLnRzOjIyNAoJLy8gZmVlID0gKChhbW91bnRPZkFsZ29zICogdGhpcy5mZWUudmFsdWUpIC8gPHVpbnQ8MjU2Pj5TQ0FMRSkKCWZyYW1lX2RpZyAwIC8vIGFtb3VudE9mQWxnb3M6IHVpbnQyNTYKCWJ5dGUgMHg2NjY1NjUgLy8gImZlZSIKCWJveF9nZXQKCWFzc2VydAoJYioKCWJ5dGUgMHgwMDAwNWFmMzEwN2E0MDAwCglkdXAKCWJpdGxlbgoJaW50IDI1NgoJPD0KCWFzc2VydAoJYnl0ZSAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCgliLwoJZnJhbWVfYnVyeSAxIC8vIGZlZTogdW5zYWZlIHVpbnQyNTYKCgkvLyBzcmMvY29udHJhY3RzL0xpbWl0T3JkZXJzLmFsZ28udHM6MjI1CgkvLyBhbGdvT3V0QW1vdW50ID0gYW1vdW50T2ZBbGdvcyAtIGZlZQoJZnJhbWVfZGlnIDAgLy8gYW1vdW50T2ZBbGdvczogdWludDI1NgoJZnJhbWVfZGlnIDEgLy8gZmVlOiB1bnNhZmUgdWludDI1NgoJYi0KCWZyYW1lX2J1cnkgMiAvLyBhbGdvT3V0QW1vdW50OiB1bnNhZmUgdWludDI1NgoKCS8vIHNyYy9jb250cmFjdHMvTGltaXRPcmRlcnMuYWxnby50czoyMjcKCS8vIHRoaXMudHJhbnNmZXJUbyh0aGlzLm9yZGVyYm9vayhvcmRlcklkKS52YWx1ZS5tYWtlciwgYWxnb091dEFtb3VudCkKCWZyYW1lX2RpZyAyIC8vIGFsZ29PdXRBbW91bnQ6IHVuc2FmZSB1aW50MjU2CglmcmFtZV9kaWcgLTIgLy8gb3JkZXJJZDogdWludDwyNTY+Cglib3hfZ2V0Cglhc3NlcnQKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDAgMzIKCWNhbGxzdWIgdHJhbnNmZXJUbwoKCS8vIHNyYy9jb250cmFjdHMvTGltaXRPcmRlcnMuYWxnby50czoyMjkKCS8vIGFyYzIwME91dEFtb3VudCA9IChhbGdvT3V0QW1vdW50ICogdGhpcy5vcmRlcmJvb2sob3JkZXJJZCkudmFsdWUuYXJjMjAwQW1vdW50KSAvIHRoaXMub3JkZXJib29rKG9yZGVySWQpLnZhbHVlLmFsZ29BbW91bnQKCWZyYW1lX2RpZyAyIC8vIGFsZ29PdXRBbW91bnQ6IHVuc2FmZSB1aW50MjU2CglmcmFtZV9kaWcgLTIgLy8gb3JkZXJJZDogdWludDwyNTY+Cglib3hfZ2V0Cglhc3NlcnQKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDcyIDMyCgliKgoJZnJhbWVfZGlnIC0yIC8vIG9yZGVySWQ6IHVpbnQ8MjU2PgoJYm94X2dldAoJYXNzZXJ0CglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCAzMiAzMgoJYi8KCWZyYW1lX2J1cnkgMyAvLyBhcmMyMDBPdXRBbW91bnQ6IHVuc2FmZSB1aW50MjU2CgoJLy8gc3JjL2NvbnRyYWN0cy9MaW1pdE9yZGVycy5hbGdvLnRzOjIzMQoJLy8gdGhpcy5hcmMyMDBUcmFuc2ZlclRvKHRoaXMub3JkZXJib29rKG9yZGVySWQpLnZhbHVlLmFyYzIwMElkLCB0aGlzLnR4bi5zZW5kZXIsIGFyYzIwME91dEFtb3VudCkKCWZyYW1lX2RpZyAzIC8vIGFyYzIwME91dEFtb3VudDogdW5zYWZlIHVpbnQyNTYKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMiAvLyBvcmRlcklkOiB1aW50PDI1Nj4KCWJveF9nZXQKCWFzc2VydAoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWV4dHJhY3QgNjQgOAoJYnRvaQoJY2FsbHN1YiBhcmMyMDBUcmFuc2ZlclRvCgoJLy8gc3JjL2NvbnRyYWN0cy9MaW1pdE9yZGVycy5hbGdvLnRzOjIzMwoJLy8gdGhpcy5vcmRlcmJvb2sob3JkZXJJZCkudmFsdWUuYXJjMjAwQW1vdW50IC09IGFyYzIwME91dEFtb3VudAoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWludCA3MgoJZnJhbWVfZGlnIC0yIC8vIG9yZGVySWQ6IHVpbnQ8MjU2PgoJYm94X2dldAoJYXNzZXJ0CglzdG9yZSAyNTUgLy8gZnVsbCBhcnJheQoJbG9hZCAyNTUgLy8gZnVsbCBhcnJheQoJZXh0cmFjdCA3MiAzMgoJZnJhbWVfZGlnIDMgLy8gYXJjMjAwT3V0QW1vdW50OiB1bnNhZmUgdWludDI1NgoJYi0KCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJZnJhbWVfZGlnIC0yIC8vIG9yZGVySWQ6IHVpbnQ8MjU2PgoJY292ZXIgMgoJYm94X3JlcGxhY2UKCgkvLyBzcmMvY29udHJhY3RzL0xpbWl0T3JkZXJzLmFsZ28udHM6MjM0CgkvLyB0aGlzLm9yZGVyYm9vayhvcmRlcklkKS52YWx1ZS5hbGdvQW1vdW50IC09IGFsZ29PdXRBbW91bnQKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglpbnQgMzIKCWZyYW1lX2RpZyAtMiAvLyBvcmRlcklkOiB1aW50PDI1Nj4KCWJveF9nZXQKCWFzc2VydAoJc3RvcmUgMjU1IC8vIGZ1bGwgYXJyYXkKCWxvYWQgMjU1IC8vIGZ1bGwgYXJyYXkKCWV4dHJhY3QgMzIgMzIKCWZyYW1lX2RpZyAyIC8vIGFsZ29PdXRBbW91bnQ6IHVuc2FmZSB1aW50MjU2CgliLQoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCglmcmFtZV9kaWcgLTIgLy8gb3JkZXJJZDogdWludDwyNTY+Cgljb3ZlciAyCglib3hfcmVwbGFjZQoKCS8vIHNyYy9jb250cmFjdHMvTGltaXRPcmRlcnMuYWxnby50czoyMzYKCS8vIHRoaXMuRmlsbE9yZGVyLmxvZyh7CgkvLyAgICAgICAgICAgICBvcmRlcklkOiBvcmRlcklkLAoJLy8gICAgICAgICAgICAgbWFrZXI6IHRoaXMub3JkZXJib29rKG9yZGVySWQpLnZhbHVlLm1ha2VyLAoJLy8gICAgICAgICAgICAgdGFrZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgICAgICAgIGZpbGxlZEFsZ29BbW91bnQ6IGFsZ29PdXRBbW91bnQsCgkvLyAgICAgICAgICAgICBmaWxsZWRBcmMyMDBBbW91bnQ6IGFyYzIwME91dEFtb3VudCwKCS8vICAgICAgICAgICAgIG9yZGVyRGlyZWN0aW9uOiAxLAoJLy8gICAgICAgICAgICAgZmVlOiBmZWUKCS8vICAgICAgICAgfSkKCWJ5dGUgMHhmNDg4YjQ0ZSAvLyBGaWxsT3JkZXIodWludDI1NixhZGRyZXNzLGFkZHJlc3MsdWludDI1Nix1aW50MjU2LHVpbnQ4LHVpbnQyNTYpCglmcmFtZV9kaWcgLTIgLy8gb3JkZXJJZDogdWludDwyNTY+CglmcmFtZV9kaWcgLTIgLy8gb3JkZXJJZDogdWludDwyNTY+Cglib3hfZ2V0Cglhc3NlcnQKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDAgMzIKCWNvbmNhdAoJdHhuIFNlbmRlcgoJY29uY2F0CglmcmFtZV9kaWcgMiAvLyBhbGdvT3V0QW1vdW50OiB1bnNhZmUgdWludDI1NgoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCgljb25jYXQKCWZyYW1lX2RpZyAzIC8vIGFyYzIwME91dEFtb3VudDogdW5zYWZlIHVpbnQyNTYKCWR1cAoJYml0bGVuCglpbnQgMjU2Cgk8PQoJYXNzZXJ0CglieXRlIDB4RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRgoJYiYKCWR1cAoJbGVuCglkdXAKCWludCAzMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJY29uY2F0CglieXRlIDB4MDEKCWNvbmNhdAoJZnJhbWVfZGlnIDEgLy8gZmVlOiB1bnNhZmUgdWludDI1NgoJZHVwCgliaXRsZW4KCWludCAyNTYKCTw9Cglhc3NlcnQKCWJ5dGUgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50IDMyCgktCglzd2FwCglzdWJzdHJpbmczCgljb25jYXQKCWNvbmNhdAoJbG9nCgoJLy8gaWYxX2NvbmRpdGlvbgoJLy8gc3JjL2NvbnRyYWN0cy9MaW1pdE9yZGVycy5hbGdvLnRzOjI0NgoJLy8gdGhpcy5vcmRlcmJvb2sob3JkZXJJZCkudmFsdWUuYWxnb0Ftb3VudCA8PSAxMDAwCglmcmFtZV9kaWcgLTIgLy8gb3JkZXJJZDogdWludDwyNTY+Cglib3hfZ2V0Cglhc3NlcnQKCXN0b3JlIDI1NSAvLyBmdWxsIGFycmF5Cglsb2FkIDI1NSAvLyBmdWxsIGFycmF5CglleHRyYWN0IDMyIDMyCglieXRlIDB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDNlOAoJYjw9CglieiBpZjFfZW5kCgoJLy8gaWYxX2NvbnNlcXVlbnQKCS8vIHNyYy9jb250cmFjdHMvTGltaXRPcmRlcnMuYWxnby50czoyNDcKCS8vIHRoaXMub3JkZXJib29rKG9yZGVySWQpLmRlbGV0ZSgpCglmcmFtZV9kaWcgLTIgLy8gb3JkZXJJZDogdWludDwyNTY+Cglib3hfZGVsCgppZjFfZW5kOgoJcmV0c3ViCgpjcmVhdGVfTm9PcDoKCW1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24odWludDI1Nil2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgllcnIKCmNhbGxfTm9PcDoKCW1ldGhvZCAic2V0RmVlKHVpbnQyNTYpdm9pZCIKCW1ldGhvZCAiY3JlYXRlQWxnb1RvQXJjMjAwT3JkZXIocGF5LGFwcGxpY2F0aW9uLHVpbnQyNTYpdm9pZCIKCW1ldGhvZCAiY3JlYXRlQXJjMjAwVG9BbGdvT3JkZXIoYXBwbCx1aW50MjU2LHVpbnQyNTYpdm9pZCIKCW1ldGhvZCAiZmlsbEFsZ29Ub0FyYzIwME9yZGVyKGFwcGwsdWludDI1Nix1aW50MjU2KXZvaWQiCgltZXRob2QgImZpbGxBcmMyMDBUb0FsZ29PcmRlcihwYXksdWludDI1Nil2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggYWJpX3JvdXRlX3NldEZlZSBhYmlfcm91dGVfY3JlYXRlQWxnb1RvQXJjMjAwT3JkZXIgYWJpX3JvdXRlX2NyZWF0ZUFyYzIwMFRvQWxnb09yZGVyIGFiaV9yb3V0ZV9maWxsQWxnb1RvQXJjMjAwT3JkZXIgYWJpX3JvdXRlX2ZpbGxBcmMyMDBUb0FsZ29PcmRlcgoJZXJyCgpjYWxsX1VwZGF0ZUFwcGxpY2F0aW9uOgoJbWV0aG9kICJ1cGRhdGVBcHBsaWNhdGlvbigpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoIGFiaV9yb3V0ZV91cGRhdGVBcHBsaWNhdGlvbgoJZXJy',
		clear: 'I3ByYWdtYSB2ZXJzaW9uIDk=',
	},
	contract: {
		name: 'LimitOrder001',
		desc: '',
		methods: [
			{
				name: 'createApplication',
				args: [
					{
						name: 'ownerFee',
						type: 'uint256',
					},
				],
				returns: {
					type: 'void',
				},
			},
			{
				name: 'updateApplication',
				args: [],
				returns: {
					type: 'void',
				},
			},
			{
				name: 'setFee',
				args: [
					{
						name: 'ownerFee',
						type: 'uint256',
					},
				],
				returns: {
					type: 'void',
				},
			},
			{
				name: 'createAlgoToArc200Order',
				args: [
					{
						name: 'algoPayTxn',
						type: 'pay',
					},
					{
						name: 'arc200Id',
						type: 'application',
					},
					{
						name: 'arc200Amount',
						type: 'uint256',
					},
				],
				returns: {
					type: 'void',
				},
				events: [
					{
						name: 'PlaceOrder',
						args: [
							{
								name: 'orderId',
								type: 'uint256',
							},
							{
								name: 'maker',
								type: 'address',
							},
							{
								name: 'algoAmount',
								type: 'uint256',
							},
							{
								name: 'arc200Amount',
								type: 'uint256',
							},
							{
								name: 'orderDirection',
								type: 'uint8',
							},
						],
						desc: '**********************************************',
					},
				],
			},
			{
				name: 'createArc200ToAlgoOrder',
				args: [
					{
						name: 'arc200ApproveTxn',
						type: 'appl',
					},
					{
						name: 'arc200Amount',
						type: 'uint256',
					},
					{
						name: 'algoAmount',
						type: 'uint256',
					},
				],
				returns: {
					type: 'void',
				},
				events: [
					{
						name: 'PlaceOrder',
						args: [
							{
								name: 'orderId',
								type: 'uint256',
							},
							{
								name: 'maker',
								type: 'address',
							},
							{
								name: 'algoAmount',
								type: 'uint256',
							},
							{
								name: 'arc200Amount',
								type: 'uint256',
							},
							{
								name: 'orderDirection',
								type: 'uint8',
							},
						],
						desc: '**********************************************',
					},
				],
			},
			{
				name: 'fillAlgoToArc200Order',
				args: [
					{
						name: 'arc200ApproveTxn',
						type: 'appl',
					},
					{
						name: 'orderId',
						type: 'uint256',
					},
					{
						name: 'arc200Amount',
						type: 'uint256',
					},
				],
				returns: {
					type: 'void',
				},
				events: [
					{
						name: 'FillOrder',
						args: [
							{
								name: 'orderId',
								type: 'uint256',
							},
							{
								name: 'maker',
								type: 'address',
							},
							{
								name: 'taker',
								type: 'address',
							},
							{
								name: 'filledAlgoAmount',
								type: 'uint256',
							},
							{
								name: 'filledArc200Amount',
								type: 'uint256',
							},
							{
								name: 'orderDirection',
								type: 'uint8',
							},
							{
								name: 'fee',
								type: 'uint256',
							},
						],
						desc: '',
					},
				],
			},
			{
				name: 'fillArc200ToAlgoOrder',
				args: [
					{
						name: 'algoPayTxn',
						type: 'pay',
					},
					{
						name: 'orderId',
						type: 'uint256',
					},
				],
				returns: {
					type: 'void',
				},
				events: [
					{
						name: 'FillOrder',
						args: [
							{
								name: 'orderId',
								type: 'uint256',
							},
							{
								name: 'maker',
								type: 'address',
							},
							{
								name: 'taker',
								type: 'address',
							},
							{
								name: 'filledAlgoAmount',
								type: 'uint256',
							},
							{
								name: 'filledArc200Amount',
								type: 'uint256',
							},
							{
								name: 'orderDirection',
								type: 'uint8',
							},
							{
								name: 'fee',
								type: 'uint256',
							},
						],
						desc: '',
					},
				],
			},
		],
		events: [
			{
				name: 'PlaceOrder',
				args: [
					{
						name: 'orderId',
						type: 'uint256',
					},
					{
						name: 'maker',
						type: 'address',
					},
					{
						name: 'algoAmount',
						type: 'uint256',
					},
					{
						name: 'arc200Amount',
						type: 'uint256',
					},
					{
						name: 'orderDirection',
						type: 'uint8',
					},
				],
				desc: '**********************************************',
			},
			{
				name: 'FillOrder',
				args: [
					{
						name: 'orderId',
						type: 'uint256',
					},
					{
						name: 'maker',
						type: 'address',
					},
					{
						name: 'taker',
						type: 'address',
					},
					{
						name: 'filledAlgoAmount',
						type: 'uint256',
					},
					{
						name: 'filledArc200Amount',
						type: 'uint256',
					},
					{
						name: 'orderDirection',
						type: 'uint8',
					},
					{
						name: 'fee',
						type: 'uint256',
					},
				],
				desc: '',
			},
		],
	},
};

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp = { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC };
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn = { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC };
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut = { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC };
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp = { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC };
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp = { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC };
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
	/**
	 * Gets the state value as a BigInt
	 */
	asBigInt(): bigint;
	/**
	 * Gets the state value as a number.
	 */
	asNumber(): number;
};
/**
 * A state record containing binary data
 */
export type BinaryState = {
	/**
	 * Gets the state value as a Uint8Array
	 */
	asByteArray(): Uint8Array;
	/**
	 * Gets the state value as a string
	 */
	asString(): string;
};

/**
 * Defines the types of available calls and state of the LimitOrder001 smart contract.
 */
export type LimitOrder001 = {
	/**
	 * Maps method signatures / names to their argument and return types.
	 */
	methods: Record<
		'createApplication(uint256)void' | 'createApplication',
		{
			argsObj: {
				ownerFee: bigint | number;
			};
			argsTuple: [ownerFee: bigint | number];
			returns: void;
		}
	> &
		Record<
			'updateApplication()void' | 'updateApplication',
			{
				argsObj: {};
				argsTuple: [];
				returns: void;
			}
		> &
		Record<
			'setFee(uint256)void' | 'setFee',
			{
				argsObj: {
					ownerFee: bigint | number;
				};
				argsTuple: [ownerFee: bigint | number];
				returns: void;
			}
		> &
		Record<
			'createAlgoToArc200Order(pay,application,uint256)void' | 'createAlgoToArc200Order',
			{
				argsObj: {
					algoPayTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>;
					arc200Id: number | bigint;
					arc200Amount: bigint | number;
				};
				argsTuple: [
					algoPayTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>,
					arc200Id: number | bigint,
					arc200Amount: bigint | number
				];
				returns: void;
			}
		> &
		Record<
			'createArc200ToAlgoOrder(appl,uint256,uint256)void' | 'createArc200ToAlgoOrder',
			{
				argsObj: {
					arc200ApproveTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>;
					arc200Amount: bigint | number;
					algoAmount: bigint | number;
				};
				argsTuple: [
					arc200ApproveTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>,
					arc200Amount: bigint | number,
					algoAmount: bigint | number
				];
				returns: void;
			}
		> &
		Record<
			'fillAlgoToArc200Order(appl,uint256,uint256)void' | 'fillAlgoToArc200Order',
			{
				argsObj: {
					arc200ApproveTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>;
					orderId: bigint | number;
					arc200Amount: bigint | number;
				};
				argsTuple: [
					arc200ApproveTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>,
					orderId: bigint | number,
					arc200Amount: bigint | number
				];
				returns: void;
			}
		> &
		Record<
			'fillArc200ToAlgoOrder(pay,uint256)void' | 'fillArc200ToAlgoOrder',
			{
				argsObj: {
					algoPayTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>;
					orderId: bigint | number;
				};
				argsTuple: [
					algoPayTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>,
					orderId: bigint | number
				];
				returns: void;
			}
		>;
};
/**
 * Defines the possible abi call signatures
 */
export type LimitOrder001Sig = keyof LimitOrder001['methods'];
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends LimitOrder001Sig | undefined> = {
	method: TSignature;
	methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>;
} & AppClientCallCoreParams &
	CoreAppCallArgs;
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>;
/**
 * Maps a method signature from the LimitOrder001 smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends LimitOrder001Sig> = LimitOrder001['methods'][TSignature][
	| 'argsObj'
	| 'argsTuple'];
/**
 * Maps a method signature from the LimitOrder001 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends LimitOrder001Sig> = LimitOrder001['methods'][TSignature]['returns'];

/**
 * A factory for available 'create' calls
 */
export type LimitOrder001CreateCalls = (typeof LimitOrder001CallFactory)['create'];
/**
 * Defines supported create methods for this smart contract
 */
export type LimitOrder001CreateCallParams = TypedCallParams<'createApplication(uint256)void'> & OnCompleteNoOp;
/**
 * A factory for available 'update' calls
 */
export type LimitOrder001UpdateCalls = (typeof LimitOrder001CallFactory)['update'];
/**
 * Defines supported update methods for this smart contract
 */
export type LimitOrder001UpdateCallParams = TypedCallParams<'updateApplication()void'>;
/**
 * Defines arguments required for the deploy method.
 */
export type LimitOrder001DeployArgs = {
	deployTimeParams?: TealTemplateParams;
	/**
	 * A delegate which takes a create call factory and returns the create call params for this smart contract
	 */
	createCall?: (callFactory: LimitOrder001CreateCalls) => LimitOrder001CreateCallParams;
	/**
	 * A delegate which takes a update call factory and returns the update call params for this smart contract
	 */
	updateCall?: (callFactory: LimitOrder001UpdateCalls) => LimitOrder001UpdateCallParams;
};

/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class LimitOrder001CallFactory {
	/**
	 * Gets available create call factories
	 */
	static get create() {
		return {
			/**
			 * Constructs a create call for the LimitOrder001 smart contract using the createApplication(uint256)void ABI method
			 *
			 * @param args Any args for the contract call
			 * @param params Any additional parameters for the call
			 * @returns A TypedCallParams object for the call
			 */
			createApplication(
				args: MethodArgs<'createApplication(uint256)void'>,
				params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & OnCompleteNoOp = {}
			) {
				return {
					method: 'createApplication(uint256)void' as const,
					methodArgs: Array.isArray(args) ? args : [args.ownerFee],
					...params,
				};
			},
		};
	}

	/**
	 * Gets available update call factories
	 */
	static get update() {
		return {
			/**
			 * Constructs an update call for the LimitOrder001 smart contract using the updateApplication()void ABI method
			 *
			 * @param args Any args for the contract call
			 * @param params Any additional parameters for the call
			 * @returns A TypedCallParams object for the call
			 */
			updateApplication(
				args: MethodArgs<'updateApplication()void'>,
				params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}
			) {
				return {
					method: 'updateApplication()void' as const,
					methodArgs: Array.isArray(args) ? args : [],
					...params,
				};
			},
		};
	}

	/**
	 * Constructs a no op call for the setFee(uint256)void ABI method
	 *
	 * @param args Any args for the contract call
	 * @param params Any additional parameters for the call
	 * @returns A TypedCallParams object for the call
	 */
	static setFee(args: MethodArgs<'setFee(uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
		return {
			method: 'setFee(uint256)void' as const,
			methodArgs: Array.isArray(args) ? args : [args.ownerFee],
			...params,
		};
	}
	/**
	 * Constructs a no op call for the createAlgoToArc200Order(pay,application,uint256)void ABI method
	 *
	 * @param args Any args for the contract call
	 * @param params Any additional parameters for the call
	 * @returns A TypedCallParams object for the call
	 */
	static createAlgoToArc200Order(
		args: MethodArgs<'createAlgoToArc200Order(pay,application,uint256)void'>,
		params: AppClientCallCoreParams & CoreAppCallArgs
	) {
		return {
			method: 'createAlgoToArc200Order(pay,application,uint256)void' as const,
			methodArgs: Array.isArray(args) ? args : [args.algoPayTxn, args.arc200Id, args.arc200Amount],
			...params,
		};
	}
	/**
	 * Constructs a no op call for the createArc200ToAlgoOrder(appl,uint256,uint256)void ABI method
	 *
	 * @param args Any args for the contract call
	 * @param params Any additional parameters for the call
	 * @returns A TypedCallParams object for the call
	 */
	static createArc200ToAlgoOrder(
		args: MethodArgs<'createArc200ToAlgoOrder(appl,uint256,uint256)void'>,
		params: AppClientCallCoreParams & CoreAppCallArgs
	) {
		return {
			method: 'createArc200ToAlgoOrder(appl,uint256,uint256)void' as const,
			methodArgs: Array.isArray(args) ? args : [args.arc200ApproveTxn, args.arc200Amount, args.algoAmount],
			...params,
		};
	}
	/**
	 * Constructs a no op call for the fillAlgoToArc200Order(appl,uint256,uint256)void ABI method
	 *
	 * @param args Any args for the contract call
	 * @param params Any additional parameters for the call
	 * @returns A TypedCallParams object for the call
	 */
	static fillAlgoToArc200Order(
		args: MethodArgs<'fillAlgoToArc200Order(appl,uint256,uint256)void'>,
		params: AppClientCallCoreParams & CoreAppCallArgs
	) {
		return {
			method: 'fillAlgoToArc200Order(appl,uint256,uint256)void' as const,
			methodArgs: Array.isArray(args) ? args : [args.arc200ApproveTxn, args.orderId, args.arc200Amount],
			...params,
		};
	}
	/**
	 * Constructs a no op call for the fillArc200ToAlgoOrder(pay,uint256)void ABI method
	 *
	 * @param args Any args for the contract call
	 * @param params Any additional parameters for the call
	 * @returns A TypedCallParams object for the call
	 */
	static fillArc200ToAlgoOrder(
		args: MethodArgs<'fillArc200ToAlgoOrder(pay,uint256)void'>,
		params: AppClientCallCoreParams & CoreAppCallArgs
	) {
		return {
			method: 'fillArc200ToAlgoOrder(pay,uint256)void' as const,
			methodArgs: Array.isArray(args) ? args : [args.algoPayTxn, args.orderId],
			...params,
		};
	}
}

/**
 * A client to make calls to the LimitOrder001 smart contract
 */
export class LimitOrder001Client {
	/**
	 * The underlying `ApplicationClient` for when you want to have more flexibility
	 */
	public readonly appClient: ApplicationClient;

	private readonly sender: SendTransactionFrom | undefined;

	/**
	 * Creates a new instance of `LimitOrder001Client`
	 *
	 * @param appDetails appDetails The details to identify the app to deploy
	 * @param algod An algod client instance
	 */
	constructor(appDetails: AppDetails, private algod: Algodv2) {
		this.sender = appDetails.sender;
		this.appClient = algokit.getAppClient(
			{
				...appDetails,
				app: APP_SPEC,
			},
			algod
		);
	}

	/**
	 * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
	 *
	 * @param result The AppCallTransactionResult to be mapped
	 * @param returnValueFormatter An optional delegate to format the return value if required
	 * @returns The smart contract response with an updated return value
	 */
	protected mapReturnValue<TReturn>(
		result: AppCallTransactionResult,
		returnValueFormatter?: (value: any) => TReturn
	): AppCallTransactionResultOfType<TReturn> {
		if (result.return?.decodeError) {
			throw result.return.decodeError;
		}
		const returnValue =
			result.return?.returnValue !== undefined && returnValueFormatter !== undefined
				? returnValueFormatter(result.return.returnValue)
				: (result.return?.returnValue as TReturn | undefined);
		return { ...result, return: returnValue };
	}

	/**
	 * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
	 *
	 * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
	 * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
	 * @returns The result of the smart contract call
	 */
	public async call<TSignature extends keyof LimitOrder001['methods']>(
		typedCallParams: TypedCallParams<TSignature>,
		returnValueFormatter?: (value: any) => MethodReturn<TSignature>
	) {
		return this.mapReturnValue<MethodReturn<TSignature>>(
			await this.appClient.call(typedCallParams),
			returnValueFormatter
		);
	}

	/**
	 * Idempotently deploys the LimitOrder001 smart contract.
	 *
	 * @param params The arguments for the contract calls and any additional parameters for the call
	 * @returns The deployment result
	 */
	public deploy(
		params: LimitOrder001DeployArgs & AppClientDeployCoreParams = {}
	): ReturnType<ApplicationClient['deploy']> {
		const createArgs = params.createCall?.(LimitOrder001CallFactory.create);
		const updateArgs = params.updateCall?.(LimitOrder001CallFactory.update);
		return this.appClient.deploy({
			...params,
			updateArgs,
			createArgs,
			createOnCompleteAction: createArgs?.onCompleteAction,
		});
	}

	/**
	 * Gets available create methods
	 */
	public get create() {
		const $this = this;
		return {
			/**
			 * Creates a new instance of the LimitOrder001 smart contract using the createApplication(uint256)void ABI method.
			 *
			 * @param args The arguments for the smart contract call
			 * @param params Any additional parameters for the call
			 * @returns The create result
			 */
			async createApplication(
				args: MethodArgs<'createApplication(uint256)void'>,
				params: AppClientCallCoreParams & AppClientCompilationParams & OnCompleteNoOp = {}
			): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication(uint256)void'>>> {
				return $this.mapReturnValue(
					await $this.appClient.create(LimitOrder001CallFactory.create.createApplication(args, params))
				);
			},
		};
	}

	/**
	 * Gets available update methods
	 */
	public get update() {
		const $this = this;
		return {
			/**
			 * Updates an existing instance of the LimitOrder001 smart contract using the updateApplication()void ABI method.
			 *
			 * @param args The arguments for the smart contract call
			 * @param params Any additional parameters for the call
			 * @returns The update result
			 */
			async updateApplication(
				args: MethodArgs<'updateApplication()void'>,
				params: AppClientCallCoreParams & AppClientCompilationParams = {}
			): Promise<AppCallTransactionResultOfType<MethodReturn<'updateApplication()void'>>> {
				return $this.mapReturnValue(
					await $this.appClient.update(LimitOrder001CallFactory.update.updateApplication(args, params))
				);
			},
		};
	}

	/**
	 * Makes a clear_state call to an existing instance of the LimitOrder001 smart contract.
	 *
	 * @param args The arguments for the bare call
	 * @returns The clear_state result
	 */
	public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
		return this.appClient.clearState(args);
	}

	/**
	 * Calls the setFee(uint256)void ABI method.
	 *
	 * @param args The arguments for the contract call
	 * @param params Any additional parameters for the call
	 * @returns The result of the call
	 */
	public setFee(args: MethodArgs<'setFee(uint256)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
		return this.call(LimitOrder001CallFactory.setFee(args, params));
	}

	/**
	 * Calls the createAlgoToArc200Order(pay,application,uint256)void ABI method.
	 *
	 * @param args The arguments for the contract call
	 * @param params Any additional parameters for the call
	 * @returns The result of the call
	 */
	public createAlgoToArc200Order(
		args: MethodArgs<'createAlgoToArc200Order(pay,application,uint256)void'>,
		params: AppClientCallCoreParams & CoreAppCallArgs = {}
	) {
		return this.call(LimitOrder001CallFactory.createAlgoToArc200Order(args, params));
	}

	/**
	 * Calls the createArc200ToAlgoOrder(appl,uint256,uint256)void ABI method.
	 *
	 * @param args The arguments for the contract call
	 * @param params Any additional parameters for the call
	 * @returns The result of the call
	 */
	public createArc200ToAlgoOrder(
		args: MethodArgs<'createArc200ToAlgoOrder(appl,uint256,uint256)void'>,
		params: AppClientCallCoreParams & CoreAppCallArgs = {}
	) {
		return this.call(LimitOrder001CallFactory.createArc200ToAlgoOrder(args, params));
	}

	/**
	 * Calls the fillAlgoToArc200Order(appl,uint256,uint256)void ABI method.
	 *
	 * @param args The arguments for the contract call
	 * @param params Any additional parameters for the call
	 * @returns The result of the call
	 */
	public fillAlgoToArc200Order(
		args: MethodArgs<'fillAlgoToArc200Order(appl,uint256,uint256)void'>,
		params: AppClientCallCoreParams & CoreAppCallArgs = {}
	) {
		return this.call(LimitOrder001CallFactory.fillAlgoToArc200Order(args, params));
	}

	/**
	 * Calls the fillArc200ToAlgoOrder(pay,uint256)void ABI method.
	 *
	 * @param args The arguments for the contract call
	 * @param params Any additional parameters for the call
	 * @returns The result of the call
	 */
	public fillArc200ToAlgoOrder(
		args: MethodArgs<'fillArc200ToAlgoOrder(pay,uint256)void'>,
		params: AppClientCallCoreParams & CoreAppCallArgs = {}
	) {
		return this.call(LimitOrder001CallFactory.fillArc200ToAlgoOrder(args, params));
	}

	public compose(): LimitOrder001Composer {
		const client = this;
		const atc = new AtomicTransactionComposer();
		let promiseChain: Promise<unknown> = Promise.resolve();
		const resultMappers: Array<undefined | ((x: any) => any)> = [];
		return {
			setFee(args: MethodArgs<'setFee(uint256)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
				promiseChain = promiseChain.then(() =>
					client.setFee(args, { ...params, sendParams: { ...params?.sendParams, skipSending: true, atc } })
				);
				resultMappers.push(undefined);
				return this;
			},
			createAlgoToArc200Order(
				args: MethodArgs<'createAlgoToArc200Order(pay,application,uint256)void'>,
				params?: AppClientCallCoreParams & CoreAppCallArgs
			) {
				promiseChain = promiseChain.then(() =>
					client.createAlgoToArc200Order(args, {
						...params,
						sendParams: { ...params?.sendParams, skipSending: true, atc },
					})
				);
				resultMappers.push(undefined);
				return this;
			},
			createArc200ToAlgoOrder(
				args: MethodArgs<'createArc200ToAlgoOrder(appl,uint256,uint256)void'>,
				params?: AppClientCallCoreParams & CoreAppCallArgs
			) {
				promiseChain = promiseChain.then(() =>
					client.createArc200ToAlgoOrder(args, {
						...params,
						sendParams: { ...params?.sendParams, skipSending: true, atc },
					})
				);
				resultMappers.push(undefined);
				return this;
			},
			fillAlgoToArc200Order(
				args: MethodArgs<'fillAlgoToArc200Order(appl,uint256,uint256)void'>,
				params?: AppClientCallCoreParams & CoreAppCallArgs
			) {
				promiseChain = promiseChain.then(() =>
					client.fillAlgoToArc200Order(args, {
						...params,
						sendParams: { ...params?.sendParams, skipSending: true, atc },
					})
				);
				resultMappers.push(undefined);
				return this;
			},
			fillArc200ToAlgoOrder(
				args: MethodArgs<'fillArc200ToAlgoOrder(pay,uint256)void'>,
				params?: AppClientCallCoreParams & CoreAppCallArgs
			) {
				promiseChain = promiseChain.then(() =>
					client.fillArc200ToAlgoOrder(args, {
						...params,
						sendParams: { ...params?.sendParams, skipSending: true, atc },
					})
				);
				resultMappers.push(undefined);
				return this;
			},
			get update() {
				const $this = this;
				return {
					updateApplication(
						args: MethodArgs<'updateApplication()void'>,
						params?: AppClientCallCoreParams & AppClientCompilationParams
					) {
						promiseChain = promiseChain.then(() =>
							client.update.updateApplication(args, {
								...params,
								sendParams: { ...params?.sendParams, skipSending: true, atc },
							})
						);
						resultMappers.push(undefined);
						return $this;
					},
				};
			},
			clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
				promiseChain = promiseChain.then(() =>
					client.clearState({ ...args, sendParams: { ...args?.sendParams, skipSending: true, atc } })
				);
				resultMappers.push(undefined);
				return this;
			},
			addTransaction(
				txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>,
				defaultSender?: SendTransactionFrom
			) {
				promiseChain = promiseChain.then(async () =>
					atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender))
				);
				return this;
			},
			async atc() {
				await promiseChain;
				return atc;
			},
			async simulate() {
				await promiseChain;
				const result = await atc.simulate(client.algod);
				return result;
			},
			async execute() {
				await promiseChain;
				const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod);
				return {
					...result,
					returns: result.returns?.map((val, i) =>
						resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue
					),
				};
			},
		} as unknown as LimitOrder001Composer;
	}
}
export type LimitOrder001Composer<TReturns extends [...any[]] = []> = {
	/**
	 * Calls the setFee(uint256)void ABI method.
	 *
	 * @param args The arguments for the contract call
	 * @param params Any additional parameters for the call
	 * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
	 */
	setFee(
		args: MethodArgs<'setFee(uint256)void'>,
		params?: AppClientCallCoreParams & CoreAppCallArgs
	): LimitOrder001Composer<[...TReturns, MethodReturn<'setFee(uint256)void'>]>;

	/**
	 * Calls the createAlgoToArc200Order(pay,application,uint256)void ABI method.
	 *
	 * @param args The arguments for the contract call
	 * @param params Any additional parameters for the call
	 * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
	 */
	createAlgoToArc200Order(
		args: MethodArgs<'createAlgoToArc200Order(pay,application,uint256)void'>,
		params?: AppClientCallCoreParams & CoreAppCallArgs
	): LimitOrder001Composer<[...TReturns, MethodReturn<'createAlgoToArc200Order(pay,application,uint256)void'>]>;

	/**
	 * Calls the createArc200ToAlgoOrder(appl,uint256,uint256)void ABI method.
	 *
	 * @param args The arguments for the contract call
	 * @param params Any additional parameters for the call
	 * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
	 */
	createArc200ToAlgoOrder(
		args: MethodArgs<'createArc200ToAlgoOrder(appl,uint256,uint256)void'>,
		params?: AppClientCallCoreParams & CoreAppCallArgs
	): LimitOrder001Composer<[...TReturns, MethodReturn<'createArc200ToAlgoOrder(appl,uint256,uint256)void'>]>;

	/**
	 * Calls the fillAlgoToArc200Order(appl,uint256,uint256)void ABI method.
	 *
	 * @param args The arguments for the contract call
	 * @param params Any additional parameters for the call
	 * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
	 */
	fillAlgoToArc200Order(
		args: MethodArgs<'fillAlgoToArc200Order(appl,uint256,uint256)void'>,
		params?: AppClientCallCoreParams & CoreAppCallArgs
	): LimitOrder001Composer<[...TReturns, MethodReturn<'fillAlgoToArc200Order(appl,uint256,uint256)void'>]>;

	/**
	 * Calls the fillArc200ToAlgoOrder(pay,uint256)void ABI method.
	 *
	 * @param args The arguments for the contract call
	 * @param params Any additional parameters for the call
	 * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
	 */
	fillArc200ToAlgoOrder(
		args: MethodArgs<'fillArc200ToAlgoOrder(pay,uint256)void'>,
		params?: AppClientCallCoreParams & CoreAppCallArgs
	): LimitOrder001Composer<[...TReturns, MethodReturn<'fillArc200ToAlgoOrder(pay,uint256)void'>]>;

	/**
	 * Gets available update methods
	 */
	readonly update: {
		/**
		 * Updates an existing instance of the LimitOrder001 smart contract using the updateApplication()void ABI method.
		 *
		 * @param args The arguments for the smart contract call
		 * @param params Any additional parameters for the call
		 * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
		 */
		updateApplication(
			args: MethodArgs<'updateApplication()void'>,
			params?: AppClientCallCoreParams & AppClientCompilationParams
		): LimitOrder001Composer<[...TReturns, MethodReturn<'updateApplication()void'>]>;
	};

	/**
	 * Makes a clear_state call to an existing instance of the LimitOrder001 smart contract.
	 *
	 * @param args The arguments for the bare call
	 * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
	 */
	clearState(
		args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs
	): LimitOrder001Composer<[...TReturns, undefined]>;

	/**
	 * Adds a transaction to the composer
	 *
	 * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
	 * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
	 */
	addTransaction(
		txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>,
		defaultSender?: SendTransactionFrom
	): LimitOrder001Composer<TReturns>;
	/**
	 * Returns the underlying AtomicTransactionComposer instance
	 */
	atc(): Promise<AtomicTransactionComposer>;
	/**
	 * Simulates the transaction group and returns the result
	 */
	simulate(): Promise<LimitOrder001ComposerSimulateResult>;
	/**
	 * Executes the transaction group and returns the results
	 */
	execute(): Promise<LimitOrder001ComposerResults<TReturns>>;
};
export type LimitOrder001ComposerSimulateResult = {
	methodResults: ABIResult[];
	simulateResponse: modelsv2.SimulateResponse;
};
export type LimitOrder001ComposerResults<TReturns extends [...any[]]> = {
	returns: TReturns;
	groupId: string;
	txIds: string[];
	transactions: Transaction[];
};
